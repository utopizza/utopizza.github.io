---
title: PriorTracker
date: 2019-01-05
categories: 
- Thesis
---

一、背景及问题

APT（Advanced Persistent Threat）攻击是一种长期、多步骤的攻击，它往往会涉及多个系统事件和文件。因此一旦发现系统收到这种攻击时，必须执行攻击因果分析（Attack Causality Analysis ），即从一个受到攻击的事件或者文件作为入口，向前追踪其攻击源头，并且向后分析所有被攻击牵涉中的其他文件或数据。

一般来说，攻击因果分析是基于系统资源的依赖图进行的。依赖图记录了系统中各种事件的先后次序和信息流，因此依赖图往往十分巨大，特别对于拥有大量机器的大型企业来说。以往的研究都是关注于如何对这个巨大的依赖图进行剪枝，以减少需要分析的数据量。但是这些研究都没有考虑执行分析时的时间限制，只对所有数据一视同仁地依次执行分析。文章提出，时效性对与攻击因果分析来说是非常重要的，因为在发现受到攻击后，越快地分析出攻击源以及受到污染的数据，就能越快地采取隔离措施或者修复措施，减少企业损失。据统计，90% 的 APT  攻击都是在数分钟内完成的。因此目前的问题就是，如何在保证攻击不会被遗漏和 CPU 运算能力一定的前提下，如何尽可能快地执行攻击因果分析？

二、解决方案

文章提出一个称为 PriorTracker 的模型， 其基本思路是，以往的研究没有办法加速攻击因果分析的的原因是，他们没有办法区分出异常的系统事件和正常的系统事件，因此他们只能对依赖图中的所有路径一视同仁地去执行分析，包括一些复杂但实际上与攻击无关的正常的系统调用事件，这就导致了分析的时候花费了大量的时间和算力在无关的数据上。如果我们能够有办法区分出异常的系统事件和正常的系统事件，那么就可以优先对异常事件进行分析，最快地命中攻击。

那么如果甄别出系统中的异常事件？文章提出的一个方案是，用算法对每个系统事件（System Event）计算一个优先权（Priority Score），优先权高的事件先执行分析。优先权的计算由如下公式给出

$$PriorityScore(e)=\alpha \cdot RarenessScore(e) + \beta \cdot FanoutScore(e)$$

其中 $e$ 表示资源依赖图中的一个系统事件；$RarenessScore$ 表示事件的稀有得分，因为异常事件必定是正常系统的过往历史中很少出现的事件；$FanoutScore$ 表示扇出得分，如果一个事件的扇出（也即在资源依赖图中的一个节点的出度）越多，那么执行这个事件的分析所花费的时间越多。另外从统计经验知道，一般来说一些正常的系统事件例如更新进程数据等等的扇出度是非常巨大的，但是这类数据对攻击分析是没什么贡献的，只会浪费 CPU 时间。因此一个自然的想法是优先计算扇出较小的事件节点，别免浪费时间。当然这也会导致分析覆盖面的减小，但是这样的 tradeoff 总的来说是需要的。而 $\alpha$ 和 $\beta$ 是两者的平滑系数，文章中使用机器学习方法来训练这两个参数。两者的计算公式如下：

$$RarenessScore(e)=
\begin{cases} 
1, &  \text{if e has not been observed by reference model} \\
\frac{1}{ref(e)}, & \text{otherwise}
\end{cases}$$

$$FanoutScore(e)=
\begin{cases}
0,& \text{if e reaches a read-only file in backtracking} \\
\delta,& \text{if e reaches a write-only file in forward tracking} \\
\frac{1}{fanout(e)}, & \text{otherwise}
\end{cases}
$$

其中 $ref(e)$ 由文章定义的一个称为 $Reference Model$ 的模型给出，其主要思想是统计一个系统事件在一个时间段（一周或者一个月，这个可以根据企业的生产情况自行调节）内的出现总次数。而 $fanout(e)$ 文章没有给出计算公式，估计就是节点出度？

现在有了每个事件的优先权后，就可以加速因果分析了。具体做法很简单，就是维护一个优先队列，类似于广度优先遍历，先把以捕获到的一个确认被攻击的结点放入队列作为分析起点，然后不断从队列中取出队头节点，分析它的前驱节点或者后继节点，以及这些节点的优先权，然后加入优先队列中去。如此循环，直至到达限定的时间或者依赖图的所有节点都被分析完。

三、总结

文章提出了一种利用优先权的方法来优先分析计算可疑的系统事件，加速攻击因果分析，使得能在最短时间内命中受到攻击的系统事件和数据。其中，虽然优先权的计算是比较启发式的、经验导向的公式，但是它们的平滑系数是通过机器学习来确定。
