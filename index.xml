<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Utopizza</title>
    <link>https://utopizza.github.io/</link>
    <description>Recent content on Utopizza</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://utopizza.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>阶段总结(8)</title>
      <link>https://utopizza.github.io/posts/summary/2019-09-16-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%938/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/summary/2019-09-16-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%938/</guid>
      <description>&lt;p&gt;上一次写阶段总结是2019年4月30日，距现在已经过去了5、6、7、8四个月。需要总结下这四个月以来的工作，以及后续的计划。&lt;/p&gt;
&lt;p&gt;一、Backward&lt;/p&gt;
&lt;p&gt;2019年5月
毕业答辩日期安排在5月26日，因此这个月基本全部精力时间都花在论文上。论文主体在4月份基本已经写完了，5月份基本都是在补一些报告书如开题报告、中期检查报告等等。月初和舍友去木兰天池玩了一天，山上挺凉快的。中间抽时间在宿舍看了一部电视剧《我们离恶有多远》，相当震撼，因为剧中探讨的问题十分有深度。剧情比较虐心，让人看得都郁闷了很久。就这样刷刷剧、写写文档，就浑浑噩噩到了答辩日期。答辩地点就在实验室旁边的一个大会议室，但是评委老师一个都没见过，刚开始还是有点紧张的。由于准备还算较充分，流畅地讲完了PPT，评委老师也没问什么很深入的问题，就问了我在汉口那边呆了多久，什么时候回来的。我说3月回来的，老师还表扬了一波我说这么短时间能弄出这么多公式理论，还不错。。大概就是就这样水过了硕士答辩。硕士阶段的最后一块大石终于落地。答辩完了基本就知道通过了。回去的路上，感觉整个世界都不一样，虽然是下午四点多，但是感觉阳光特别特别的明媚。&lt;/p&gt;
&lt;p&gt;2019年6月
答辩完了之后，回去就是整理各种报告、文档，然后去打印店打印封装论文。然后就是各种浪了，约几个小伙伴一起去游泳、密室逃脱、攀岩、射箭、桌游、吃吃喝喝。月初端午节百度寄来了一箱很粽子，16号的时候学校还举办了毕业晚餐会。18号晚上老爸老妈到汉，带他们吃了西餐，然后安顿好酒店。19号带他们逛了武大、省博、楚河汉街。20号上午是毕业典礼，下午弄离校手续，旁晚去拍了毕业照。21号主要是收拾宿舍东西，寄东西，下午带爸妈去逛光谷、拍照。晚上和舍友聚餐。22号早上等爸妈过来吃了早饭，就跟舍友告别，滴滴去高铁站了。&lt;/p&gt;
&lt;p&gt;2019年7月、8月、9月
系统里定的7月10号报到入职，因此在家里只呆了不到两周就上深圳了。刚入职就遇到团建——东西冲穿越，不知道是暴晒的原因还是过度运动的原因，回来竟然发烧、鼻炎复发。先后看了两次医生，做了鼻镜检查，浪费了不少时间，不过还好没事。从7月10号入职到现在，这两个月的主要工作任务就是看文档和内部的wiki，熟悉团队的产品。还有一些小issue需要写一些简单的代码，难度不大。另外还有一些运维和运营的小任务，就是平时要留意下一些服务的监控任务的报警，根据情况处理下就行，也不太难。总的来说目前主要是以熟悉和了解为主，辅以一些小issue开发任务，还有各种新人培训课程。公司也配备了导师，感觉导师的指导还是非常到位的，尤其一开始就指出要从校园心态过渡到职场心态，我一开始听了没什么感觉，但是到了后来就确实体会到了，确实比较难一下子调整过来。&lt;/p&gt;
&lt;p&gt;二、forward&lt;/p&gt;
&lt;p&gt;最近想了下，工作之余应该有自己的学习计划和安排，否则会浪费很多时间。因此制作个最近的一些学习小目标吧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码规范：这是工程师的最基本素养（python已看，java未看）&lt;/li&gt;
&lt;li&gt;多看代码，总结设计模式：同为最基本素养之一&lt;/li&gt;
&lt;li&gt;学习大数据组件：hadoop，spark，storm，kafka，zookeeper，flume，thrift，protobuf&lt;/li&gt;
&lt;li&gt;学习虚拟化组件：docker，k8s&lt;/li&gt;
&lt;li&gt;学会使用上述组件之后，进行源码学习，尝试在git中进行contribute，争取被accept&lt;/li&gt;
&lt;li&gt;leetcode要重新开始刷，每天至少一道到两道&lt;/li&gt;
&lt;li&gt;学有余力的话，学习新语言：mapreduce，storm topology，golang&lt;/li&gt;
&lt;li&gt;英语单词落下一段时间了，要重启百词斩和听力练习了&lt;/li&gt;
&lt;li&gt;关注下hk的实验室和团队，还有research方向&lt;/li&gt;
&lt;li&gt;坚持锻炼身体&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前只想到这么些。目前学习的方式要转变，万事先看官网，快速了解产品的背景、解决的问题、基本框架、基本使用方法，然后下载到本地安装，跑一些小demo。另外一些零碎时间也应该利用起来，背单词或者思考算法题都行。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PageRank在Spark的分布式实现</title>
      <link>https://utopizza.github.io/posts/algorithm/2019-05-19-%E7%AE%97%E6%B3%95-pagerank%E5%9C%A8spark%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2019-05-19-%E7%AE%97%E6%B3%95-pagerank%E5%9C%A8spark%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;最近在研究 MapReduce 和 Spark 的相关资料，顺便补个关于如何在虚拟机中搭建的 Spark 上分布式运行 PageRank 算法的博客。犹记得这个小任务是研一开学时，导师布置的第一个小任务，而现在马上就要硕士毕业答辩了，不禁思绪万千。&lt;/p&gt;
&lt;p&gt;一、PageRank 算法&lt;/p&gt;
&lt;p&gt;PageRank 算法是谷歌的起家算法，凭借该算法谷歌击败了当时所有的其他门户网站以及搜索引擎。该算法的目的是对数以亿计的网页进行排序，重要的网页将被排在前列，作为搜索结果返回给用户。想起了昆丁的电影《低俗小说》中的对白：“如果你要把一具尸体藏起来，你知道世界上哪里最安全吗？那就是谷歌搜索结果的第二页”。言外之意，谷歌搜索的前几条解决方案总能满足用户，用户永远不需要翻到第二页寻找答案。由此可见谷歌的搜索算法及 PageRank 网页排序算法之强大。&lt;/p&gt;
&lt;p&gt;PageRank 算法的详细介绍见 &lt;a href=&#34;https://en.wikipedia.org/wiki/PageRank&#34;&gt;维基百科&lt;/a&gt;。总而言之，该算法的主要思路是：如果一个网页被很多重要的网页指向，那么它也是一个重要的网页。具体地，互联网中的每个网页被抽象成一个节点；如果网页 A 包含网页 B 的链接，那么有一条有向边从节点 A 指向节点 B。如此，互联网中的网页及其链接被抽象成一个由节点及有向边组成的巨大拓扑图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2019-05-19-%E7%AE%97%E6%B3%95-PageRank%E5%9C%A8Spark%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0/graph.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;拓扑图建立好后，初始化系统，令每个节点的重要性分数均为1。然后开始迭代系统，在每一轮迭代中，对于每个节点，做如下两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果出边是加权的，将该节点的分数按权重比例进行拆解并传送到对应的节点；如果出边不加权，那么将该节点的分数平均拆解并传送&lt;/li&gt;
&lt;li&gt;搜集从其他节点传送过来的分数并求和，替换该节点原来的分数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该过程从数学上来说就是一个 &lt;a href=&#34;https://en.wikipedia.org/wiki/Markov_chain&#34;&gt;马尔可夫过程&lt;/a&gt;，可以从数学上证明其收敛性。也就是说，该系统经过若干次迭代，必定可以演化到一个平衡态。在这个状态下，每个节点的每一次分数收入约等于其分数支出。此时，每个节点上的分数就是稳定的分数，PageRank 算法按照该分数从大到小对网页进行排序并（分页地）返回给用户。&lt;/p&gt;
&lt;p&gt;二、PageRank 算法的 Spark 分布式实现&lt;/p&gt;
&lt;p&gt;输入数据是一个文件，如下所示。第一行只有一个数字，表明了该数据集一共有 114529 个网页节点。从第二行开始，每一行表示一个节点的出边以及对应的权重，以 [key-value] 形式表示 ：[指向的节点id:权重]。在使用该数据集时，需要把第一行的数字删去，刚好剩下一共 114529 行，每一行的行号表示其节点id。例如，删掉第一行后，第 2 行为空行，说明节点 2 出度为 0，不指向任何其他节点；第 3 行的数据表示节点 3 指向了节点 8107、节点 22950 和 节点 108053，边的权重分别为 3320、4 和 1。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2019-05-19-%E7%AE%97%E6%B3%95-PageRank%E5%9C%A8Spark%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0/data.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;要分布式实现 PageRank，就需要按 MapReduce 编程范式来编写代码。MapReduce 接受的输入是 key-value 对，在 Map 过程中映射成新的 key-value 对，在 Reduce 过程中对相同 key 的 values 进行聚合，输入最终结果。为方便起见，使用函数式编程语言 Scala 编写。伪码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;输入数据(每行) noteId:[outlinkId1:weight1, outlinkedId2:weight2, ...]
预处理(每行) noteId:[outlinkId1, outlinkedId2, ...]
统计出度 [noteId1:outlinkCount1, noteId2:outlinkCount2, ...]
for 0 -&amp;gt; 迭代次数：
    拆分分数 [noteId1:contribution=score1/outlinkCount1, ...]
    收集分数 [noteId1:sum(inlinkIds:contributions), ...]
    归一化
打印显示每个节点的最终分数
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体实验代码及效果如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2019-05-19-%E7%AE%97%E6%B3%95-PageRank%E5%9C%A8Spark%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2019-05-19-%E7%AE%97%E6%B3%95-PageRank%E5%9C%A8Spark%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2019-05-19-%E7%AE%97%E6%B3%95-PageRank%E5%9C%A8Spark%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按分数排序，并结合另一个数据集里面的 url 名称进行显示，得到结果如下所示。可以由域名看到排在前列的都是一些英国政府的权威网页（这个数据集是英国的网页数据集），因此该算法的排序效果是很好的。学术上更加具体的排序效果评价指标是 &lt;a href=&#34;https://en.wikipedia.org/wiki/Discounted_cumulative_gain&#34;&gt;nDCG&lt;/a&gt;，这里不再展开说明了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2019-05-19-%E7%AE%97%E6%B3%95-PageRank%E5%9C%A8Spark%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0/result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spark</title>
      <link>https://utopizza.github.io/posts/thesis/2019-05-09-%E8%AE%BA%E6%96%87-spark/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2019-05-09-%E8%AE%BA%E6%96%87-spark/</guid>
      <description>&lt;p&gt;一、背景及问题&lt;/p&gt;
&lt;p&gt;在谷歌提出了 MapReduce 编程模型之后，UC Berkeley 在此基础上提出了一个更加高效的模型，称为 Spark。其核心思想是将 MapReduce 的中间结果缓存到内存中，使得 Workers 可以快速读取数据而无需启动延迟极大的磁盘读取操作。这种编程模型针对一些迭代次数高、需要反复使用或者修改数据的计算任务尤其有效。根据论文的实验，Spark 在一些高迭代次数的算法实验中处理速度是 MapReduce 的 10 倍以上。&lt;/p&gt;
&lt;p&gt;然而因为没有了将中间结果写磁盘的操作来保证容灾和恢复，因此 Spark 设计了一套别的方案来达到该目的，那就是 RDD + Lineage。RDD(Resilient Distribute Datasets)称为弹性数据集，它是一种对被操作数据的抽象，而 Lineage 称为“血统”，顾名思义它记录了每一个 RDD 演变过程中的上下文信息。当故障出现时，可以根据丢失的 RDD 的 Lineage 来追寻它的祖先 RDD ，然后重新执行演化即可恢复出丢失的 RDD。&lt;/p&gt;
&lt;p&gt;二、Spark 编程模型&lt;/p&gt;
&lt;p&gt;使用 Spark 的用户通过编写一个称为 Driver Program 的程序来实现自己的计算任务。Spark 为用户的并行化编程提供了三个组件：resilient distribution dataset、 parallel operations、 parallel operations。&lt;/p&gt;
&lt;p&gt;(1) Resilient Distribution Datasets(RDDs)：一个 RDD 是一个可恢复的只读对象集合，它无须存储在磁盘中。每次对一个 RDD 的操作都会被记录下来，从而每个 RDD 可以沿着它的演化过程一直追寻它的祖先 RDD，甚至可以追寻到最开始的第一次从磁盘读取初始数据。因此这个机制保证了任何一个 RDD 都可以被恢复。具体在 Spark 系统中，RDD 由 Scala 对象来表达。论文中规定了 RDD 仅可以从四种方式构造：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从文件系统中构造，例如从 HDFS 中读取数据&lt;/li&gt;
&lt;li&gt;并行化处理 Scala 对象，例如将 Scala 的数组分片&lt;/li&gt;
&lt;li&gt;从另一个 RDD 转化&lt;/li&gt;
&lt;li&gt;改变一个 RDD 的持久化状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(2) Parallel Operations：Spark 支持的并行化操作，大体上类似于 MapReduce 的 Map 和 Reduce。有以下三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;li&gt;collect&lt;/li&gt;
&lt;li&gt;foreach&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(3) Shared Variables：Spark 支持的共享变量，在机器集群中可以传递并共享这些变量。有两类共享变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Broadcast variables：被定义为这种变量的数据会被复制到每一个 Worker，并且只复制一次。一般用于一些只读的并且需要被每个 Worker 使用的数据，例如 lookup table 等。&lt;/li&gt;
&lt;li&gt;Accumulators：一般用于进行计数求和的数据。没看太懂论文中这段的解释。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三、编程示例&lt;/p&gt;
&lt;p&gt;(1) Text Search：类似于 MapReduce 论文中给出的统计单词示例。这里是统计日志文件中出现 “ERROR” 的行数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;val file = spark.textFile(&amp;#34;hdfs://...&amp;#34;)
val errs = file.filter(_.contains(&amp;#34;ERROR&amp;#34;))
val ones = errs.map(_ =&amp;gt; 1)
val count = ones.reduce(_+_)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2) Logistic Regression：逻辑回归学习的 Spark 并行化版本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// Read points from a text file and cache them
val points = spark.textFile(&amp;#34;hdfs://...&amp;#34;).map(parsePoint).cache()

// Initialize w to random D-dimensional vector
var w = Vector.random(D)

// Run multiple iterations to update w
for (i &amp;lt;- 1 to ITERATIONS) {
    val grad = spark.accumulator(new Vector(D))
    for (p &amp;lt;- points) { // Runs in parallel
        val s = (1/(1+exp(-p.y*(w dot p.x)))-1)*p.y
        grad += s * p.x
    }
    w -= grad.value
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(3) Alternating Least Squares：ALS 算法的 Spark 并行版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;val Rb = spark.broadcast(R)
for (i &amp;lt;- 1 to ITERATIONS) {
    U = spark.parallelize(0 until u).map(j =&amp;gt; updateUser(j, Rb, M)).collect()
    M = spark.parallelize(0 until m).map(j =&amp;gt; updateUser(j, Rb, U)).collect()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;四、Spark 实现细节&lt;/p&gt;
&lt;p&gt;这一节论文也没有讲得很详细，具体细节可以考虑参考工具书&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/27035127/&#34;&gt;Spark: The Definitive Guide: Big Data Processing Made Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/22139960/&#34;&gt;Learning Spark: Lightning-Fast Big Data Analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MapReduce</title>
      <link>https://utopizza.github.io/posts/thesis/2019-05-08-%E8%AE%BA%E6%96%87-mapreduce/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2019-05-08-%E8%AE%BA%E6%96%87-mapreduce/</guid>
      <description>&lt;p&gt;一、背景及问题&lt;/p&gt;
&lt;p&gt;这两天总算把谷歌三大论文之一的 MapReduce 看了。这篇论文的影响力就不多说了，谷歌AI首席科学家 Jeffrey Dean 的代表作之一。该论文主要提出了一个称为 MapReduce 的编程模型，主要是为了解决谷歌公司自身需要处理海量数据的问题。众所周知，谷歌的主要业务是搜索引擎，每天需要处理爬取到的海量文件和网页，以及对这些数据进行索引计算、处理查询请求等等。显然单台机器难以完成这样巨大的计算任务，必须使用机器集群。但如果使用专业的服务器，集群的成本就太高了。为了降低成本，谷歌采用了普通的计算机来搭建这个集群。为了实现这个目的，必须设计一套可以自动并行化计算、自我管理调度、以及拥有良好容错性的集群计算方案，因此 Jeffrey Dean 提出了这套编程模型，只要按照这个编程模型来调用接口实现计算任务，这些计算就可以自动地在一个由普通机器搭建的分布式集群上被并行地执行。&lt;/p&gt;
&lt;p&gt;二、解决方案&lt;/p&gt;
&lt;p&gt;具体来说，MapReduce 这个编程模型可以简单地分为 Map 部分以及 Reduce 部分。&lt;/p&gt;
&lt;p&gt;Map 函数：由用户实现该接口，其功能是使算法输入的初始 key-value 对转化成用户定义的新 key-value 对。接下来系统会自动把它们按新 key 分组，即一个新 key 对应一组 values（key-values），并传递给 Reduce 函数。这一步类似 SQL 中的 Select GroupBy 操作。&lt;/p&gt;
&lt;p&gt;$$key_{1}/value_{1} \stackrel{Map}\implies key_{2}/value_{2} \stackrel{Group}\implies key_{2}/value_{2}(s)$$&lt;/p&gt;
&lt;p&gt;Reduce 函数：由用户实现该接口，其功能是使从 Map 函数接收过来的 key-values 组按用户定义的计算方式进行 Merge，然后输出每个 key 组的最终结果。这一步类似定义 SQL 中对被 GroupBy 的字段的聚合函数。&lt;/p&gt;
&lt;p&gt;$$key_{2}/value_{2}(s) \stackrel{Reduce}\implies key_{2}/value_{3} $$&lt;/p&gt;
&lt;p&gt;论文中给出了一个具体例子，从一个巨大的文档集中统计每个单词的出现次数。每个单词可以看作 key，它的出现次数就是最终想得到的 value。按照 MapReduce 编程范式，可以分为两步，在 Map 阶段输入文档集合，为每个文档拆解出每个单词，并为每个单词赋值它的 value 为 1，表示这个单词在此出现了一次；在 Reduce 阶段，把每个单词对应的分组进行 value 的求和，即可得到每个单词的总出现次数。&lt;/p&gt;
&lt;p&gt;Map 函数伪代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// key: document name
// value: document content
map(String key, String value):
    foreach word in value:
        EmitIntermediate(word,&amp;#34;1&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reduce 函数伪代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// key: a word
// values: a lists of counts
reduce(String key, Iterator values):
    int results=0;
    foreach value in values:
        result += ParseInt(value);
    Emit(AsString(result));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;论文中还提到另外一些使用了该编程模型的例子，例如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distributed Grep&lt;/li&gt;
&lt;li&gt;Count of URL Access Frequency&lt;/li&gt;
&lt;li&gt;Reverse Web-Link Graph&lt;/li&gt;
&lt;li&gt;Term-Vector per Host&lt;/li&gt;
&lt;li&gt;Inverted Index&lt;/li&gt;
&lt;li&gt;Distributed Sort&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;论文接下来就是介绍 MapReduce 系统的实现。总的来说，其架构采用 Master-Slaves 结构，Master 节点负责分配计算任务与分发数据以及监视 Workers 节点的状态。Workers 节点负责执行被分配给自己的任务，为了保证系统的容错性以及减少网络带宽消耗，Workers 的中间计算结果写入本地存储，并且尽可能由本地的 Worker 来读取。工作流程及其架构如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2019-05-08-%E8%AE%BA%E6%96%87-MapReduce/MapReduce.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其他一些具体特性如系统容错性、数据备份方案、工作任务粒度等等具体参见论文。&lt;/p&gt;
&lt;p&gt;三、总结&lt;/p&gt;
&lt;p&gt;论文主要针对并行处理海量数据的问题，提出了称为 MapReduce 的编程模型，只要用户将按照该范式实现 Map 和 Reduce 两个接口，该计算任务就可以自动地被一个由普通机器搭建而成的集群正确地分布式执行，而用户无需关心底层的具体执行情况。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>阶段总结(7)</title>
      <link>https://utopizza.github.io/posts/summary/2019-04-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%937/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/summary/2019-04-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%937/</guid>
      <description>&lt;p&gt;上一次写阶段总结是2018年10月，转眼过了半年多。自从10月份定了工作后，就转去忙论文、数学、以及英语。&lt;/p&gt;
&lt;p&gt;一、论文&lt;/p&gt;
&lt;p&gt;因为之前看过十来篇兴趣点推荐相关的顶会论文，考虑了下就还是继续做这个方向。从10月份开始，断断续续开始重新看了一遍之前看过的论文，以及做过的笔记和思路。因为之前专注于找工作，从4月份到9月份一直都是在看CS基础以及研发技术相关的书，学术工作放下了半年多，很多细节都忘记了。幸好之前认真做了笔记，复习起来不是太吃力。花了大约一星期的上午完成了复习，感觉还是没啥新灵感，继续用dblp去找了很多新的论文来看。印象中大概一直到快要放寒假的时候才想出了一个基本的雏形，用英文写了个小论文版本。寒假放了13天（2月1日到13日），在家基本都是休息，也没继续弄论文。回来后在公司陆续完成了论文的后半部分。思路基本是定下来了，给这边的老师看了下，确定思路没啥问题后，就差不多搬回学校了（3月3日）。&lt;/p&gt;
&lt;p&gt;搬回学校之后就开始做实验，幸亏舍友给力，提供了他们实验室的服务器，不然我这小破笔记本完全不可能做的出实验。实验基本代码很快就写出来了，大概三天左右，接下来就是无尽的噩梦般的炼丹（调参）了。不知道是代码写错还是啥原因，我发现很有的参数即使是很小的改变，竟然对实验结果的影响很大（大雾）。到了三月中下旬，实验结果调得差不多之后，就感觉开始写大论文（毕业论文）。因为你之前已经写好了英文版的小论文，所以大论文写起来比较轻松，一共只用了6天左右。其中花的时间比较多的是第一章绪论，扯了很多废话，找了一些中文的参考文献。后面的相关理论、自己提出的模型、实验设计等等几章直接从英文小论文翻译下扩充下，雏形就基本出来了。四月份基本都在学校修修补补论文以及继续调参，还有就是考虑优化实验里的SGD。四月底，定了稿，发给了导师，以及回公司找导师签字一些报告。&lt;/p&gt;
&lt;p&gt;总的来说，10月份主要复习以前看过的论文，11、12月看新论文，1月份开始构思自己的模型，以及写出一个基本的英语小论文雏形。2月份中旬寒假回来后继续完善英文小论文，2月底跟导师确认思路没有问题之后，3月初搬回学校。3月份开始做实验。3月中下旬用一周写出了大论文。4月份继续修补大论文以及实验调参。4月底定稿。&lt;/p&gt;
&lt;p&gt;二、数学&lt;/p&gt;
&lt;p&gt;因为比较闲，回头复习了一波微积分、线性代数、概率统计。其中，微积分主要通过复习本科时候学的《高等数学》，线性代数主要通过网上的教学视频以及研究生学的《矩阵论》，概率统计看的是中科大的《概率论与数理统计》。一般是晚上下班回去看书和吃饭的时候看视频，算是一个小复习。下面贴出资料链接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/2112359/&#34;&gt;《高等数学》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/2201479/&#34;&gt;《概率论与数理统计》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1230348/&#34;&gt;《矩阵论》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://open.163.com/special/opencourse/daishu.html&#34;&gt;MIT公开课：线性代数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://open.163.com/special/opencourse/weijifen.html&#34;&gt;MIT公开课：微积分重点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/av6731067&#34;&gt;3b1b：线性代数的本质&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/av24325548&#34;&gt;3b1b：微积分的本质&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，11月、12月、1月这三个月的数学复习主要以晚上回宿舍看书为主，最后整理了大概9篇 &lt;a href=&#34;https://yushengwxxx.github.io/categories/Math/&#34;&gt;博客&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;三、英语&lt;/p&gt;
&lt;p&gt;除了复习数学之外，也把英语提上了日程。除了平时看看美剧和google查资料之外，高考之后都几乎没碰过英语了。定了个考雅思的目标，因此开始找了一些资料，也问同学朋友找了些资料。从10月到12月三个月基本上都是在背四六级词汇，新东方的红书。因为习惯了这个系列的排版，索性就又买了这个系列的雅思词汇。背单词的同时也注意听力和写作。针对听力，主要就是直接听真题听力，把MP3下载到音乐播放软件，整天整夜没完没了地放。至于写作，买了本写作的书和一本笔记本，每天抄一篇范文，然后读几遍。从3月份搬回学校之后，因为每天去图书馆，就很少读英语范文了。该成用百词斩背单词。另外网上找到一个可以在线测试雅思水平的网站，虽然蛮多BUG。下面贴出资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/3702357/&#34;&gt;《新东方雅思词汇》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/11596223/&#34;&gt;《顾家北手把手教你雅思写作》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ieltsonlinetests.com/&#34;&gt;雅思在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://testyourvocab.com/&#34;&gt;词汇量测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，这几个月基本把四六级背得比较熟了，雅思那本过了两三遍，词汇量在上面的网上测是9000个左右，百词斩测是一万个左右。搬回学校前主要以背单词书、抄写范文为主。搬回学校后以刷百词斩复习、在网上做雅思题为主。因为回学校后做论文实验花了很多时间，分配给英语的时间不是很多，练的比较少，目前效果不太理想。现在论文定了稿，后面重新把英语提上日程。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MCI</title>
      <link>https://utopizza.github.io/posts/thesis/2019-01-27-%E8%AE%BA%E6%96%87-mci/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2019-01-27-%E8%AE%BA%E6%96%87-mci/</guid>
      <description>&lt;p&gt;该文章依然是针对 APT 攻击而提出的一种基于模型推断的攻击因果分析。该方法比以往方法的优势在于不需要在系统中做任何修改，只需要启动日志，对系统事件进行记录即可。该方法的核心技术是使用一种称为 LDX 的动态分析方案，可以在系统调用之间进行因果推断。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Oblix</title>
      <link>https://utopizza.github.io/posts/thesis/2019-01-19-%E8%AE%BA%E6%96%87-oblix/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2019-01-19-%E8%AE%BA%E6%96%87-oblix/</guid>
      <description>&lt;p&gt;一、背景及问题&lt;/p&gt;
&lt;p&gt;索引（Index）是很多系统和应用的基础构件。最近，大量的研究专注于如何保护索引这样的敏感数据，例如，如何在对索引进行加密的同时允许客户端在索引上进行查询。这些研究提出的方案一般是这样的：当用户通过客户端发起查询请求时，客户端会先为用户输入的关键词（keyword）生成查询令牌(search token)，然后将令牌发送给服务端而不是直接发送用户的关键词，从而向服务端屏蔽用户输入的关键词（假设攻击者控制了服务端的内存，但不能控制服务端的处理器）。然后，服务器通过令牌去在已经加密的索引上执行检索，最后把匹配成功的加密数据返回给客户端。客户端对数据进行解密，显示给用户。&lt;/p&gt;
&lt;p&gt;虽然加密索引的研究取得了重大进步，但是很多方案都有一个很严重的漏洞，就是泄漏了存取模式（access patterns）：关键词与数据的匹配过程。虽然关键词和索引都是已经加密的，但是它们的匹配过程是在服务端的内存进行的，而服务端的内存是被攻击者掌控的，因此攻击者可以对匹配的过程进行分析，从而从加密的索引中恢复敏感信息。除了存取模式的遗漏，还有如果攻击者可以获得匹配成功的文件数（result size），也可以恢复出敏感信息。&lt;/p&gt;
&lt;p&gt;一种很直接的隐藏存取模式的方法就是使用 ORAM（Oblivious RAM），然而这个方案的成本十分昂贵，因此很少方案采用这个方法。针对这个问题，文章提出了一个称为 Oblix (OBLivious IndeX) 的索引方案，这个方案既不会泄漏任何的存取模式，也不会泄漏匹配文件数。进一步，Oblix 允许索引进行插入和删除、支持多用户。&lt;/p&gt;
&lt;p&gt;二、解决方案&lt;/p&gt;
&lt;p&gt;文章提出的 Oblix 主要针对以下四种问题进行解决：&lt;/p&gt;
&lt;p&gt;1、高复杂度：对于 ORAM 系统，客户端维护一个位置映射数据结构（position map），该数据结构记录了索引与数据库中某个数据的位置的对应关系。由于索引的大小与数据库的数据量成线性关系，因此客户端不能直接存储整个 map。一种标准的方案是使用树形结构将一个数据库分解成多级数据库（类似于多级索引），以减小客户端需要的存储空间。但是如此一来就会需要重复多次查询来确定最终的位置，显然树搜索的时间复杂度是 O(logN)，这样的复杂度会带来查询延迟。文章使用的解决方案是使用飞地技术（enclave），把整个 ORAM 的客户端放进飞地中，这样让客户端和服务端就在同一台机器上进行，不需要通过网络，从而减小网络延迟。&lt;/p&gt;
&lt;p&gt;2、飞地可能会被攻击者利用：有研究发现飞地即使物理上隔离了外界的控制，但是也可能被攻击者通过分析它的物理页级的存取模式（page-level access pattern）来恢复被加密的数据。因为飞地自身的内存空间很小，当飞地处理的数据量较大时，它就会使用二级存储，使用计算机中的内存。而计算机中的内存是会被攻击者控制的，因此攻击者可以通过观察飞地如果使用计算机主存来进行攻击。文章的解决方案：首先，提出一个称为 ODS (oblivious data structure) 的数据结构来取代 position map，这个数据结构保证不可被攻击者利用。其次，提出一个称为 doubly oblivious 的方案，该方案同时保证对服务端的存取、对客户端自己的内存空间的存取模式都是不可被攻击者利用的（oblivious）。&lt;/p&gt;
&lt;p&gt;3、查询结果数的隐藏：前面提到，查询结果数可能也会被攻击者用，因此需要对其进行隐藏。一种最简单的做法是“worst-case upper bound”，但是这种做法代价太昂贵。文章提出的解决方案：对查询结果进行打分排序，只返回得分最高的前 r 条数据。&lt;/p&gt;
&lt;p&gt;4、请求列表、查询效率：客户端可以一次向服务端发送多个请求，也就请求列表。特别地，其中包含插入和删除得操作时，执行效率就尤其重要。文章解决方案：提出一个称为 DOSM
(doubly-oblivious sorted multimap) 的数据结构，支持高效的范围查询、插入、删除等操作。它实际上是一个树形的数据结构，插入和删除的复杂度是 O(logN) 而不是 O(n)。另外再结合特定的查询算法来保证范围查询的高效性。&lt;/p&gt;
&lt;p&gt;三、总结&lt;/p&gt;
&lt;p&gt;文章主要针对存取模式的漏洞来进行修复。攻击虽然无法直接攻击飞地，无法直接攻击加密数据，但是可以通过应用对主存的存取模式进行分析从而恢复加密数据。这种存取模式在文章中是指例如索引这样的负责映射数据的数据结构。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一维随机变量</title>
      <link>https://utopizza.github.io/posts/math/2019-01-16-%E6%A6%82%E7%8E%87-%E4%B8%80%E7%BB%B4%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/math/2019-01-16-%E6%A6%82%E7%8E%87-%E4%B8%80%E7%BB%B4%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</guid>
      <description>&lt;p&gt;一、随机变量&lt;/p&gt;
&lt;p&gt;随机变量就是“其值随机会而定”的变量。随机变量主要分为两类，一类是离散型随机变量，它有若干个不同的可枚举的取值，这些取值以不同（或相同）的概率出现，例如扔一个骰子可能会出现的点数。另一类是连续型随机变量，它的全部可能取值不仅是无穷多的，并且还不能无遗漏地逐一排列，而是充满一个区间，例如称量一个物体重量的误差。&lt;/p&gt;
&lt;p&gt;二、离散型随机变量&lt;/p&gt;
&lt;p&gt;1、离散型随机变量的概率分布：设 $X$ 为离散型随机变量，其全部可能取值 ${a_1,a_2,\cdots}$。则&lt;/p&gt;
&lt;p&gt;$$p_i=P(X=a_i) \quad (i=1,2,\cdots)$$&lt;/p&gt;
&lt;p&gt;称为 $X$ 的概率分布。根据概率的定义，显然有&lt;/p&gt;
&lt;p&gt;$$p_i \geq 0$$&lt;/p&gt;
&lt;p&gt;$$p_1+p_2+\cdots=1$$&lt;/p&gt;
&lt;p&gt;用分布表的形式给出为&lt;/p&gt;
&lt;p&gt;$$
\begin{array}{c|lcr}
\text{可能值} &amp;amp; a_1 &amp;amp; a_2 &amp;amp; \cdots &amp;amp; a_i \cdots \&lt;br&gt;
\hline
\text{概率} &amp;amp; p_1 &amp;amp; p_2 &amp;amp; \cdots &amp;amp;p_i \cdots
\end{array}
$$&lt;/p&gt;
&lt;p&gt;2、离散型随机变量的分布函数：设 $X$ 为一离散型随机变量，则函数&lt;/p&gt;
&lt;p&gt;$$F(x)=P(X \leq x)=\sum_{{i|a_i \leq x}}p_i \quad (-\infty &amp;lt; x &amp;lt; +\infty)$$&lt;/p&gt;
&lt;p&gt;称为 $X$ 的分布函数。实质上就是随机变量 $X$ 的部分可能取值的概率之和。分布函数有下面的一般性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 $x_1 &amp;lt; x_2$ 时，有 $F(x_1) \leq F(x_2)$&lt;/li&gt;
&lt;li&gt;当 $x \to +\infty$ 时，$F(x) \to 1$；当 $x \to -\infty$ 时，$F(x) \to 0$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、常见的离散型随机变量&lt;/p&gt;
&lt;p&gt;(1)、二项分布：设在某一个试验中，有且仅有两种可能结果：事件 $A$ 发生，或者 $A$ 不发生。其中 $A$ 发生的概率记为 $p$，则 $A$ 不发生的概率显然为 $1-p$。现把这个试验独立地重复 $n$ 次，记 $A$ 发生的次数为 $X$ ，则显然 $X$ 的可能取值为 $0,1,2,\cdots,n$。显然这是一个组合问题，$n$ 个试验结果中设有 $i$ 次为 $A$，那么必定 $n-i$ 次为 $\bar{A}$。因此 $X=i$ 的概率即为从 $n$ 个试验中取 $i$ 个 $p$，$n-i$ 个 $1-p$，即&lt;/p&gt;
&lt;p&gt;$$P(X=i)=C_{n}^{i} p^i (1-p)^{n-i} \quad (i=0,1,\cdots,n)$$&lt;/p&gt;
&lt;p&gt;此时 $X$ 所遵从的概率分布称为二项分布，记为 $B(n,p)$。而 $X$ 服从二项分布记为 $X \sim B(n,p)$&lt;/p&gt;
&lt;p&gt;(2)、泊松分布：若随机变量 $X$ 的可能取值为 $0,1,2,\cdots$，且概率分布为&lt;/p&gt;
&lt;p&gt;$$P(X=i)=\frac{e^{-\lambda}\lambda^i}{i!}$$&lt;/p&gt;
&lt;p&gt;则称 $X$ 服从泊松分布，记为 $X \sim P(\lambda)$。此处，$\lambda &amp;gt; 0$ 是某一常数。该分布是最重要的离散型分布之一，它多出现在当 $X$ 表示某时间或空间内出现的事件个数或者事件的频率分布。该分布可以看做是二项分布的极限形式，即若取 $\lambda$ 为二项分布 $B(n,p)$ 的期望，即 $\lambda=pn$，则当二项分布的试验次数 $n \to +\infty$ 时，&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
P(X=i) &amp;amp;=C_{n}^{i} (\frac{\lambda}{n})^i (1-\frac{\lambda}{n})^{n-i}\&lt;br&gt;
&amp;amp;=\frac{C_n^i}{n^i} \cdot \lambda^i \cdot (1-\frac{\lambda}{n})^n \&lt;br&gt;
&amp;amp;=\frac{1}{i!} \cdot \lambda^i \cdot e^{-\lambda} \&lt;br&gt;
&amp;amp;=\frac{e^{-\lambda}\lambda^i}{i!}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;在实际应用中， $\lambda$ 往往就取随机变量的期望，例如某用户在某段时间内重复购买某件商品的次数的期望，例如 2 次。确定了 $\lambda$ 后，该用户重复购买商品次数的泊松分布模型就可以完全确定，从而可以计算用户在同样的时间段内重复购买 0 次、1 次、3 次、5次等次数的概率。&lt;/p&gt;
&lt;p&gt;三、连续型随机变量&lt;/p&gt;
&lt;p&gt;1、连续型随机变量的概率分布：对于连续型随机变量的概率分布，不能用像离散型随机变量那种方法去描述，因为连续型变量的取值是充满一个区间的，无法一一枚举，并且要研究连续型变量恰好取某个精确的值意义也不大，例如“射击靶面恰好精准命中某一个点”是几乎不可能也毫无意义的事，一般认为这样概率为 0。对于连续型随机变量，我们研究的要点是“该变量的取值落在某个区间内的概率多大”，而不是“该变量的取值恰好等于某个无限精确的值的概率有多大”。&lt;/p&gt;
&lt;p&gt;2、连续型随机变量的分布函数：设 $X$ 为一连续型随机变量，则函数&lt;/p&gt;
&lt;p&gt;$$F(x)=P(X \leq x)=\int_{-\infty}^{x} f(t) dt$$&lt;/p&gt;
&lt;p&gt;称为 $X$ 的分布函数。其中 $f(x)=F’(x)$ 称为 $X$ 的概率密度函数。引用陈希孺教授《概率论与数理统计》中对“概率密度”的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“概率密度”这个名词的来由可以解释如下：取定一个点 $x$，则按分布函数的定义，事件 ${x &amp;lt; X \leq  x+\Delta x}$ 的概率应为 $F(x+\Delta x)-F(x)$，所以比值 $\frac{F(x+\Delta x)-F(x)}{\Delta x}$ 可解释为在 $x$ 点附近 $\Delta x$ 长度的区间内，单位长度占有的概率。当 $\Delta x \to 0$ 时，这个比值的极限就是 $F&amp;rsquo;(x)=f(x)$，也就是在 $x$ 点处无穷小区段内单位长度的概率，它反映了概率在 $x$ 点处的“密集程度”。可以设想一条极细的无穷长的金属杆，总质量为 1，概率密度相当于杆上各点的质量密度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连续型随机变量 $X$ 的概率密度函数 $f(x)$ 有以下基本性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$f(x) \geq 0$&lt;/li&gt;
&lt;li&gt;$\int_{-\infty}^{+\infty} f(x)dx=1$&lt;/li&gt;
&lt;li&gt;对任何常数 $a &amp;lt; b$，有 $P(a \leq X \leq b)=F(b)-F(a)=\int_{a}^{b}f(x)dx$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、常见的连续型随机变量：&lt;/p&gt;
&lt;p&gt;(1)、正态分布：若随机变量 $X$ 具有概率密度函数&lt;/p&gt;
&lt;p&gt;$$f(x)=\frac{1}{\sqrt{2\pi}\delta}e^{-\frac{(x-\mu)^2}{2\delta^2}} \quad (-\infty &amp;lt; x &amp;lt; +\infty)$$&lt;/p&gt;
&lt;p&gt;则称 $X$ 为正态随机变量，记为 $X \sim N(\mu, \delta)$。该密度函数没有显式的原函数，也即正态分布没有显式的分布函数。但是正态分布有一个重要的性质，就是任何正态分布可以转化成标准正态分布 $N(0,1)$，然后通过查标准正态分布概率表来计算原正态分布的概率。即&lt;/p&gt;
&lt;p&gt;$$\text{ 若 } X \sim N(\mu, \delta), \text{ 则 } Y=\frac{X-\mu}{\delta} \sim N(0,1)$$&lt;/p&gt;
&lt;p&gt;正态分布具有非常重要的意义，它的图形是关于 $x=\mu$ 对称，并在该点取得最大概率值，然后向两端逐渐降低。自然界大部分的数据都是呈现这样的分布：接近均值的概率大，接近极端值的概率小。例如一个学校的身高分布、随机采样得到的样本的误差分布等等。而更重要的是，根据中心极限定理，当随机变量的数量趋向无穷的时候，它们的和的极限分布就是正态分布。另外多维的高斯分布也是对各种真实世界中的事件进行建模的良好工具。&lt;/p&gt;
&lt;p&gt;(2)、指数分布：若随机变量 $X$ 具有概率密度函数&lt;/p&gt;
&lt;p&gt;$$f(x)=
\begin{cases}
\lambda e^{-\lambda x}, &amp;amp; x&amp;gt;0 \&lt;br&gt;
0, &amp;amp; x \leq 0
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;则称 $X$ 服从指数分布，其中 $\lambda&amp;gt;0$ 为参数。利用微积分知识易求得其分布函数为&lt;/p&gt;
&lt;p&gt;$$F(x)=\int_{-\infty}^{x}f(t)dt=
\begin{cases}
1-e^{-\lambda x}, &amp;amp; x &amp;gt; 0 \&lt;br&gt;
0, &amp;amp; x \leq 0
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;指数分布最常见的一个场合就是寿命分布，寿命越长概率越小。&lt;/p&gt;
&lt;p&gt;(3)、均匀分布：若随机变量 $X$ 具有概率密度函数&lt;/p&gt;
&lt;p&gt;$$f(x)=
\begin{cases}
\frac{1}{b-a}, &amp;amp; a\leq x\leq b \&lt;br&gt;
0, &amp;amp; \text{otherwise}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;则称 $X$ 服从区间 $[a,b]$ 上的均匀分布，记为 $X \sim R(a,b)$。这里 $a,b$ 都是常数且 $-\infty &amp;lt; a &amp;lt; b &amp;lt; +\infty$。易求其分布函数为&lt;/p&gt;
&lt;p&gt;$$F(x)=
\begin{cases}
0, &amp;amp; x \leq a \&lt;br&gt;
\frac{x-a}{b-a}, &amp;amp; a \leq x \leq b \&lt;br&gt;
1, &amp;amp; x \geq b
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;因为均匀分布的特点是区间中各点的概率密度都是相同的，因此一般用来产生均匀的随机数。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Winnower</title>
      <link>https://utopizza.github.io/posts/thesis/2019-01-12-%E8%AE%BA%E6%96%87-winnower/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2019-01-12-%E8%AE%BA%E6%96%87-winnower/</guid>
      <description>&lt;p&gt;一、背景及问题&lt;/p&gt;
&lt;p&gt;这篇文章针对的问题和前面看过的 《Dependence-Preserving Data Compaction for Scalable Forensic Analysis》和 这篇文章类似，目标都是减小日志文件的体积，以减少存储空间并提高攻击侦查的速度。&lt;/p&gt;
&lt;p&gt;这篇文章主要针对的是分布式服务器集群下的 APT 攻击。在这样的情景中，服务器集群有一个中心监控节点（Monitor node），以及大量的工作节点（Worker nodes）。监控节点与所有的工作节点保持通信。工作节点在生产环境中不断地产生日志记录。当发起监控节点攻击侦查分析时，它需要从多个工作节点上拷贝日志文件到本地，再进行攻击分析。问题就出现在这里，大量的工作节点每天都产生大量的日志记录，监控节点几乎不可能从所有工作节点上拷贝全部的日志记录，因为这样的拷贝任务不但需要消耗大量的网络资源，并且需要消耗大量的存储空间。&lt;/p&gt;
&lt;p&gt;二、解决方案&lt;/p&gt;
&lt;p&gt;这篇文章和上述的那篇文章有点类似，其核心思想都是通过对资源图（Provenance Graph）进行剪枝、压缩、优化，从而减小对应的日志记录体积。不同的只是他们使用的剪枝算法不同而已，这篇文章使用的算法是一个称为 Deterministic Finite Automata (DFA) 的算法，这个算法可以对一个复杂的图中的每一个节点、边（对应系统日志记录中的事件以及信息流向）进行推断，判断出它是不是冗余的，如果是冗余的就可以去掉，从而极大提精简了日志记录。&lt;/p&gt;
&lt;p&gt;文章提出的模型称为 Winnower，具体剪枝算法较复杂，主要分为图抽象（Provenance Graph Abstraction）和图推断（Provenance Graph Induction）两部分，其中涉及一些图语义学习（Graph Grammar Learning）的知识，以前没怎么接触过，感觉不太懂，以后有时间再补一下这方面的学习。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>线性变换的矩阵</title>
      <link>https://utopizza.github.io/posts/math/2019-01-12-%E6%95%B0%E5%AD%A6-%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E7%9A%84%E7%9F%A9%E9%98%B5/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/math/2019-01-12-%E6%95%B0%E5%AD%A6-%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E7%9A%84%E7%9F%A9%E9%98%B5/</guid>
      <description>&lt;p&gt;我们知道，线性空间中，在给定基的情况下，对任意一个向量 $\vec{v}$ 施予一个线性变换 $T$ 时，就让该向量的坐标向量左乘某个矩阵 $A$ 即可。例如，设在线性空间 $V_n(F)$ 中，取一组基为 ${\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}}$，向量 $\vec{w}$ 在该基下的坐标为 $\vec{Y}$，向量 $\vec{v}$ 在该基下的坐标为 $\vec{X}$，即：&lt;/p&gt;
&lt;p&gt;$$\vec{w}=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) \vec{Y}$$&lt;/p&gt;
&lt;p&gt;$$\vec{v}=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) \vec{X}$$&lt;/p&gt;
&lt;p&gt;如果向量 $\vec{w}$ 是由向量 $\vec{v}$ 经过线性变换 $T$ 得到的，即&lt;/p&gt;
&lt;p&gt;$$\vec{w}=T(\vec{v})$$&lt;/p&gt;
&lt;p&gt;那么它们的坐标关系为：&lt;/p&gt;
&lt;p&gt;$$\vec{Y}=A \vec{X}$$&lt;/p&gt;
&lt;p&gt;并且，线性空间中任一个线性变换 $T$ 可以由某个矩阵 $A$ 唯一对应：&lt;/p&gt;
&lt;p&gt;$$T \iff A$$&lt;/p&gt;
&lt;p&gt;为什么？这个矩阵 $A$ 如何得到？接下来复习一下 $A$ 的推导。需要的预备知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性空间定义&lt;/li&gt;
&lt;li&gt;线性空间的基与坐标&lt;/li&gt;
&lt;li&gt;线性变换定义&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;记 $T$ 为线性空间 $V_n(F)$ 上的线性变换。记 ${\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}}$ 为 $V_n(F)$ 的一组基，则对任意向量 $\forall \pmb\beta \in V_n(F)$，由基的定义可得&lt;/p&gt;
&lt;p&gt;$$\vec{v}=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) \vec{X}=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) \begin{pmatrix} x_1 \ x_2 \ \vdots \ x_n \end{pmatrix} =x_1\vec{\alpha_1}+x_2\vec{\alpha_2}+\cdots+x_n\vec{\alpha_n}$$&lt;/p&gt;
&lt;p&gt;对 $\vec{v}$ 施予线性变换 $T$：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
T(\vec{v})
&amp;amp;=T(x_1\vec{\alpha_1}+x_2\vec{\alpha_2}+\cdots+x_n\vec{\alpha_n}) \&lt;br&gt;
&amp;amp;=T(x_1\vec{\alpha_1})+T(x_2\vec{\alpha_2})+\cdots+T(x_n\vec{\alpha_n}) \&lt;br&gt;
&amp;amp;=x_1T(\vec{\alpha_1})+x_2T(\vec{\alpha_2})+\cdots+x_nT(\vec{\alpha_n}) \&lt;br&gt;
&amp;amp;=(T(\vec{\alpha_1}),T(\vec{\alpha_2}),\cdots,T(\vec{\alpha_n})) \begin{pmatrix} x_1 \ x_2 \ \vdots \ x_n \end{pmatrix}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;到这里可以清楚看到，对向量 $\vec{v}$ 施予线性变换 $T$，可以转化为对基 ${ \vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n} }$ 施予线性变换，并且在基变换后，向量 $\vec{v}$ 的坐标保持不变！因此，对空间中任意向量的线性变换，就转化到了该空间下一组基到另一组“基”的线性变换（注意，由于实际上线性变换只能保持线性相关，不能保持线性无关，因此无法保证对基进行线性变换后的向量组 ${ T(\vec{\alpha_1}),T(\vec{\alpha_2}),\cdots,T(\vec{\alpha_n}) }$ 是否仍能作为一组基。准确来讲，$T(\vec{\alpha_{i}})$ 只能是原基的“像”。但为了便于陈述和理解，暂且称这组“像”为“新基”）。&lt;/p&gt;
&lt;p&gt;那么接下来的问题是，对基 ${ \vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n} }$ 施予线性变换 $T$ 后，“新基” ${ T(\vec{\alpha_1}),T(\vec{\alpha_2}),\cdots,T(\vec{\alpha_n}) }$ 与原基的关系是怎么样的？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我们知道，对一个向量施予线性变换后仍是一个向量，因此“新基”中的每个元素也仍是一个向量。既然是向量，就一定可以用基和坐标来表示。那么我们就尝试用原基来表示“新基”中的每一个向量吧（因为我们希望知道“新基”与原基的关系），假设向量 $T(\vec{\alpha_1}),T(\vec{\alpha_2}),\cdots,T(\vec{\alpha_n})$ 在原基 $(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n})$ 下的表达分别为：&lt;/p&gt;
&lt;p&gt;$$T(\vec{\alpha_1})=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) \begin{pmatrix} x_{11} \ x_{21} \ \vdots \ x_{n1} \end{pmatrix}$$&lt;/p&gt;
&lt;p&gt;$$T(\vec{\alpha_2})=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) \begin{pmatrix} x_{12} \ x_{22} \ \vdots \ x_{n2} \end{pmatrix}$$&lt;/p&gt;
&lt;p&gt;$$\cdots$$&lt;/p&gt;
&lt;p&gt;$$T(\vec{\alpha_n})=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) \begin{pmatrix} x_{1n} \ x_{2n} \ \vdots \ x_{nn} \end{pmatrix}$$&lt;/p&gt;
&lt;p&gt;把以上式子写到一起：&lt;/p&gt;
&lt;p&gt;$$(T(\vec{\alpha_1}),T(\vec{\alpha_2}),\cdots,T(\vec{\alpha_n}))=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n})
\begin{pmatrix}
x_{11} &amp;amp; x_{12} &amp;amp; \cdots &amp;amp; x_{1n} \&lt;br&gt;
x_{21} &amp;amp; x_{22} &amp;amp; \cdots&amp;amp; x_{2n} \&lt;br&gt;
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \&lt;br&gt;
x_{n1} &amp;amp; x_{n2} &amp;amp; \cdots &amp;amp; x_{nn} \&lt;br&gt;
\end{pmatrix}
$$&lt;/p&gt;
&lt;p&gt;为简便表达，用 $A$ 来表达矩阵 $[x_{ij}]$，因此&lt;/p&gt;
&lt;p&gt;$$(T(\vec{\alpha_1}),T(\vec{\alpha_2}),\cdots,T(\vec{\alpha_n}))=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) A$$&lt;/p&gt;
&lt;p&gt;这就是线性变换后 “新基” ${ T(\vec{\alpha_1}),T(\vec{\alpha_2}),\cdots,T(\vec{\alpha_n}) }$ 与原基 ${ \vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n} }$ 的关系表达式。我们称矩阵 $A$ 为变换矩阵。&lt;/p&gt;
&lt;p&gt;从上述过程可以知道，变换矩阵 $A$ 的第 $i$ 列就是原基中第 $i$ 个向量 $\vec{\alpha_i}$ 的像 $T(\vec{\alpha_i})$ 在原基下的坐标表示，坐标的唯一性决定了 $A$ 的唯一性。也就是说，只要选定了一组基，线性变换 $T$ 对这组基的作用（“新基”的坐标），在这组基下是唯一的。因此，在选定了一组基的情况下，线性变换 $T$ 与矩阵 $A$ 是一一对应的，即：&lt;/p&gt;
&lt;p&gt;$$T \iff A $$&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;回到本文开头：&lt;/p&gt;
&lt;p&gt;$$\vec{w}=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) \vec{Y}$$&lt;/p&gt;
&lt;p&gt;$$\vec{v}=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) \vec{X}$$&lt;/p&gt;
&lt;p&gt;如果向量 $\vec{w}$ 是由向量 $\vec{v}$ 经过线性变换 $T$ 得到的，即有&lt;/p&gt;
&lt;p&gt;$$\vec{w}=T(\vec{v})=(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n}) A \vec{X}$$&lt;/p&gt;
&lt;p&gt;通过对比，显然有：&lt;/p&gt;
&lt;p&gt;$$\vec{Y}=A \vec{X}$$&lt;/p&gt;
&lt;p&gt;特别地，当基 $(\vec{\alpha_1},\vec{\alpha_2},\cdots,\vec{\alpha_n})$ 为 $R^n$ 中的自然基，即 $\vec{\alpha_1}= \begin{pmatrix} 1 \ 0 \ \vdots \ 0 \end{pmatrix}$，$\vec{\alpha_2}= \begin{pmatrix} 0 \ 1 \ \vdots \ 0 \end{pmatrix}$，$\cdots$，$\vec{\alpha_n}=\begin{pmatrix} 0 \ 0 \ \vdots \ 1 \end{pmatrix}$ 时，有&lt;/p&gt;
&lt;p&gt;$$\vec{w}=\vec{Y}$$&lt;/p&gt;
&lt;p&gt;$$\vec{v}=\vec{X}$$&lt;/p&gt;
&lt;p&gt;此时有&lt;/p&gt;
&lt;p&gt;$$\vec{w}=T(\vec{v})=A \vec{v}$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>泰勒展开式</title>
      <link>https://utopizza.github.io/posts/math/2019-01-11-%E6%95%B0%E5%AD%A6-%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80%E5%BC%8F/</link>
      <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/math/2019-01-11-%E6%95%B0%E5%AD%A6-%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80%E5%BC%8F/</guid>
      <description>&lt;p&gt;泰勒公式是怎么被推导出来的，以及为什么可以用多项式来逼近任意函数？&lt;/p&gt;
&lt;p&gt;根据微积分的“以直代曲”的思想，对一个连续可导的函数 $f(x)$，当因变量 $x$ 在某点 $x_0$ 附近的改变值为 $\Delta x$ 时，过该点的切线上对应的纵坐标增量为 $dy=f&amp;rsquo;(x_0) \cdot \Delta x$。虽然 $f(x)$ 实际上的纵坐标增量是 $\Delta y=f(x_0+\Delta x)-f(x_0)$，但是如果 $\Delta x$ 非常小，那么可以近似认为切线的纵坐标增量等于 $f(x)$ 的纵坐标增量。即：&lt;/p&gt;
&lt;p&gt;$$\Delta y=f(x_0+\Delta x)-f(x_0) \approx f&amp;rsquo;(x_0) \cdot \Delta x$$&lt;/p&gt;
&lt;p&gt;那么对于 $x_0$ 附近的任意一点 $x$，有 $\Delta x=x-x_0$，代入上式得：&lt;/p&gt;
&lt;p&gt;$$f(x)-f(x_0) \approx f&amp;rsquo;(x_0) \cdot (x-x_0)$$&lt;/p&gt;
&lt;p&gt;将 $f(x_0)$ 移到右边，凑出关于 $x$ 的函数表达形式：&lt;/p&gt;
&lt;p&gt;$$f(x) \approx f(x_0)+f&amp;rsquo;(x_0) \cdot (x-x_0)$$&lt;/p&gt;
&lt;p&gt;观察这个式子，显然它就是利用已知的一个点 $(x_0,f(x_0))$ 及在该点处的一阶导数 $f&amp;rsquo;(x_0)$ 来近似表达了在 $x_0$ 附近的原函数 $f(x)$，而且它是一个线性的函数，非常便于我们计算和处理，特别是在原函数 $f(x)$ 是一个非常复杂的函数的情况下。&lt;/p&gt;
&lt;p&gt;到了这里，严谨的数学家肯定不满足于如此，因为这只是一个非常粗略的近似。那么如何进一步逼近原函数 $f(x)$？甚至什么时候可以取等号？这就是泰勒以及众多数学家的贡献了。&lt;/p&gt;
&lt;p&gt;既然一阶导数和一次多项式可以用来近似代替函数 $f(x)$，而现在希望能进一步提高近似的精度，那么一个非常自然、直接的想法就是使用更高阶的导数以及更高阶的多项式。因为多项式函数无论是连续求导、变形、还是数值计算，都要比其他一些函数例如三角函数、指数函数、对数函数、幂函数等容易得多，所以自然选择多项式来作为基本构件。这其实在生活中是很常见的思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当遇到一个复杂的、无法直接使用的东西时，我们自然想办法用其他一些简单的、方便使用的东西去近似模拟它，得到和它基本相近的功能&lt;/li&gt;
&lt;li&gt;当我们要去近似模拟时，要直接一步到位是很难的，一般是先模拟一个大体的近似，然后在这个基础上，一步步去完善细节，一步步提高精度&lt;/li&gt;
&lt;li&gt;如第一点所说，我们肯定是使用简单的零部件去构建整体，并且越简单越好，因为越简单则越容易理解和改造、控制。其实大自然亦如此，复杂如人的神经系统、大脑组织，也是由一个个十分简单、有效的神经细胞组建而成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相信上面的陈述应该可以说服你，像数学家那样使用高阶导数和高阶多项式来进行近似代替某个复杂但连续并且可导的函数 $f(x)$。我们知道，最简单的多项式函数表达形式如下：&lt;/p&gt;
&lt;p&gt;$$g(x)=a_0+a_1x+a_2x^2+\cdots+a_nx^n$$&lt;/p&gt;
&lt;p&gt;回顾一阶近似的时候，近似的函数形式是&lt;/p&gt;
&lt;p&gt;$$f(x) \approx f(x_0)+f&amp;rsquo;(x_0) \cdot (x-x_0)$$&lt;/p&gt;
&lt;p&gt;结合两者，我们依样画葫芦地写出：&lt;/p&gt;
&lt;p&gt;$$f(x)=a_0+a_1(x-x_0)+a_2(x-x_0)^2+ \cdots + a_n(x-x_0)^n$$&lt;/p&gt;
&lt;p&gt;至此泰勒展开已经完成了一半了，只剩各项的系数需要确定。对比一阶近似，一次项的系数是 $f&amp;rsquo;(x_0)$，这暗示着各项的系数与函数 $f(x)$ 在 $x_0$ 处的导数存在某种关系，启发我们往这个方向去假设和推测。以下是推导过程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;对 $f(x)$ 求 $1$ 至 $n$ 阶导：&lt;/p&gt;
&lt;p&gt;$$f&amp;rsquo;(x)=a_1+2a_2(x-x_0)+3a_3(x-x_0)^2+\cdots+na_n(x-x_0)^{n-1}$$&lt;/p&gt;
&lt;p&gt;$$f&amp;rsquo;&#39;(x)=2a_2+6a_3(x-x_0)+\cdots+n(n-1)a_n(x-x_0)^{n-2}$$&lt;/p&gt;
&lt;p&gt;$$f&amp;rsquo;&#39;&#39;(x)=6a_3+\cdots+n(n-1)(n-2)a_n(x-x_0)^{n-3}$$&lt;/p&gt;
&lt;p&gt;$$\cdots$$&lt;/p&gt;
&lt;p&gt;$$f^{(n)}(x)=n(n-1)(n-2)\cdots \cdot 2 \cdot 1 \cdot a_n$$&lt;/p&gt;
&lt;p&gt;令 $x=x_0$ 代入以上式子，得&lt;/p&gt;
&lt;p&gt;$$f&amp;rsquo;(x_0)=1 \cdot a_1 = 1! \cdot a_1$$&lt;/p&gt;
&lt;p&gt;$$f&amp;rsquo;&#39;(x_0)=2 \cdot 1 \cdot a_2=2! \cdot a_2$$&lt;/p&gt;
&lt;p&gt;$$f&amp;rsquo;&#39;&#39;(x_0)=3 \cdot 2 \cdot 1 \cdot a_3=3! \cdot a_3$$&lt;/p&gt;
&lt;p&gt;$$\cdots$$&lt;/p&gt;
&lt;p&gt;$$f^{(n)}(x_0)= n \cdot (n-1) \cdots \cdot 2 \cdot 1 \cdot a_n=n! \cdot a_n$$&lt;/p&gt;
&lt;p&gt;因此即得&lt;/p&gt;
&lt;p&gt;$$a_i=\frac{f^{(i)}(x_0)}{i!},i \in [1,n]$$&lt;/p&gt;
&lt;p&gt;因此泰勒展开式为&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
f(x) &amp;amp;=f(x_0)+f&amp;rsquo;(x_0)(x-x_0)+\frac{f&amp;rsquo;&#39;(x_0)}{2!}(x-x_0)+\cdots+\frac{f^{(n)}(x_0)}{n!}(x-x_0) \&lt;br&gt;
&amp;amp; =f(x_0)+\sum_{i=1}^{n}\frac{f^{(i)}(x_0)}{i!}(x-x_0)^i \&lt;br&gt;
&amp;amp; = \sum_{i=0}^{n}\frac{f^{(i)}(x_0)}{i!}(x-x_0)^i
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;其实严格来说以上都不正确，因此近似始终不是等于，无论 $n$ 有多大，式子右边始终不是 $f(x)$，上述式子应该取约等号。如果要取等号，那么需要把每一项近似的误差也补完整，完整的泰勒展开为&lt;/p&gt;
&lt;p&gt;$$f(x)=\sum_{i=0}^{n}\frac{f^{(i)}(x_0)}{i!}(x-x_0)^i+R_n(x)$$&lt;/p&gt;
&lt;p&gt;其中 $R_n(x)$ 则为近似的总误差。一共有两位数学家先后尝试推导这个误差项 $R_n(x)$，分别为佩亚诺和拉格朗日。其中佩亚诺给出的结果称为佩亚诺余项：&lt;/p&gt;
&lt;p&gt;$$R_n(x)=o((x-x_0)^n)$$&lt;/p&gt;
&lt;p&gt;佩亚诺余项只是定性地说明误差项是 $(x-x_0)^n$ 高阶的无穷小，并不能具体估算误差大小，因此后来拉格朗日进一步给出了具体形式的余项，称为拉格朗日余项：&lt;/p&gt;
&lt;p&gt;$$R_n(x)=\frac{f^{n+1}(\xi)}{(n+1)!}(x-x_0)^{n+1}$$&lt;/p&gt;
&lt;p&gt;其中 $\xi$ 是 $x$ 与 $x_0$ 之间的某个值。要推导这个余项需要用到柯西中值定理，具体推导过程不再详述，可参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《高等数学》同济版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/25627482/answer/32060408&#34;&gt;怎样更好地理解并记忆泰勒展开式？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/21149770?rf=22001335&#34;&gt;如何通俗地解释泰勒公式？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/34539650/answer/69556280&#34;&gt;泰勒公式最初是如何想到的?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>事件与概率</title>
      <link>https://utopizza.github.io/posts/math/2019-01-09-%E6%A6%82%E7%8E%87-%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/math/2019-01-09-%E6%A6%82%E7%8E%87-%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/</guid>
      <description>&lt;p&gt;一、概率&lt;/p&gt;
&lt;p&gt;1、概率的公理化定义（柯氏理论体系）：事件有概率，其大小随事件而异。也即，概率是事件的函数：事件 $A$ 的概率记为 $P(A)$。&lt;/p&gt;
&lt;p&gt;2、古典概率：设一个试验有 $N$ 个等可能的结果，而事件 $E$ 恰包含其中的 $M$ 个结果，则事件 $E$ 的概率，记为 $P(E)$，定义为&lt;/p&gt;
&lt;p&gt;$$P(E)=\frac{M}{N}$$&lt;/p&gt;
&lt;p&gt;3、古典概率计算归结为计算两个数 $M$ 和 $N$。这种计算大多涉及排列组合。排列组合公式：
(1) $n$ 个相异物件取 $r(1\leq r \leq n)$ 个的不同排列总数为&lt;/p&gt;
&lt;p&gt;$$A_{n}^{r}=n(n-1)(n-2) \cdots (n-r+1)=\frac{n!}{(n-r)!}$$&lt;/p&gt;
&lt;p&gt;(2) $n$ 个相异物件取 $r(1\leq r \leq n)$ 个的不同组合总数为&lt;/p&gt;
&lt;p&gt;$$C_{n}^{r}=\frac{A_{n}^{r}}{r!}=\frac{n!}{r!(n-r)!}$$&lt;/p&gt;
&lt;p&gt;(3) 组合系数 $C_{n}^{r}$ 又常称为二项式系数，因为它出现在二项式展开的公式中：&lt;/p&gt;
&lt;p&gt;$$(a+b)^n=\sum_{i=0}^{n}C_{n}^{i}a^{i}b^{n-i}$$&lt;/p&gt;
&lt;p&gt;(4) $n$ 个相异物分成 $k$ 堆，各堆物件数分别为 $r_1,\cdots,r_k$，分法种数为：&lt;/p&gt;
&lt;p&gt;$$\frac{n!}{r_1! \cdots r_k!}$$&lt;/p&gt;
&lt;p&gt;二、事件的运算、条件概率与独立性&lt;/p&gt;
&lt;p&gt;1、事件的蕴含、包含以及相等：在同一试验下的两个事件 $A$ 和 $B$，如果：
(1) 当 $A$ 发生时 $B$ 必发生，则称 $A$ 蕴含 $B$，或者 $B$ 包含 A，记为 $A \subset B$
(2) 若 $A$、$B$ 相互蕴含，即 $A \subset B$ 且 $B \subset A$，则称 $A$、$B$ 两事件相等，记为 $A=B$&lt;/p&gt;
&lt;p&gt;2、事件的互斥和对立
(1) 若两事件 $A$、$B$ 不能在同一次试验中都发生（但可以都不发生），则称它们是互斥的
(2) 若 $A$、$B$ 互斥，并且当其中一个不发生时，另一个必定发生，那么称它们是对立的。记 $A$ 的对立事件为 $\bar A$&lt;/p&gt;
&lt;p&gt;3、事件的和：设有两个事件 $A$、$B$，定义一个新事件 $C$ 为 $C$={ $A$ 发生或 $B$ 发生}={ $A$、$B$ 至少发生一个}，则称事件 $C$ 为 事件 $A$、$B$ 的和，记为 $C=A+B$&lt;/p&gt;
&lt;p&gt;4、事件的积：设有两个事件 $A$、$B$，定义一个新事件 $C$ 为 $C$={ $A$、$B$ 都发生}，则称事件 $C$ 为 事件 $A$、$B$ 的积，记为 $C=AB$&lt;/p&gt;
&lt;p&gt;5、事件的差：设有两个事件 $A$、$B$，定义一个新事件 $C$ 为 $C$={ $A$ 发生、$B$ 不发生}，则称事件 $C$ 为 事件 $A$、$B$ 的差，记为 $C=A-B$&lt;/p&gt;
&lt;p&gt;6、条件概率：设有两个事件 $A$、$B$，其中 $P(B) \neq 0$。则 “在给定 $B$ 发生的条件下 $A$ 的条件概率”，记为 $P(A \mid B)$，定义为 $P(A \mid B)=\frac{P(AB)}{P(B)}$&lt;/p&gt;
&lt;p&gt;7、事件的独立性：设有两个事件 $A$、$B$，若 $P(A)=P(A \mid B)$，则说明 $B$ 的发生与否对 $A$ 发生的可能性毫无影响。这时在概率上称 $A$、$B$ 独立。此时根据条件概率公式可推得 $P(AB)=P(A)P(B)$&lt;/p&gt;
&lt;p&gt;三、概率定理&lt;/p&gt;
&lt;p&gt;1、$0 \leq P(A) \leq 1$。其中当 $$ 等于 $0$ 时 $A$ 是不可能事件，等于 $1$ 时是必然事件&lt;/p&gt;
&lt;p&gt;2、加法定理：若干个互斥事件之和的概率，等于各事件的概率之和：&lt;/p&gt;
&lt;p&gt;$$P(A_1+A_2+\cdots)=P(A_1)+P(A_2)+\cdots$$&lt;/p&gt;
&lt;p&gt;3、乘法定理：若干个独立事件之积的概率，等于各事件概率的乘积：&lt;/p&gt;
&lt;p&gt;$$P(A_1 \cdots A_n)=P(A_1) \cdots P(A_n)$$&lt;/p&gt;
&lt;p&gt;四、全概率公式与贝叶斯公式&lt;/p&gt;
&lt;p&gt;1、全概率公式：设 $B_1,B_2,\cdots$ 为有限或无限个事件，它们两两互斥且在每次试验中至少发生一个。即&lt;/p&gt;
&lt;p&gt;$$B_{i}B_{j} (i \neq j) = \emptyset \text{(不可能事件)}$$&lt;/p&gt;
&lt;p&gt;$$B_1+B_2+\cdots=\Omega \text{(必然事件)}$$&lt;/p&gt;
&lt;p&gt;有时，把具有这些性质的一组事件称为一个“完备事件群”。现考虑任一事件 $A$，因为 $\Omega$ 为必然事件，有 $A=A\Omega=AB_1+AB_2+\cdots$。因 $B_1$、$B_2$、$\cdots$ 两两互斥，所以 $AB_1$、$AB_2$、$\cdots$ 也两两互斥。故依加法定理有&lt;/p&gt;
&lt;p&gt;$$P(A)=P(AB_1)+P(AB_2)+\cdots$$&lt;/p&gt;
&lt;p&gt;再由条件概率的定义，有 $P(AB_i)=P(A \mid B_i)P(B_i)$，代入上式得&lt;/p&gt;
&lt;p&gt;$$\begin{align}
P(A) &amp;amp;=P(A \mid B_1)P(B_1)+P(A \mid B_2)P(B_2)+\cdots \&lt;br&gt;
&amp;amp;=\sum_{i} P(A \mid B_i)P(B_i)
\end{align}$$&lt;/p&gt;
&lt;p&gt;可理解为事件 $A$ 的概率是从各个 $B_i$ 中 “收集” 回来的。也可以理解为 $B_i$ 是导致 $A$ 发生的一种可能 “途径”，或者 称为“原因”。&lt;/p&gt;
&lt;p&gt;2、贝叶斯公式：在全概率公式的基础上，可以推导出：&lt;/p&gt;
&lt;p&gt;$$P(B_i \mid A)=\frac{P(AB_i)}{P(A)}=\frac{P(A\mid B_i)P(B_i)}{\sum_{j} P(B_j)P(A\mid B_j)}$$&lt;/p&gt;
&lt;p&gt;其实就是对分子使用条件概率公式，对分母使用全概率公式。但是它所包含的哲理意义却不普通，引用陈希儒教授的《概率论与数理统计》一书中的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们把事件 $A$ 看做“结果”，把诸事件 $B_1$、$B_2$、$\cdots$  看做导致这个结果的“原因”，则可以形象地把全概率公式看作“由原因推导结果”；而贝叶斯公式则恰好相反，其作用在于“由结果推原因”：现在有一个“结果” $A$ 已经发生了，在众多可能的“原因”中，到底是哪一个导致了这个“结果”？&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>PriorTracker</title>
      <link>https://utopizza.github.io/posts/thesis/2019-01-05-%E8%AE%BA%E6%96%87-priortracker/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2019-01-05-%E8%AE%BA%E6%96%87-priortracker/</guid>
      <description>&lt;p&gt;一、背景及问题&lt;/p&gt;
&lt;p&gt;APT（Advanced Persistent Threat）攻击是一种长期、多步骤的攻击，它往往会涉及多个系统事件和文件。因此一旦发现系统收到这种攻击时，必须执行攻击因果分析（Attack Causality Analysis ），即从一个受到攻击的事件或者文件作为入口，向前追踪其攻击源头，并且向后分析所有被攻击牵涉中的其他文件或数据。&lt;/p&gt;
&lt;p&gt;一般来说，攻击因果分析是基于系统资源的依赖图进行的。依赖图记录了系统中各种事件的先后次序和信息流，因此依赖图往往十分巨大，特别对于拥有大量机器的大型企业来说。以往的研究都是关注于如何对这个巨大的依赖图进行剪枝，以减少需要分析的数据量。但是这些研究都没有考虑执行分析时的时间限制，只对所有数据一视同仁地依次执行分析。文章提出，时效性对与攻击因果分析来说是非常重要的，因为在发现受到攻击后，越快地分析出攻击源以及受到污染的数据，就能越快地采取隔离措施或者修复措施，减少企业损失。据统计，90% 的 APT  攻击都是在数分钟内完成的。因此目前的问题就是，如何在保证攻击不会被遗漏和 CPU 运算能力一定的前提下，如何尽可能快地执行攻击因果分析？&lt;/p&gt;
&lt;p&gt;二、解决方案&lt;/p&gt;
&lt;p&gt;文章提出一个称为 PriorTracker 的模型， 其基本思路是，以往的研究没有办法加速攻击因果分析的的原因是，他们没有办法区分出异常的系统事件和正常的系统事件，因此他们只能对依赖图中的所有路径一视同仁地去执行分析，包括一些复杂但实际上与攻击无关的正常的系统调用事件，这就导致了分析的时候花费了大量的时间和算力在无关的数据上。如果我们能够有办法区分出异常的系统事件和正常的系统事件，那么就可以优先对异常事件进行分析，最快地命中攻击。&lt;/p&gt;
&lt;p&gt;那么如果甄别出系统中的异常事件？文章提出的一个方案是，用算法对每个系统事件（System Event）计算一个优先权（Priority Score），优先权高的事件先执行分析。优先权的计算由如下公式给出&lt;/p&gt;
&lt;p&gt;$$PriorityScore(e)=\alpha \cdot RarenessScore(e) + \beta \cdot FanoutScore(e)$$&lt;/p&gt;
&lt;p&gt;其中 $e$ 表示资源依赖图中的一个系统事件；$RarenessScore$ 表示事件的稀有得分，因为异常事件必定是正常系统的过往历史中很少出现的事件；$FanoutScore$ 表示扇出得分，如果一个事件的扇出（也即在资源依赖图中的一个节点的出度）越多，那么执行这个事件的分析所花费的时间越多。另外从统计经验知道，一般来说一些正常的系统事件例如更新进程数据等等的扇出度是非常巨大的，但是这类数据对攻击分析是没什么贡献的，只会浪费 CPU 时间。因此一个自然的想法是优先计算扇出较小的事件节点，别免浪费时间。当然这也会导致分析覆盖面的减小，但是这样的 tradeoff 总的来说是需要的。而 $\alpha$ 和 $\beta$ 是两者的平滑系数，文章中使用机器学习方法来训练这两个参数。两者的计算公式如下：&lt;/p&gt;
&lt;p&gt;$$RarenessScore(e)=
\begin{cases}
1, &amp;amp;  \text{if e has not been observed by reference model} \&lt;br&gt;
\frac{1}{ref(e)}, &amp;amp; \text{otherwise}
\end{cases}$$&lt;/p&gt;
&lt;p&gt;$$FanoutScore(e)=
\begin{cases}
0,&amp;amp; \text{if e reaches a read-only file in backtracking} \&lt;br&gt;
\delta,&amp;amp; \text{if e reaches a write-only file in forward tracking} \&lt;br&gt;
\frac{1}{fanout(e)}, &amp;amp; \text{otherwise}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;其中 $ref(e)$ 由文章定义的一个称为 $Reference Model$ 的模型给出，其主要思想是统计一个系统事件在一个时间段（一周或者一个月，这个可以根据企业的生产情况自行调节）内的出现总次数。而 $fanout(e)$ 文章没有给出计算公式，估计就是节点出度？&lt;/p&gt;
&lt;p&gt;现在有了每个事件的优先权后，就可以加速因果分析了。具体做法很简单，就是维护一个优先队列，类似于广度优先遍历，先把以捕获到的一个确认被攻击的结点放入队列作为分析起点，然后不断从队列中取出队头节点，分析它的前驱节点或者后继节点，以及这些节点的优先权，然后加入优先队列中去。如此循环，直至到达限定的时间或者依赖图的所有节点都被分析完。&lt;/p&gt;
&lt;p&gt;三、总结&lt;/p&gt;
&lt;p&gt;文章提出了一种利用优先权的方法来优先分析计算可疑的系统事件，加速攻击因果分析，使得能在最短时间内命中受到攻击的系统事件和数据。其中，虽然优先权的计算是比较启发式的、经验导向的公式，但是它们的平滑系数是通过机器学习来确定。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PII</title>
      <link>https://utopizza.github.io/posts/thesis/2018-12-29-%E8%AE%BA%E6%96%87-pii/</link>
      <pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2018-12-29-%E8%AE%BA%E6%96%87-pii/</guid>
      <description>&lt;p&gt;一、背景及问题&lt;/p&gt;
&lt;p&gt;最近一些广告平台（Data Broker）例如 Facebook、Google 等推出了新的广告投放策略：广告投放商（Advertiser）可以在平台中上传目标用户的个人身份信息（Personally Identifying Information，PII）如用户的姓名、邮箱地址、电话号码、住址、生日等，以在该平台中直接定位目标用户并针对性地投放广告。与传统的数据经销商直接把数据访问权限卖给给广告投放商的方式不同，这些数据平台只允许广告投放商上传目标用户的 PII，然后平台在内部匹配这些用户，返回一个匹配成功并进行舍入（Rounding）后的广告投放目标用户（Audience）总数给广告投放商。&lt;/p&gt;
&lt;p&gt;然而这样的策略会威胁到用户的隐私安全。虽然广告投放商不能直接访问用户的数据，但是依然可以利用这个策略的漏洞来推测用户的其他隐私信息，例如恶意的广告投放商可以利用它们手中的一些用户邮箱地址，通过平台以及某些手段来推出这些用户的姓名、电话号码、住址等等其他隐私信息。&lt;/p&gt;
&lt;p&gt;这个策略的漏洞就是上述平台返回的匹配成功的用户总数。虽然 Facebook 等平台对该数进行了舍入（Rounding），返回的用户总数是模糊的，但是只要攻击者通过不断提交差别很小的请求，依然可以把取整策略的阈值测试出来，然后就可以反推出在阈值边界上的目标用户（Threshold audiences）的信息。例如当攻击者在第二次提交请求时，只比第一次请求多添加一个用户，而返回的成功匹配用户数从原来的 80 变成了 90，那么很显然这个用户就是在阈值边界上并且符合攻击者的匹配目标的用户。整篇文章所提的攻击都是通过此漏洞来进行的，论文原话：“We use threshold audiences throughout the paper to enable our attacks”&lt;/p&gt;
&lt;p&gt;二、解决方案&lt;/p&gt;
&lt;p&gt;具体地说，文章介绍的的攻击手段主要有以下三种：&lt;/p&gt;
&lt;p&gt;1、逆匿名网页浏览用户（De-anonymizing web visitors）：广告投放商可以在一些外部网页上安装一个 Facebook 的 JavaScript 插件，Facebook 可以通过该插件追踪浏览过此网页的用户，然后将这些用户记录下来，作为广告目标用户集合（注意，这些用户对广告投放商来说是透明的，只有 Facebook 知道这些用户）。现在，攻击者（恶意的广告投放商）可以利用上述的漏洞来反推出某个用户 $V$ 是否访问了这个网页。攻击方法是：
(1) 先确定 $V$ 是否是 Facebook 平台中的用户：提交一系列不含攻击目标 $V$ 的请求 ${ L_1,L_2,\cdots,L_n }$，每次请求只比上一次请求多一个用户，Facebook 返回的匹配用户总数分别为 ${A_1,A_2,\cdots,A_n }$。先测试出一个舍入阈值下界，例如，假设 $A_1$、$A_2$ 是 810，而 $A_3$ 是 820，那么 $A_2=810$ 是一个舍入下界。然后我们再在 $L_2$ 这个集合中加入攻击目标 $V$ 即 ${L_2 \bigcup V }$ 并提交给 Facebook，如果返回的是 810，那么 $V$ 不是 Facebook 平台中的用户，如果返回的是 820，那么说明 $V$ 是 Facebook 中的一个用户。
(2) 接下来，确定 $V$ 是否在 Facebook 追踪的网页浏览者名单中：同样地，提交一系列包含 $V$ 的请求，每个请求只比前一个请求多一个用户，然后测试出舍入上界，例如 ${L_1 \bigcup V}$、${L_2 \bigcup V}$ 是 930，而 ${L_3 \bigcup V}$ 是 940，那么 $A_3 = 940$ 就是攻击者要找的上界。此时，再提交不含 $V$ 的 ${L_4}$，看返回的结果是否下降到 930，如果下降了，说明 $V$ 就在浏览者名单中，即可以确定攻击目标 $V$ 浏览过了攻击者的网页。&lt;/p&gt;
&lt;p&gt;2、推断用户的身份信息（Inferring a victim’s PII）：Facebook 对多次提交的请求集合，只会返回它们命中的用户的并集的总数，即不会对同一个用户多次计数。利用这一点，以及上述的舍入规则，攻击者只要拥有某个用户 $V$ 的其中某一项 PII 例如电子邮箱地址（或者其他任意一项），就可以推断出该用户的其他 PII 如电话号码。假设攻击者现在有某个 PII 集合 $L$，上传到 Facebook 后生成一个广告目标用户集合 $A$（注意，这个集合是维护在 Facebook平台内部的，对攻击者透明的），得到返回的一个舍入处理后的用户总数。假设攻击者现在要攻击的某个用户是 $V$（攻击者已知 $V$ 的邮箱地址），攻击方法是：
(1) 先确定攻击目标 $V$ 是否在 $A$ 中：最简单的办法就是再上传一个只包含 $V$ 的集合，然后向 Facebook 查询这个集合与 $A$ 的交集，如果返回的交集结果不为 0，那么就可以直接确定 $V$ 在 $A$ 中了。然而 Facebook 不允许这样做，它要求查询交集的集合必须大于 1000，并且对交集结果的 $5%$ 进行舍入。因此攻击者需要稍微复杂一些的操作。取两个额外集合 ，分别为含 1949 条记录的集合 $R$、含 50 条记录的集合 $J$，要求是 $R、J、L$ 三个集合两两不相交。现在取 $C_1=R \bigcup L$，$C_2=R \bigcup J \bigcup V$，提交这个两个并集，然后向 Facebook 查询交集大小。显然，如果 $V$ 在 $A$ 中，那么结果将是 $|R|$（1949 舍入后是 1900）；否则结果是 $|R|+1$（1950 舍入后是 2000）。
(2) 推断用户的电话号码：将整个电话号码的空间划分成若干个子集，例如，如果电话号码有 11 位，那么将得到 11×10 个子集，第一个子集表示电话号码第一位是 0 的所有电话号码，第二个子集表示电话号码第一位是 1 的子集，由于每一位有 0 ~ 9 共 10 种数字，因此一共 11×10 个子集。每个子集由于只固定一位数字，其余 10 位的每一位都有 10 种可能，因此每个子集的大小是 10^10。只要对这 11×10 个大小为 10^10 的电话号码集合，不断利用步骤 (1) 的方法，判断 $V$ 是否在该电话号码集合 $L$ 生成的 $A$ 中，就可以逐位推断出 $V$ 的 11 位电话号码&lt;/p&gt;
&lt;p&gt;3、逆匿名全体用户（De-anonymizing users en masse）：意思和前面两点差不多，通过结合前两种攻击方法，可以获取所有访问过攻击者页面的用户的 PII，如电话号码等。限于篇幅不展开了。&lt;/p&gt;
&lt;p&gt;针对以上三种攻击，文章提出了一些修补漏洞的技术方案，并提交给了 Facebook，得到了 Facebook 的采纳。由于修复方案比较多而且较多数学理论，就不展开了。由于文章提出的解决方案过于复杂，最后 Facebook 也只是采取了最简单暴力的修复方式——直接取消返回任何统计数字给广告投放商，关闭交集查询功能&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;三、总结&lt;/p&gt;
&lt;p&gt;文章针对 Facebook 的提供给广告投放商的应用接口，发现了基于这些接口实现的用户隐私攻击，并给出了详细复杂的解决方案。最后得到了 Facebook 的采纳。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SVIM</title>
      <link>https://utopizza.github.io/posts/thesis/2018-12-22-%E8%AE%BA%E6%96%87-svim/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2018-12-22-%E8%AE%BA%E6%96%87-svim/</guid>
      <description>&lt;p&gt;差分隐私（Differential Privacy）模型是微软研究院的 Cynthia Dwork 等人于 2006 年提出的一个严谨的数学模型，目标在于提出用以修改隐私数据的技术，使得修改后的数据可以安全发布(以供第三方进行研究)，而不会遭受去匿名化等隐私攻击。同时，修改后的数据要在保护隐私的前提下最大限度地保留原数据的整体信息，否则被发布的数据将毫无研究价值。&lt;/p&gt;
&lt;p&gt;该论文主要提出了一个称为 Set-Value Item Mining (SVIM) 的协议，用于在隐私保护约束条件下提高本地差分隐私数据的精确度。由于差分隐私主要是纯理论的模型，没有具体的实现和应用，限于篇幅此文不展开论述。此处主要了解差分隐私的一些背景即可。&lt;/p&gt;
&lt;p&gt;相关资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000012080126&#34;&gt;差分隐私学习总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/47492648&#34;&gt;苹果的 Differential Privacy 差分隐私技术是什么原理？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/keyven/blog/730740&#34;&gt;大数据下的信息安全-差分隐私保护技术&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>定积分</title>
      <link>https://utopizza.github.io/posts/math/2018-12-18-%E6%95%B0%E5%AD%A6-%E5%AE%9A%E7%A7%AF%E5%88%86/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/math/2018-12-18-%E6%95%B0%E5%AD%A6-%E5%AE%9A%E7%A7%AF%E5%88%86/</guid>
      <description>&lt;p&gt;一、定积分的概念与性质&lt;/p&gt;
&lt;p&gt;1、定义：设函数 $f(x)$ 在 $[a,b]$ 上有界，在 $[a,b]$ 中任意插入若干分点 $a=x_0 &amp;lt; x_1 &amp;lt; x_2 &amp;lt; \cdots &amp;lt; x_{n-1} &amp;lt; x_n=b$，把区间 $[a,b]$ 分成 $n$ 个小区 $[x_0, x_1]$，$[x_1,x_2]$，$\cdots$，$[x_{n-1},x_n]$，各个小区间的长度依次为 $\Delta x_1=x_1-x_0$, $\Delta x_2=x_2-x_1$, $\cdots$, $\Delta x_n=x_n-x_{n-1}$。在每个小区间 $[x_{i-1},x_i]$ 上任取一点 $\xi_i (x_{i-1} \leq \xi \leq x_i)$，作函数值 $f(\xi)$ 与小区间长度 $\Delta x_i$ 的乘积 $f(\xi_i) \cdot \Delta x_i$，并作和&lt;/p&gt;
&lt;p&gt;$$S=\sum_{i=1}^{n}f(\xi)\Delta x_i$$&lt;/p&gt;
&lt;p&gt;记 $\lambda=\max { \Delta x_1, \Delta x_2, \cdots, \Delta x_n }$，如果当 $\lambda \to 0$ 时，$S$ 的极限总存在，且与闭区间 $[a,b]$ 的分法及点 $\xi_i$ 的取法无关，那么称这个极限 $I$ 为函数  $f(x)$ 在区间 $[a,b]$ 上的定积分，记作 $\int_{a}^{b} f(x) dx$，即&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b} f(x) dx=I=\lim_{\lambda \to 0} \sum_{i=1}^{n} f(\xi_i) \Delta x_i$$&lt;/p&gt;
&lt;p&gt;其中 $f(x)$ 叫做被积函数，$f(x)dx$ 叫做被积表达式，$x$ 叫做积分变量，$a$ 叫做积分下限，$b$ 叫做积分上限，$[a,b]$ 叫做积分区间&lt;/p&gt;
&lt;p&gt;2、定理：设 $f(x)$ 在区间 $[a,b]$ 上连续，则 $f(x)$ 在 $[a,b]$ 上可积&lt;/p&gt;
&lt;p&gt;3、定理：设 $f(x)$ 在区间 $[a,b]$ 上有界，且只有有限个间断点，则 $f(x)$ 在 $[a,b]$ 上可积&lt;/p&gt;
&lt;p&gt;4、性质&lt;/p&gt;
&lt;p&gt;(1) 设 $\alpha$ 与 $\beta$ 均为常数，则&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b}[\alpha f(x) + \beta g(x)]dx=\alpha \int_{a}^{b} f(x)dx+ \beta \int_{a}^{b} g(x) dx$$&lt;/p&gt;
&lt;p&gt;(2) 设 $a &amp;lt; c &amp;lt; b$，则&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b} f(x) dx=\int_{a}^{c}f(x)dx+\int_{c}^{b}f(x)dx$$&lt;/p&gt;
&lt;p&gt;(3) 如果在区间 $[a,b]$ 上 $f(x) \equiv 1$，那么&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b} 1 dx=\int_{a}^{b}dx=b-a$$&lt;/p&gt;
&lt;p&gt;(4) 如果在区间 $[a,b]$ 上 $f(x) \geq 0$，那么&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b} f(x) dx \geq 0$$&lt;/p&gt;
&lt;p&gt;(5) 设 $M$ 及 $m$ 分别是函数 $f(x)$ 在区间 $[a,b]$ 上的最大值及最小值，则&lt;/p&gt;
&lt;p&gt;$$m(b-a) \leq \int_{a}^{b} f(x) dx \leq M(b-a)$$&lt;/p&gt;
&lt;p&gt;(6) 定积分中值定理：如果函数 f(x) 在积分区间 $[a,b]$ 上连续，那么在 $[a,b]$ 上至少存在一个点 $\xi$，使用下式成立：&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b} f(x)dx=f(\xi)(b-a)$$&lt;/p&gt;
&lt;p&gt;二、微积分基本公式&lt;/p&gt;
&lt;p&gt;1、定理：如果函数 $f(x)$ 在区间 $[a,b]$ 上连续，那么积分上限的函数&lt;/p&gt;
&lt;p&gt;$$\Phi(x)=\int_{a}^{x}f(t)dt$$&lt;/p&gt;
&lt;p&gt;在 $[a,b]$ 上可导，并且它的导数&lt;/p&gt;
&lt;p&gt;$$\Phi&amp;rsquo;(x)=\frac{d}{dx} \int_{a}^{b} f(t)dt=f(x)$$&lt;/p&gt;
&lt;p&gt;2、定理：如果函数 $f(x)$ 在区间 $[a,b]$ 上连续，那么函数&lt;/p&gt;
&lt;p&gt;$$\Phi(x)=\int_{a}^{x} f(t)dt$$&lt;/p&gt;
&lt;p&gt;就是 $f(x)$ 在 $[a,b]$ 上的一个原函数&lt;/p&gt;
&lt;p&gt;3、定理（牛顿莱布尼茨公式、微积分基本定理）：如果函数 $F(x)$ 是连续函数 $f(x)$ 在区间 $[a,b]$ 上的一个原函数，那么&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b} f(x) dx=F(b)-F(a)=[F(x)]_{a}^{b}$$&lt;/p&gt;
&lt;p&gt;这个公式表明：一个连续函数在区间 $[a,b]$ 上的定积分等于它的任一个原函数在区间 $[a,b]$ 上的增量&lt;/p&gt;
&lt;p&gt;三、定积分的换元法和分部积分法&lt;/p&gt;
&lt;p&gt;1、定理（换元公式）：假设函数 $f(x)$ 在区间 $[a,b]$ 上连续，函数 $x=\varphi(t)$ 满足条件：
(1) $\varphi(\alpha)=a, \varphi(\beta)=b$
(2) $\varphi(t)$ 在 $[\alpha,\beta]$（ 或 $[\beta,\alpha]$ ） 上具有连续导数，且其值域 $R_{\varphi}=[a,b]$，则有&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b}f(x)dx=\int_{\alpha}^{beta}f[\varphi(t)] \cdot \varphi &amp;lsquo;(t) dt$$&lt;/p&gt;
&lt;p&gt;应用换元公式时有两点值得注意：(1) 用 $x=\varphi(x)$ 把原来变量 $x$ 代换成新变量 $t$ 时，积分限也要换成相应于新变量 $t$ 的积分限；(2) 求出 $f[\varphi(t)] \cdot \varphi&amp;rsquo;(t)$ 的一个原函数 $\Phi(t)$ 后，不必像计算不定积分那样再要把 $\Phi(t)$ 变换成原来变量 $x$ 的函数，而只要把新变量 $t$ 的上、下限分别代入 $\Phi(t)$ 中然后相减即可&lt;/p&gt;
&lt;p&gt;换元公式也可以反过来使用。为使用方便起见，把换元公式中左右两边对调位置，同时把 $t$ 改记为 $x$，而 $x$ 改记为 $t$， 得&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b}f[\varphi(x)] \cdot \varphi&amp;rsquo;(x) dx=\int_{\alpha}^{\beta} f(t) dt$$&lt;/p&gt;
&lt;p&gt;其中 $t=\varphi(x)$，$\alpha=\varphi(a)$，$\beta=\varphi(b)$&lt;/p&gt;
&lt;p&gt;2、分部积分：&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b} uv&amp;rsquo;dx=[uv]_{a}^{b}-\int_{a}^{b}vu&amp;rsquo;dx$$&lt;/p&gt;
&lt;p&gt;简记为&lt;/p&gt;
&lt;p&gt;$$\int_{a}^{b} udv=[uv]_{a}^{b}-\int_{a}^{b}vdu$$&lt;/p&gt;
&lt;p&gt;四、反常积分&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EnclaveDB</title>
      <link>https://utopizza.github.io/posts/thesis/2018-12-15-%E8%AE%BA%E6%96%87-enclavedb/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2018-12-15-%E8%AE%BA%E6%96%87-enclavedb/</guid>
      <description>&lt;p&gt;一、背景及问题&lt;/p&gt;
&lt;p&gt;目前一些云端的数据处理服务经常受到可能来自数据库管理员、服务器管理员、利用操作系统漏洞的黑客等的攻击。虽然一般意义上的数据加密可以为静态数据和数据传输提供强力高效的保护，但是却无法为数据处理系统提供足够的保护，因为数据处理系统在处理查询的时会在内存解密敏感数据。而内存是容易被攻击者入侵并掌控的区域，因此这会导致数据的不安全。&lt;/p&gt;
&lt;p&gt;一种实现安全查询（secure query）的方法是，一些系统如 CryptDB，Monomi 以及 Seabed 等通过使用 property-preserving encryption 技术来进行在已加密数据上的安全查询。然而这种方法只能处理十分有限的查询请求，并且有信息泄漏的风险。&lt;/p&gt;
&lt;p&gt;另一种实现安全查询的方法是在受信任的执行环境（trusted execution environment）或者内飞地（enclaves） 中执行查询。系统的内飞地如 Intel Software Guard Extensions (SGX) 可以保护敏感数据和代码，即使攻击者控制了整个操作系统或者主机。虽然如此，使用内飞地存在几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为了实现安全保护，需要仔细地对应用程序进行重构，分解出可信任部分和不可信任部分&lt;/li&gt;
&lt;li&gt;为了实现高层次的安全特性如机密性（confidentiality）、完整性（integrity）、时新性（freshness），需要增加额外的逻辑和机制来确保机密信息在进入和离开内飞地的时候不会被泄漏&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些问题对于一些简单的应用程序来说并不困难，但是对于一些大型复杂系统如数据库系统来说则非常不容易。先前的一些研究例如 CipherBase、TrustedDB 等采取的方式是将查询引擎（query engine）的一小部分放置于受信任的硬件之上，这种方式的问题是无法提供上述的机密性、完整性、时新性。另一种选择是将整个数据库放置于内飞地之中，但这显然会导致大量的 trusted computing base (TCB) 以及服务性能的下降，并且无法阻止来自数据库管理员的攻击。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;【根据维基百科，飞地指在某个地理区划境内有一块隶属于他地的区域。根据地区与国家之间的相对关系，飞地又可以分为“外飞地”（Exclave）与“内飞地”（Enclave）两种概念，其关系如下：
内飞地（enclave）：意指某个国家境内有块土地，其主权属于另外一个国家，则该地区称为此国家的内飞地。
外飞地（exclave）：某国家拥有一块与本国分离开来的领土，该领土被其他国家包围，则该领土称为某国的外飞地。】
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;二、解决方案&lt;/p&gt;
&lt;p&gt;文章提出了一个称为 EnclaveDB 的数据库，它可以为查询和数据提供机密性、完整性、时新性。它与传统关系型数据库一样提供了数据处理、SQL查询、存储过程等基本功能。与传统数据库不同的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;EnclaveDB 通过把所有敏感数据（tables, indexes, queries and other intermediate state）维护在内飞地的内存中来保护数据库状态&lt;/li&gt;
&lt;li&gt;EnclaveDB 使用可信任的 EnclaveDB 客户端来预编译查询代码，并进行加密&lt;/li&gt;
&lt;li&gt;预编译代码后，受信任的 EnclaveDB 客户端与不受信任的服务器上的内飞地直接建立一个安全的加密通道，然后将已加密的查询和参数发送过去&lt;/li&gt;
&lt;li&gt;不受信任的服务器上的内飞地收到查询请求后，对请求进行验证、解密、执行查询、对查询结果进行加密、返回给客户端&lt;/li&gt;
&lt;li&gt;EnclaveDB 重新设计了数据库的日志与恢复机制，以确保服务器无法对数据库的日志进行攻击&lt;/li&gt;
&lt;li&gt;EnclaveDB 采取了一些优化手段，减少线程上下文切换，减少服务器开销&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2018-12-15-%E8%AE%BA%E6%96%87-EnclaveDB/EnclaveDB.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;三、总结&lt;/p&gt;
&lt;p&gt;文章提出了一个通过使用内飞地来实现不信任服务器上的安全数据库。通过可信任客户端的预编译、加密安全通道的通信、内飞地的隔离保护、重新设计数据库的日志与恢复机制等一系列措施，实现了机密性、完整性、时新性这三个重要的安全特性。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>不定积分</title>
      <link>https://utopizza.github.io/posts/math/2018-12-14-%E6%95%B0%E5%AD%A6-%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/</link>
      <pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/math/2018-12-14-%E6%95%B0%E5%AD%A6-%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/</guid>
      <description>&lt;p&gt;一、不定积分的概念与性质&lt;/p&gt;
&lt;p&gt;1、定义：如果在区间 $I$ 上，可导函数 $F(x)$ 的导函数为 $f(x)$，即对任一 $x \in I$，都有 $F&amp;rsquo;(x)=f(x)$ 或 $dF(x)=f(x)dx$，那么函数 $F(x)$ 就称为 $f(x)$（或 $f(x)dx$）在区间 $I$ 上的一个原函数&lt;/p&gt;
&lt;p&gt;2、定理：如果函数 $f(x)$ 在区间 $I$ 上连续，那么在区间 $I$ 上存在可导函数 $F(x)$，使得对任一 $x \in I$ 都有 $F&amp;rsquo;(x)=f(x)$，也就是说连续函数一定有原函数&lt;/p&gt;
&lt;p&gt;3、定义：在区间 $I$ 上，函数 $f(x)$ 的带有任意常数项的原函数称为 $f(x)$ （或 $f(x)dx$）在区间 $I$ 上的不定积分，记作 $\int f(x)dx$。其中记号 $\int$ 称为积分号，$f(x)$ 称为被积函数，$f(x)dx$ 称为被积表达式，$x$ 称为积分变量&lt;/p&gt;
&lt;p&gt;4、由于 $\int f(x)dx$ 是 $f(x)$ 的原函数，所以 $\frac{d}{dx}[\int f(x)dx]=f(x)$ 或 $d[\int f(x)dx]=f(x)dx$；又由于 $F(x)$ 是 $F&amp;rsquo;(x)$  的原函数，所以 $\int F&amp;rsquo;(x) dx=F(x)+C$ 或 $\int dF(x)=F(x)+C$。由此可见，微分运算（以记号 $d$ 表示）与积分运算（以记号 $\int$ 表示）是互逆的。当此两个记号连在一起时，或者抵消，或者抵消后差一个常数。&lt;/p&gt;
&lt;p&gt;$$\int F&amp;rsquo;(x) dx = \int dF(x)$$&lt;/p&gt;
&lt;p&gt;5、既然积分运算是微分运算的逆运算，那么很自然地可以从导数公式得到相应的积分公式。基本积分表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\int k dx=kx+C$ ($k$ 是常数)&lt;/li&gt;
&lt;li&gt;$\int x^\mu dx=\frac{x^{\mu+1}}{\mu+1}+C$ ($\mu \neq -1$)&lt;/li&gt;
&lt;li&gt;$\int \frac{1}{x} dx=\ln|x|+C$&lt;/li&gt;
&lt;li&gt;$\int \frac{1}{1+x^2} dx=\arctan x +C$&lt;/li&gt;
&lt;li&gt;$\int \frac{1}{\sqrt{1-x^2}} dx=\arcsin x+C$&lt;/li&gt;
&lt;li&gt;$\int \cos x dx=\sin x+C$&lt;/li&gt;
&lt;li&gt;$\int \sin x dx=- \cos x +C$&lt;/li&gt;
&lt;li&gt;$\int \frac{1}{\cos^{2} x} dx=\int \sec^2 x dx=\tan x+C$&lt;/li&gt;
&lt;li&gt;$\int \frac{1}{\sin^{2} x} dx=\int \csc^2 x dx=- \cot x+C$&lt;/li&gt;
&lt;li&gt;$\int \sec x \tan x dx=\sec x+C$&lt;/li&gt;
&lt;li&gt;$\int \csc x \cot x dx=- \csc x+C$&lt;/li&gt;
&lt;li&gt;$\int e^x dx=e^x+C$&lt;/li&gt;
&lt;li&gt;$\int a^x dx=\frac{a^x}{\ln a}+C$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6、性质1：设函数 $f(x)$ 及 $g(x)$ 的原函数存在，则&lt;/p&gt;
&lt;p&gt;$$\int [f(x)+g(x)]dx=\int f(x)dx + \int g(x)dx$$&lt;/p&gt;
&lt;p&gt;7、性质2：设函数 $f(x)$ 的原函数存在，$k$ 为非零常数，则&lt;/p&gt;
&lt;p&gt;$$\int k \cdot f(x)dx = k \cdot \int f(x)dx$$&lt;/p&gt;
&lt;p&gt;二、换元积分法&lt;/p&gt;
&lt;p&gt;1、定理1：设 $f(x)$ 具有原函数，$u=\varphi(x)$ 可导，则有换元公式&lt;/p&gt;
&lt;p&gt;$$\int f[\varphi(x)] \cdot \varphi&amp;rsquo;(x) dx=[\int f(u) du]_{u=\varphi(x)}$$&lt;/p&gt;
&lt;p&gt;2、定理2：设 $x=\psi(t)$ 是单调的可导函数，并且 $\psi(t) \neq 0$。又设 $f[\psi(t)] \cdot \psi(t)$ 具有原函数。则有换元公式&lt;/p&gt;
&lt;p&gt;$$\int f(x) dx=[\int f[\psi(t)] \cdot \psi&amp;rsquo;(t) dt]_{t=\psi^{-1}(x)}$$&lt;/p&gt;
&lt;p&gt;其中 $\psi^{-1}(x)$ 是 $x=\psi(t)$ 的反函数&lt;/p&gt;
&lt;p&gt;3、基本积分表续（以下 $a &amp;gt; 0$）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\int \tan x dx=-\ln |\cos x|+C$&lt;/li&gt;
&lt;li&gt;$\int \cot x dx=\ln |\sin x|+C$&lt;/li&gt;
&lt;li&gt;$\int \sec x dx=\ln |\sec x+\tan x|+C$&lt;/li&gt;
&lt;li&gt;$\int \csc x dx=\ln |\csc x-\cot x|+C$&lt;/li&gt;
&lt;li&gt;$\int \frac{1}{a^2+x^2} dx=\frac{1}{a} \arctan \frac{x}{a}+C$&lt;/li&gt;
&lt;li&gt;$\int \frac{1}{x^2-a^2} dx=\frac{1}{2a} \ln |\frac{x-a}{x+a}|+C$&lt;/li&gt;
&lt;li&gt;$\int \frac{1}{\sqrt{a^2-x^2}} dx=\arcsin \frac{x}{a}+C$&lt;/li&gt;
&lt;li&gt;$\int \frac{1}{\sqrt{a^2+x^2}} dx=\ln(x+\sqrt{a^2+x^2})+C$&lt;/li&gt;
&lt;li&gt;$\int \frac{1}{\sqrt{x^2-a^2}} dx=\ln |x+\sqrt{x^2-a^2}|+C$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三、分部积分法&lt;/p&gt;
&lt;p&gt;设函数 $u=u(x)$ 及 $v=v(x)$ 具有连续导数，则两个函数乘积的导数公式为&lt;/p&gt;
&lt;p&gt;$$(uv)&amp;lsquo;=u&amp;rsquo;v+uv&#39;$$&lt;/p&gt;
&lt;p&gt;移项，得&lt;/p&gt;
&lt;p&gt;$$uv&#39;=(uv)&#39;-u&amp;rsquo;v$$&lt;/p&gt;
&lt;p&gt;两边同时求不定几积分，得&lt;/p&gt;
&lt;p&gt;$$\int uv&amp;rsquo; dx=uv-\int u&amp;rsquo;v dx$$&lt;/p&gt;
&lt;p&gt;也可以写成&lt;/p&gt;
&lt;p&gt;$$\int udv=uv-\int vdu$$&lt;/p&gt;
&lt;p&gt;四、有理函数的积分&lt;/p&gt;
&lt;p&gt;1、定义：两个多项式子的商 $\frac{P(x)}{Q(x)}$ 称为有理函数，又称有理分式（假定分子多项式与分母之间没有公因式）。当分子多项式 $P(x)$ 的次数小于分母多项式 $Q(x)$ 的次数时，称这有理函数为真分式，否则为假分式。&lt;/p&gt;
&lt;p&gt;2、对于假分式，利用多项式除法，总可以将一个假分式化成一个多项式与一个真分式之和的形式&lt;/p&gt;
&lt;p&gt;3、对于真分式 $\frac{P(x)}{Q(x)}$，如果分母可分解为两个多项式的乘积 $Q(x)=Q_1(x)Q_2(x)$ 且 $Q_1(x)$ 与 $Q_2(x)$ 没有公因式，那么它可拆分为两个真分式之和&lt;/p&gt;
&lt;p&gt;$$\frac{P(x)}{Q(x)}=\frac{P_1(x)}{Q_1(x)}+\frac{P_2(x)}{Q_2(x)}$$&lt;/p&gt;
&lt;p&gt;上述步骤称为把真分式化成部分分式之和。如果 $Q_1(x)$ 或 $Q_2(x)$ 还能分解成两个没有公因式的多项式的乘积，那么如此继续拆分。最后，有理函数的分解式中只出现多项式、$\frac{P_1(x)}{(x-a)^k}$、$\frac{P_2(x)}{(x^2+px+q)^l}$ 等三类函数，在进行求解。&lt;/p&gt;
&lt;p&gt;五、积分表的使用&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>微分中值定理与导数的应用</title>
      <link>https://utopizza.github.io/posts/math/2018-12-11-%E6%95%B0%E5%AD%A6-%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E4%B8%8E%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/math/2018-12-11-%E6%95%B0%E5%AD%A6-%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E4%B8%8E%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;一、微分中值定理&lt;/p&gt;
&lt;p&gt;1、费马引理：设函数 $f(x)$ 在点 $x_0$ 的某邻域 $U(x_0)$ 内有定义，并且在 $x_0$ 处可导，如果对任意的 $x \in U(x_0)$ 有 $f(x) \leq f(x_0)$ （或 $f(x) \geq f(x_0)$），那么 $f&amp;rsquo;(x_0)=0$&lt;/p&gt;
&lt;p&gt;2、罗尔定理：如果函数 $f(x)$ 满足：(1) 在闭区间 $[a,b]$ 上连续；(2) 在开区间 $(a,b)$ 内可导；(3) 在区间端点处的函数值相等，即 $f(a)=f(b)$，那么在 $(a,b)$ 内至少有一点 $\xi (a &amp;lt; \xi &amp;lt; b)$，使得 $f&amp;rsquo;(\xi)=0$&lt;/p&gt;
&lt;p&gt;3、拉格朗日中值定理：如果函数 $f(x)$ 满足：(1) 在闭区间 $[a,b]$ 上连续；(2) 在开区间 $(a,b)$ 内可导，那么在 $(a,b)$ 内至少有一点 $\xi (a &amp;lt; \xi &amp;lt; b)$，使得 $f(b)-f(a)=f&amp;rsquo;(\xi) \cdot (b-a)$。其几何意义是，如果连续曲线 $y=f(x)$ 的弧 $\widetilde{AB}$ 上除端点外处处具有不垂直于 $x$ 轴的切线，那么这弧上至少有一点 $C$，使得曲线在 $C$ 处的切线平行于弦 $AB$。该定理也称为微分中值定理&lt;/p&gt;
&lt;p&gt;4、柯西中值定理：如果函数 $f(x)$ 及 $F(x)$ 满足：(1) 在闭区间 $[a,b]$ 上连续；(2) 在开区间 $(a,b)$ 内可导；(3) 对任一 $x \in (a,b)$，$F&amp;rsquo;(x) \neq 0$，那么在 $(a,b)$ 内至少有一点 $\xi (a &amp;lt; \xi &amp;lt; b)$，使得 $\frac{f(b)-f(a)}{F(b)-F(a)}=\frac{f&amp;rsquo;(\xi)}{F&amp;rsquo;(\xi)}$。该定理是参数方程形式下的拉格朗日中值定理的更一般性的表达形式，当取 $F(x)=x$ 时便得到拉格朗日中值定理&lt;/p&gt;
&lt;p&gt;二、洛必达法则&lt;/p&gt;
&lt;p&gt;1、定理：设 (1) 当 $x \to a$ 时，函数 $f(x)$ 及 $F(x)$ 都趋向于零；(2) 在点 $a$ 的某去心邻域内 $f&amp;rsquo;(x)$ 及 $F&amp;rsquo;(x)$ 都存在且 $F&amp;rsquo;(x) \neq 0$；(3) $\lim_{x \to a} \frac{f&amp;rsquo;(x)}{F&amp;rsquo;(x)}$ 存在（或为无限大），则
$$\lim_{x \to a} \frac{f(x)}{F(x)}=\lim_{x \to a} \frac{f&amp;rsquo;(x)}{F&amp;rsquo;(x)}$$&lt;/p&gt;
&lt;p&gt;2、定理：设 (1) 当 $x \to \infty $ 时，函数 $f(x)$ 及 $F(x)$ 都趋于零；(2) 当 $|x| &amp;gt; N$ 时，$f&amp;rsquo;(x)$ 与 $F&amp;rsquo;(x)$ 都存在且 $F&amp;rsquo;(x) \neq 0$；(3) $\lim_{x \to \infty} \frac{f&amp;rsquo;(x)}{F&amp;rsquo;(x)}$ 存在（或为无穷大），则
$$\lim_{x \to \infty} \frac{f(x)}{F(x)}=\lim_{x \to \infty} \frac{f&amp;rsquo;(x)}{F&amp;rsquo;(x)}$$&lt;/p&gt;
&lt;p&gt;三、泰勒公式&lt;/p&gt;
&lt;p&gt;1、泰勒中值定理1：如果函数 $f(x)$ 在 $x_0$ 处具有 $n$ 阶导数，那么存在 $x_0$ 的一个邻域，对于该邻域的任一 $x$，有
$$f(x)=f(x_0)+f&amp;rsquo;(x_0)(x-x_0)+\frac{f&amp;rsquo;&#39;(x_0)}{2!}(x-x_0)^2+&amp;hellip;+\frac{f^{(n)}(x_0)}{n!}(x-x_0)^n+R_n(x)$$
其中 $R_n(x)=o((x-x_0)^n)$&lt;/p&gt;
&lt;p&gt;2、泰勒中值定理2：如果函数 $f(x)$ 在 $x_0$ 处具有 $n+1$ 阶导数，那么对于任一 $x \in U(x_0)$，有
$$f(x)=f(x_0)+f&amp;rsquo;(x_0)(x-x_0)+\frac{f&amp;rsquo;&#39;(x_0)}{2!}(x-x_0)^2+&amp;hellip;+\frac{f^{(n)}(x_0)}{n!}(x-x_0)^n+R_n(x)$$
其中 $R_n(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}(x-x_0)^{n+1}$，这里 $\xi$ 是 $x_0$ 与 $x$ 之间的某个值&lt;/p&gt;
&lt;p&gt;四、函数的单调性与曲线的凹凸性&lt;/p&gt;
&lt;p&gt;1、定理：设函数 $y=f(x)$ 在 $[a,b]$ 上连续，在 $(a,b)$ 内可导
(1) 如果在 $(a,b)$ 内 $f&amp;rsquo;(x) \geq 0$，且等号仅在有限多个点处成立，那么函数 $y=f(x)$ 在 $[a,b]$ 上单调增加
(2) 如果在 $(a,b)$ 内 $f&amp;rsquo;(x) \leq 0$，且等号仅在有限多个点处成立，那么函数 $y=f(x)$ 在 $[a,b]$ 上单调减少&lt;/p&gt;
&lt;p&gt;2、定义：设 $f(x)$ 在区间 $I$ 上连续，如果对 $I$ 上任意两点 $x_1$，$x_2$，恒有 $f(\frac{x_1+x_2}{2}) &amp;lt; \frac{f(x_1)+f(x_2)}{2}$，那么称 $f(x)$ 在 $I$ 上的图形是凹的；如果恒有 $f(\frac{x_1+x_2}{2}) &amp;gt; \frac{f(x_1)+f(x_2)}{2}$，那么称图形是凸的&lt;/p&gt;
&lt;p&gt;3、定理：设 $f(x)$ 在 $[a,b]$ 上连续，在 $(a,b)$ 内具有一阶和二阶导数，那么
(1) 若在 $(a,b)$ 内 $f&amp;rsquo;&#39;(x) &amp;gt; 0$，则 $f(x)$ 在 $[a,b]$ 上的图形是凹的
(2) 若在 $(a,b)$ 内 $f&amp;rsquo;&#39;(x) &amp;lt; 0$，则 $f(x)$ 在 $[a,b]$ 上的图形是凸的&lt;/p&gt;
&lt;p&gt;五、函数的极值与最大值最小值&lt;/p&gt;
&lt;p&gt;1、定义：设函数 $f(x)$ 在点 $x_0$ 的某个去心邻域 $U(x_0)$ 内有定义，如果对于该去心邻域内的任一 $x$，有 $f(x) &amp;lt; f(x_0)$，那么就称 $f(x_0)$ 是函数 $f(x)$ 的一个极大值；如果 $f(x) &amp;gt; f(x_0)$，那么称为极小值&lt;/p&gt;
&lt;p&gt;2、定理：设函数 $f(x)$ 在 $x_0$ 处可导，且在 $x_0$ 处取得极值，那么 $f&amp;rsquo;(x_0)=0$&lt;/p&gt;
&lt;p&gt;3、定理：设函数 $f(x)$ 在 $x_0$ 处连续，且在 $x_0$ 的某去心邻域 $U(x_0,\delta)$ 内可导.
(1) 若 $x \in (x_0-\delta, x_0)$ 时 $f&amp;rsquo;(x) &amp;gt; 0$，而 $x \in (x0, x_0+\delta)$ 时 $f&amp;rsquo;(x) &amp;lt; 0$，则 $f(x)$ 在 $x_0$ 处取得极大值
(2) 若 $x \in (x_0-\delta, x_0)$ 时 $f&amp;rsquo;(x) &amp;lt; 0$，而 $x \in (x0, x_0+\delta)$ 时 $f&amp;rsquo;(x) &amp;gt; 0$，则 $f(x)$ 在 $x_0$ 处取得极小值&lt;/p&gt;
&lt;p&gt;4、定理：设函数 $f(x)$ 在 $x_0$ 处具有二阶导数且 $f(x_0)=0$，$f&amp;rsquo;&#39;(x_0) \neq 0$，则
(1) 当 $f&amp;rsquo;&#39;(x_0) &amp;lt; 0$ 时，函数 $f(x)$ 在 $x_0$ 处取得极大值
(2) 当 $f&amp;rsquo;&#39;(x_0) &amp;gt; 0$ 时，函数 $f(x)$ 在 $x_0$ 处取得极小值&lt;/p&gt;
&lt;p&gt;六、曲率&lt;/p&gt;
&lt;p&gt;七、方程的近似解&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FDSD</title>
      <link>https://utopizza.github.io/posts/thesis/2018-12-08-%E8%AE%BA%E6%96%87-fdsd/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2018-12-08-%E8%AE%BA%E6%96%87-fdsd/</guid>
      <description>&lt;p&gt;一、背景及问题&lt;/p&gt;
&lt;p&gt;目前一些高级的网络攻击例如 APT (Advanced Persistent Threat) 引起了工业界和学术界的广泛关注和研究。这种攻击的特点是隐性、长期、多步骤。当一次攻击被发现后，鉴定分析 (Forensic Analysis) 系统就会开始被执行以确定攻击的入口以及攻击的影响范围。鉴定分析是基于系统日志进行的，它通过分析日志文件（Log）中记录的所有系统操作（例如网络事件、文件读写事件、进程间通信事件）之间的信息流，来追踪攻击源头，以及被攻击所污染的所有实体。由此可知，如果要使的分析结果越精确，那么日志文件则需要越详细地记录系统发生的一切事件，如此一来日志文件就不得不变得更大。再考虑到 APT 的一次攻击可能持续几个月的时间，以及大型企业一般都会有成千上万台主机（Host），在这种情况下日志文件可以轻松达到 PB 级别，不但需要占用巨大的存储空间，而且还会拖慢鉴定分析的速度。&lt;/p&gt;
&lt;p&gt;此问题吸引了众多研究团体的兴趣，他们主要关注于如何在保证不影响鉴定分析的精确率的前提下，减小日志体积，提高鉴定分析的效率。&lt;/p&gt;
&lt;p&gt;二、解决方案&lt;/p&gt;
&lt;p&gt;文章提出了一种基于依赖图（Dependence Graph）的日志压缩技术，在不影响鉴定分析准确性的前提下，可以大幅度减少日志记录。大体思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统日志记录的系统事件可以用依赖图表示。系统内的实体（如进程、文件、网络等）用结点表示，系统事件（如系统调用，读写文件、进程间消息通讯、网络数据传输等）用带时间戳的有向边表示，其指向方向与信息/数据流动方向一致&lt;/li&gt;
&lt;li&gt;只针对 read、write、load 三类系统事件进行压缩，其他系统事件如 fork、execve、remove、rename、chmod 等等不考虑压缩直接保留。因为根据经验统计，系统中超过 95% 的事件是读写事件，只要这部分的日志减下来即可。并且只对读写事件进行压缩可以降低算法模型的复杂度，提高可读性&lt;/li&gt;
&lt;li&gt;根据前向可达性（Forward Reachability）和后向可达性（Backward Reachability），定义两种子图保留方案：全依赖 (Full Dependence FD) 保留，资源依赖（Source Dependence，SD）保留&lt;/li&gt;
&lt;li&gt;由于依赖图的边（即系统事件）是带时间戳的，当执行可达性计算时，需要对一个节点按时间戳的先后顺序多次计算，而不能像标准的图算法那样对所有结点一视同仁地一次性计算并进行中间结果缓存。这样显然会提高算法的复杂度，因此文章提出了一个算法，将带时间戳的依赖图转化标准图（边不带时间戳），具体方法是对结点进行多版本化（Versioning）&lt;/li&gt;
&lt;li&gt;但是如果只简单地进行结点的多版本化，又会增大图的复杂度，增大日志的体积，因此在多版本化后，文章提出了几种剪枝优化算法来简化依赖图：Redundant edge optimization (REO)、Global Redundant Edge Optimization (REO*)、Redundant node optimization (RNO)、 Redundant node optimization (RNO)&lt;/li&gt;
&lt;li&gt;通过以上步骤对依赖图进行简化之后，就可以将依赖图还原成日志文件，此时的日志文件中只保留了关键的信息，体积大大减小。但是文章认为日志文件原来的格式不够节省空间，于是提出了一种新的压缩文件格式 CSR ，可以进一步减少空间占用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、总结&lt;/p&gt;
&lt;p&gt;文章主要针对鉴定分析需要的日志文件过大问题，提出了一种在保证不影响侦查分析准确性的前提下，优化依赖子图、减少日志文件体积、提高鉴定分析效率的方案，其主要思路是通过前后可达性和后向可达性来保证依赖子图保留了关键的结点和边。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>导数与微分</title>
      <link>https://utopizza.github.io/posts/math/2018-12-06-%E6%95%B0%E5%AD%A6-%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/math/2018-12-06-%E6%95%B0%E5%AD%A6-%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/</guid>
      <description>&lt;p&gt;一、导数定义&lt;/p&gt;
&lt;p&gt;1、函数在一点处的导数：设函数 $y=f(x)$ 在点 $x_0$ 的某个邻域内有定义，当自变量 $x$ 在 $x_0$ 处取得增量 $\Delta x$（点 $x_0 + \Delta x$ 仍在该邻域内）时，相应地，因变量取得增量 $\Delta y=f(x_0+\Delta x)-f(x_0)$。如果 $\Delta y$ 与 $\Delta x$ 之比当 $\Delta x \to 0$ 时的极限存在，那么称函数 $y=f(x)$ 在点 $x_0$ 处可导，并称这个极限为函数 $y=f(x)$ 在点 $x_0$ 处的导数，记为 $f&amp;rsquo;(x_0)$，即&lt;/p&gt;
&lt;p&gt;$$f&amp;rsquo;(x_0)=\lim_{\Delta x \to 0} \frac{\Delta y}{\Delta x}=\lim_{\Delta x \to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}$$&lt;/p&gt;
&lt;p&gt;2、导函数：如果函数 $y=f(x)$ 在开区间的每点处都可导，那么就称函数 $f(x)$ 在开区间 $I$ 内可导。这时，对于任一 $x \in I$ 都对应着 $f(x)$ 的一个确定的导数值，这样就构成了一个新的函数，这个函数叫做函数 $y=f(x)$ 的导函数，记作 $y&#39;$, 或 $f&amp;rsquo;(x)$。导函数 $f&amp;rsquo;(x)$ 简称导数，$f&amp;rsquo;(x_0)$ 是 $f(x)$ 在 $x_0$ 处的导数，或导数 $f&amp;rsquo;(x)$ 在 $x_0$ 处的值，即 $f&amp;rsquo;(x_0)=f&amp;rsquo;(x)|_{x=x_0}$&lt;/p&gt;
&lt;p&gt;二、函数的求导法则&lt;/p&gt;
&lt;p&gt;1、定理：如果函数 $u=u(x)$ 和 $v=v(x)$ 都在点 x 具有导数，那么它们的和、差、积、商（除分母为零的点外）都在 x 点具有导数，且&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$[u \pm v]&amp;rsquo; = u&amp;rsquo; \pm v&#39;$&lt;/li&gt;
&lt;li&gt;$[uv]&amp;rsquo; = u&amp;rsquo;v+uv&#39;$&lt;/li&gt;
&lt;li&gt;$[\frac{u}{v}]&amp;lsquo;=\frac{u&amp;rsquo;v-uv&amp;rsquo;}{v^2}$ ($v(x)\neq 0$)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、定理：如果函数 $x=f(y)$ 在区间 $I_y$ 内单调、可导且 $f&amp;rsquo;(y)\neq 0$，那么它的反函数 $y=f^{-1}$ 在区间 $I_{x}={ x|x=f(y),y\in I_y }$ 内也可导，且其导数等于直接函数的导数的倒数，即&lt;/p&gt;
&lt;p&gt;$$[f^{-1}(x)]&amp;lsquo;=\frac{1}{f&amp;rsquo;(y)}$$&lt;/p&gt;
&lt;p&gt;3、定理：如果 $u=g(x)$ 在点 $x$ 可导，而 $y=f(u)$ 在点 $u=g(x)$ 可导，那么复合函数 $y=f[g(x)]$ 在点 $x$ 可导，且其导数为&lt;/p&gt;
&lt;p&gt;$$y&#39;=f&amp;rsquo;(u)\cdot g&amp;rsquo;(x)$$&lt;/p&gt;
&lt;p&gt;4、基本初等函数求导公式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(C)&amp;lsquo;=0$&lt;/li&gt;
&lt;li&gt;$(x^{\mu})&amp;lsquo;=\mu x^{\mu -1}$&lt;/li&gt;
&lt;li&gt;$(a^x)&amp;lsquo;=a^x \ln a$ ($a&amp;gt;0, a \neq 1$)&lt;/li&gt;
&lt;li&gt;$(e^x)&amp;lsquo;=e^x$&lt;/li&gt;
&lt;li&gt;$(\log_a x)&amp;lsquo;=\frac{1}{x \ln a}$ ($a&amp;gt;0, a \neq 1$)&lt;/li&gt;
&lt;li&gt;$(\ln x)&amp;lsquo;=\frac{1}{x}$&lt;/li&gt;
&lt;li&gt;$(\sin x)&amp;lsquo;=\cos x$&lt;/li&gt;
&lt;li&gt;$(\cos x)&amp;lsquo;=- \sin x$&lt;/li&gt;
&lt;li&gt;$(\tan x)&amp;lsquo;=\sec^{2} x$&lt;/li&gt;
&lt;li&gt;$(\cot x)&amp;lsquo;=- \csc^{2} x$&lt;/li&gt;
&lt;li&gt;$(\sec x)&amp;lsquo;=\sec x \cdot \tan x$&lt;/li&gt;
&lt;li&gt;$(\csc x)&amp;lsquo;=- \csc x \cdot \cot x$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三、高阶导数&lt;/p&gt;
&lt;p&gt;四、隐函数的导数、由参数方程所确定的函数的导数、相关变化率&lt;/p&gt;
&lt;p&gt;五、函数的微分&lt;/p&gt;
&lt;p&gt;1、定义：设函数 $y=f(x)$ 在某区间内有定义，$x_0$ 及 $x_0+\Delta x$ 在这区间内，如果函数的增量 $\Delta y=f(x_0+\Delta x)-f(x_0)$ 可表示为 $\Delta y=C \cdot \Delta x+ o(\Delta x)$，其中 $C$ 是不依赖于 $\Delta x$ 的常数，那么称函数 $y=f(x)$ 在点 $x_0$ 处是可微的，而 $C \cdot \Delta x$ 叫做函数的微分，记作 $dy$，即&lt;/p&gt;
&lt;p&gt;$$dy=C \cdot \Delta x$$&lt;/p&gt;
&lt;p&gt;2、可微的条件：函数 $f(x)$ 在点 $x_0$ 处可微的充分必要条件是函数 $f(x)$ 在点 $x_0$ 处可导，并且其导数 $f&amp;rsquo;(x_0)=C$。因为由导数的定义 （$\frac{\Delta y}{\Delta x}$ 在 $x_0$ 处的极限存在，记为 $f&amp;rsquo;(x_0)$），以及极限与无穷小的关系（在自变量的同一变化过程 $x \to x_0$ 中，函数 $g(x)$ 具有极限 $A$ 的充分必要条件是 $g(x)=A+\alpha$，其中 $\alpha$ 是无穷小），可得 $\frac{\Delta y}{\Delta x}=f&amp;rsquo;(x_0)+\alpha$，因此&lt;/p&gt;
&lt;p&gt;$$\Delta y=f&amp;rsquo;(x_0) \cdot \Delta x+\alpha \cdot \Delta x=dy+o(\Delta x)$$&lt;/p&gt;
&lt;p&gt;3、自变量的微分：通常把自变量 $x$ 的增量 $\Delta x$ 称为自变量的微分，记作 $dx$，即&lt;/p&gt;
&lt;p&gt;$$dx=\Delta x$$&lt;/p&gt;
&lt;p&gt;于是，函数 $y=f(x)$ 的微分 $dy=f&amp;rsquo;(x) \cdot \Delta x$ 又可以记作 $dy=f&amp;rsquo;(x) \cdot dx$。从而有 $\frac{dy}{dx}=f&amp;rsquo;(x)$，也就是说，函数的微分 $dy$ 与自变量的微分 $dx$ 之商，等于该函数的导数。因此，导数也可叫做“微商”。&lt;/p&gt;
&lt;p&gt;$$\frac{dy}{dx}=\lim_{\Delta x \to 0}\frac{\Delta y}{\Delta x}$$&lt;/p&gt;
&lt;p&gt;那么在 $x_0$ 处的导数定义为&lt;/p&gt;
&lt;p&gt;$$f&amp;rsquo;(x_0) = \frac{dy}{dx} |_{x=x_0}=\lim_{\Delta x \to 0} \frac{\Delta y}{\Delta x} |_{x=x_0} =\lim_{\Delta x \to 0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}$$&lt;/p&gt;
&lt;p&gt;4、微分的几何意义：对于可微函数 $y=f(x)$ 而言，当 $\Delta y$ 是曲线 $y=f(x)$ 上的点的纵坐标的增量时，$dy$ 就是曲线的切线上的点的纵坐标的相应增量。当 $|\Delta x|$ 很小时，$|\Delta y-dy|$ 比 $|\Delta x|$ 小得多。因此在某点的邻近，我们可以用切线段来近似代替曲线段。（在局部范围内用线性函数近似代替非线性函数，在几何上就是局部用切线段近似代替曲线段，这在数学上称为非线性函数的局部线性化，这是微分学的基本思想方法之一）&lt;/p&gt;
&lt;p&gt;5、微分的运算法则：从函数的微分的表达式 $dy=f&amp;rsquo;(x)dx$ 可以看出，要计算函数的微分，只要计算函数的导数，再乘以自变量的微分即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>函数与极限</title>
      <link>https://utopizza.github.io/posts/math/2018-12-02-%E6%95%B0%E5%AD%A6-%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/math/2018-12-02-%E6%95%B0%E5%AD%A6-%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</guid>
      <description>&lt;p&gt;一、映射与函数&lt;/p&gt;
&lt;p&gt;1、映射：设 $X$、$Y$ 是两个非空集合，如果存在一个法则 $f$，使得对 $X$ 中每个元素 $x$，按法则 $f$，在 $Y$ 中有唯一确定的元素 $y$ 与之对应，那么称 $f$ 为从 $X$ 到 $Y$ 的映射，记作 $f:X \to Y$，其中 $y$ 称为元素 $x$ 在映射 $f$ 下的像，记作 $y=f(x)$，而 $x$ 称为元素 $y$ 在映射 $f$ 下的一个原像。集合 $X$ 称为映射 $f$ 的定义域，$X$ 中所有元素的像组成的集合称为映射 $f$ 的值域。&lt;/p&gt;
&lt;p&gt;2、函数：设数集 $D \subset R$，$R$ 为实数集，则称映射 $f:D \to R$ 为定义在 $D$ 上的函数，记作 $y=f(x), x \in D$，其中 $x$ 称为自变量，$y$ 称为因变量，$D$ 称为定义域。&lt;/p&gt;
&lt;p&gt;五类基本初等函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;幂函数：$y=x^{\mu}$ ( $\mu \in R$ 是常数 )&lt;/li&gt;
&lt;li&gt;指数函数：$y=a^{x}$ ( $a&amp;gt;0$ 且 $a \neq 1$ )&lt;/li&gt;
&lt;li&gt;对数函数：$y=\log_ax$ ( $a&amp;gt;0$ 且 $a \neq 1$ )&lt;/li&gt;
&lt;li&gt;三角函数：$y=\sin x$，$y=\cos x$，$y=\tan x$ 等等&lt;/li&gt;
&lt;li&gt;反三角函数：$y=\arcsin x$，$y=\arccos x$，$y=\arctan x$ 等等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、数列的极限&lt;/p&gt;
&lt;p&gt;1、定义：设 {$x_n$} 为一数列，如果存在常数 $a$，对于任意给定的正数 $\varepsilon$（不论它多么小），总存在正整数 $N$，使得当 $n&amp;gt;N$ 时，不等式 $|x_n - a| &amp;lt; \varepsilon$ 都成立，那么称常数 $a$ 是数列 $x_n$ 的极限，或者称数列 $x_n$ 收敛于 $a$，记为 $\lim_{n \to \infty} x_n=a$。上述定义可简记为：
$$\lim_{n \to \infty} x_n=a \iff \forall \varepsilon&amp;gt;0, \exists N \in N^{+}, \text{ 当 } n&amp;gt;N \text{ 时 }, \text{ 有 } |x_n-a|&amp;lt;\varepsilon $$&lt;/p&gt;
&lt;p&gt;2、定理（数列极限唯一性）：如果数列 $x_n$ 收敛，那么它的极限唯一&lt;/p&gt;
&lt;p&gt;3、定理（收敛数列有界性）：如果数列 $x_n$ 收敛，那么数列 $x_n$ 一定有界&lt;/p&gt;
&lt;p&gt;4、定理（收敛数列保号性）：如果 $\lim_{n \to \infty}x_n=a$，且 $a&amp;gt;0$（或 $a &amp;lt; 0$），那么存在正整数 $N$，当 $n&amp;gt;N$ 时，都有 $x_n&amp;gt;0$（或 $x_n &amp;lt; 0$）&lt;/p&gt;
&lt;p&gt;5、定理（子数列收敛性）：如果数列 $x_n$ 收敛于 $a$，那么它的任一子数列也收敛于 $a$&lt;/p&gt;
&lt;p&gt;三、函数的极限&lt;/p&gt;
&lt;p&gt;1、定义(1)：设函数 $f(x)$ 在点 $x_0$ 的某一点去心邻域内有定义。如果存在常数 $A$，对于任意给定的正数 $\varepsilon$（不论它多么小），总存在整数 $\delta$，使得当 $x$ 满足不等式 $0&amp;lt;|x-x_0|&amp;lt;\delta$ 时，对应的函数值 $f(x)$ 都满足不等式 $|f(x)-A|&amp;lt;\varepsilon$，那么常数 $A$ 就叫做函数 $f(x)$ 当 $x \to x_0$ 时的极限，记作 $\lim_{x \to x_0}f(x)=A$。定义可简记为：
$$\lim_{x \to x_0}f(x)=A \iff \forall \varepsilon&amp;gt;0, \exists \delta&amp;gt;0, \text{ 当 } 0&amp;lt;|x-x_0|&amp;lt;\delta \text{ 时 }, \text{ 有 } |f(x)-A|&amp;lt;\varepsilon$$&lt;/p&gt;
&lt;p&gt;2、定义(2)：设函数 $f(x)$ 当 $|x|$ 大于某一正数时有定义。如果存在常数 $A$，对于任意给定的正数 $\varepsilon$（不论它多么小），总存在着正数 $X$，使得当 $x$ 满足不等式 $|x|&amp;gt;X$ 时，对应的函数值 $f(x)$ 都满足不等式 $|f(x)-A|&amp;lt;\varepsilon$，那么常数 $A$ 就叫做函数 $f(x)$ 当 $x \to \infty$ 时的极限，记作 $\lim_{x \to \infty} f(x)=A$。定义可简记为：
$$\lim_{x \to \infty}f(x)=A \iff \forall \varepsilon&amp;gt;0, \exists X&amp;gt;0, \text{ 当 } |x|&amp;gt;X \text{ 时 }, \text{ 有 } |f(x)-A|&amp;lt;\varepsilon$$&lt;/p&gt;
&lt;p&gt;3、定理（函数极限唯一性）：如果 $\lim_{x \to x_0}f(x)$ 存在，那么这极限唯一&lt;/p&gt;
&lt;p&gt;4、定理（函数极限局部有界性）：如果 $\lim_{x \to x_0}f(x)=A$，那么存在常数 $M&amp;gt;0$ 和 $\delta &amp;gt;0$，使得当 $0&amp;lt;|x-x_0|&amp;lt;\delta$ 时，有 $|f(x)| \leq M$&lt;/p&gt;
&lt;p&gt;5、定理（函数极限局部保号性）：如果 $\lim_{x \to x_0}f(x)=A$ 且 $A&amp;gt;0$（或 $A &amp;lt; 0$），那么存在常数 $\delta &amp;gt;0$，使得当 $0&amp;lt;|x-x_0|&amp;lt;\delta$ 时，有 $f(x)&amp;gt;0$（或 $f(x)&amp;lt; 0$）&lt;/p&gt;
&lt;p&gt;四、无穷小与无穷大&lt;/p&gt;
&lt;p&gt;1、无穷小：如果函数 $f(x)$ 当 $x \to x_0$（或 $x \to \infty$）时的极限为零，那么称函数 $f(x)$ 为当 $x \to x_0$（或 $x \to \infty$）时的无穷小&lt;/p&gt;
&lt;p&gt;2、无穷大：设函数 $f(x)$ 在 $x_0$ 的某一去心邻域内有定义（或 $|x|$ 大于某一正数时有定义）。如果对于任意给定的正数 $M$（不论它多大），总存在正数 $\delta$（或正数 $X$），只要 $x$ 适合不等式 $0&amp;lt;|x-x_0|&amp;lt;\delta$（或 $|x|&amp;gt;X$），对应的函数值 $f(x)$ 总满足不等式 $|f(x)|&amp;gt;M$，那么称函数 $f(x)$ 是当 $x \to x_0$（或 $x \to \infty$）时的无穷大&lt;/p&gt;
&lt;p&gt;3、定理：在自变量的同一变化过程 $x \to x_0$（或 $x \to \infty$）中，函数 $f(x)$ 具有极限 $A$ 的充分必要条件是 $f(x)=A+\alpha$，其中 $\alpha$ 是无穷小&lt;/p&gt;
&lt;p&gt;4、定理：在自变量的同一变化过程中，如果 $f(x)$ 为无穷大，那么 $\frac{1}{f(x)}$ 为无穷小；反之，如果 $f(x)$ 为无穷小，且 $f(x) \neq 0$，那么 $\frac{1}{f(x)}$ 为无穷大&lt;/p&gt;
&lt;p&gt;五、极限运算法则&lt;/p&gt;
&lt;p&gt;1、定理：有限个无穷小的和是无穷小&lt;/p&gt;
&lt;p&gt;2、定理：有界函数与无穷小的乘积是无穷小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常数与无穷小的乘积是无穷小&lt;/li&gt;
&lt;li&gt;有限个无穷小的乘积是无穷小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、定理：如果 $\lim f(x)=A$，$\lim g(x)=B$，那么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\lim [f(x) \pm g(x)]=\lim f(x) \pm \lim g(x) = A \pm B$&lt;/li&gt;
&lt;li&gt;$\lim [f(x) \cdot g(x)]=\lim f(x) \cdot \lim g(x) = A \cdot B$&lt;/li&gt;
&lt;li&gt;若 $B \neq 0$，则 $\lim \frac{f(x)}{g(x)}=\frac{\lim f(x)}{\lim g(x)}=\frac{A}{B}$&lt;/li&gt;
&lt;li&gt;$\lim [cf(x)]=c \lim f(x)$&lt;/li&gt;
&lt;li&gt;$\lim [f(x)]^n=[\lim f(x)]^n$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、数列极限的四则运算法则同上&lt;/p&gt;
&lt;p&gt;5、定理：如果 $f(x) \geq g(x)$，而 $\lim f(x)=A$，$\lim g(x)=B$，那么 $A \geq B$&lt;/p&gt;
&lt;p&gt;6、定理：设函数 $y=f[g(x)]$ 是由函数 $u=g(x)$ 与 $y=f(u)$ 复合而成，$f[g(x)]$ 在点 $x_0$ 的某去心邻域内有定义，若 $\lim_{x \to x_0}=u_0$，$lim_{u \to u_0}=A$，且存在 $\delta &amp;gt;0$，当 $x \in U(x_0,\delta_0)$ 时，有 $g(x) \neq u_0$，则 $lim_{x \to x_0}f[g(x)]=\lim_{u \to u_0}f(u)=A$&lt;/p&gt;
&lt;p&gt;六、极限存在准则&lt;/p&gt;
&lt;p&gt;1、准则(I)-数列：如果数列 {$x_n$}，{$y_n$} 及 {$z_n$} 满足：
(i) 从某项起，即 $\exists n_0 \in N^{+}$，当 $n&amp;gt;n_0$  时，有 $y_n \leq x_n \leq z_n$
(ii) $\lim_{n \to \infty} y_n=a$，$\lim_{n \to \infty}z_n=a$
那么数列 {$x_n$} 的极限存在，且 $\lim_{n \to \infty}x_n=a$&lt;/p&gt;
&lt;p&gt;2、准则(I)-函数：如果
(i) 当 $x \in U(x_0, r)$ （或 $|x|&amp;gt;M$）时，$g(x) \leq f(x) \leq h(x)$
(ii) $\lim_{x \to x_0/\infty} g(x)=A$，$\lim_{x \to x_0/\infty}h(x)=A$
那么 $\lim_{x \to x_0/\infty} f(x)=A$&lt;/p&gt;
&lt;p&gt;3、准则(II)-数列：单调有界函数必有极限&lt;/p&gt;
&lt;p&gt;4、准则(II)-函数：设函数 $f(x)$ 在点 $x_0$ 的某个左邻域内单调并且有界，则 $f(x)$ 在 $x_0$ 的左极限 $f(x_0^{-})$ 必定存在&lt;/p&gt;
&lt;p&gt;5、柯西极限存在准则：数列 {$x_n$} 收敛的充分必要条件是：对于任意给定的正数 $\varepsilon$，存在正整数 $N$，使得当 $m&amp;gt;N$，$n&amp;gt;N$ 时，有 $|x_n-x_m| &amp;lt; \varepsilon$&lt;/p&gt;
&lt;p&gt;七、无穷小的比较&lt;/p&gt;
&lt;p&gt;八、函数的连续性&lt;/p&gt;
&lt;p&gt;1、定义：设函数 $y=f(x)$ 在点 $x_0$ 的某一邻域内有定义，如果
$$\lim_{\Delta x \to 0} \Delta y = \lim_{\Delta x \to 0}[f(x_0+\Delta x)-f(x_0)]=0 $$
，那么就称函数 $y=f(x)$ 在点 $x_0$ 连续&lt;/p&gt;
&lt;p&gt;2、定义：设函数 $y=f(x)$ 在点 $x_0$ 的某一邻域内有定义，如果
$$\lim_{x \to x_0} f(x)=f(x_0)$$
，那么就称函数 $f(x)$ 在点 $x_0$ 连续&lt;/p&gt;
&lt;p&gt;九、连续函数的运算与初等函数的连续性&lt;/p&gt;
&lt;p&gt;十、闭区间上连续函数的性质&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SAQL</title>
      <link>https://utopizza.github.io/posts/thesis/2018-11-30-%E8%AE%BA%E6%96%87-saql/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2018-11-30-%E8%AE%BA%E6%96%87-saql/</guid>
      <description>&lt;p&gt;一、背景及问题&lt;/p&gt;
&lt;p&gt;目前一些高级的网络攻击如 APT（advanced persistent threats）威胁并损害着很多公司的信息安全。它们利用主机的各种弱点，通过一系列步骤来进行攻击。&lt;/p&gt;
&lt;p&gt;为了应对这些攻击，一些基于系统监控（System Monitoring）的方法被提出，用于快速侦查异常，或者定位存在风险的系统事件（System Event）。这些方法主要通过对主机的系统调用（system calls）进行监控，收集系统事件的信息，来实现系统异常的侦查。然而，目前这些方法存在几点问题和困难：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时间要求严格。要避免主机受到进一步的伤害导致无法修复，该监控系统必须做到实时在线保护主机，实时侦查主机内的异常事件，这就犹如进行实时的“大海捞针”&lt;/li&gt;
&lt;li&gt;如何让监控系统实时地结合系统管理员、安全专家、数据分析专家们的领域知识（domain knowledge）？因为这些领域知识对于系统异常的侦查是非常有帮助的，甚至是必要的&lt;/li&gt;
&lt;li&gt;实时的系统监控自然会产生海量的日志数据，这就要求分析数据侦查异常的算法必须非常高效，因为是实时的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;遗憾的是目前没有任何一个监控系统能够解决以上问题，尤其是第二点——已有的监控系统往往只专注于特定的异常侦查，无法提供足够的支持以便用户可以灵活地引入专家的领域知识。&lt;/p&gt;
&lt;p&gt;二、解决方案&lt;/p&gt;
&lt;p&gt;论文提出了一个基于流的异常查询系统，以及一种基于流的异常查询语言（Streambased Anomaly Query Language，SAQL）。该系统主要面向 4 种异常：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rule-based Anomaly:基于规则的异常，某个进程在短时间内读取大量的命令日志文件，这种异常通常意味着某个非法的用户想要探测合法用户的常用命令或者操作习惯。为了侦查这种异常，SAQL 使用事件模式（event patterns）来表达操作系统中的各种活动：定义一个事件表示为 {subject-operation-object}，例如 {process p1 write file f2}。有了如此统一定义的形式，用户就可以在查询的时间灵活地定义领域知识，甚至可以定制基于特定规则的异常检测&lt;/li&gt;
&lt;li&gt;Time-Series Anomaly:时间序列的异常，某个进程在一段时间内不正常地传送了大量的数据。为了探测到这种异常，SAQL 构造带状态的滑动窗口，将数据流进行分段，那么只要通过与历史滑动窗口的状态进行比较，就可以检测到某个时间段对应的数据量是否异常地增大&lt;/li&gt;
&lt;li&gt;Invariant-based Anomaly:基于不变的异常？一个进程启动了一个异常的进程，如 apache.exe 本应该启动 httpd.exe，但却启动了一个在训练模型时从来未出现过的进程 java.exe。这种情况同样可以使用上述带状态滑动窗口的模型，只要提前训练学习好正常情况下的系统状态（可用窗口状态表达），便可检测此类异常。&lt;/li&gt;
&lt;li&gt;Outlier-based Anomaly:基于异常的异常，通过与同等的进程的比较来确定异常。例如，通过比较发现，某个进程向某个 IP 地址传送的数据量比同等进程向其他 IP 地址传送的数据量大太多，那么这个进程就值得怀疑。SAQL 可以使用聚类算法对事件进行聚类，以便在同类的事件中进行比较并发现异常。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除此之外，系统往往需要同时处理大批量的异常检测查询，而目前一般的检测系统如 Siddhi、Esper、Flink 采取的做法都是为每一个 query 复制一份数据，由于操作系统的日志文件是非常巨大的，这样的复制操作会使得系统非常低效。针对这个问题，论文提出一个名为 master-dependent-query 的查询模式，它把用户提交的各种查询进行兼容性分析，然后将兼容的查询分到同一个组，每个组的查询都共用一份数据，这样避免了大量的数据复制，提高了查询分析的效率。&lt;/p&gt;
&lt;p&gt;三、总结&lt;/p&gt;
&lt;p&gt;总的来说，文章的主要工作是提出了一个用于描述操作系统事件的形式化语言 SAQL，使得用户和系统可以统一地描述各种正常和异常的事件，从而可以灵活地加入专家领域知识并进行异常检测，无需改动系统本身。另外提高为查询效率，文章提出了查询分组的模型，让可以相互兼容的查询共用日志数据，避免了为每个查询复制一次数据的低效模式。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RTAG</title>
      <link>https://utopizza.github.io/posts/thesis/2018-11-24-%E8%AE%BA%E6%96%87-rtag/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2018-11-24-%E8%AE%BA%E6%96%87-rtag/</guid>
      <description>&lt;p&gt;一、背景及问题&lt;/p&gt;
&lt;p&gt;目前出现一些高级的多主机攻击手段，它们通过使用“command-and-control(C&amp;amp;C)”通道或者代理服务器来实现攻击者隐藏和攻击方式隐藏。例如 &lt;a href=&#34;https://github.com/nccgroup/gitpwnd&#34;&gt;GitPwnd&lt;/a&gt; 攻击，它利用了 Git 的同步机制来泄漏被攻击者的私有数据，大致过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;攻击者事先在一个流行的 git repository 的镜像中 放置一个钩子脚本，这个脚本会指向一个恶意的 C&amp;amp;C repository&lt;/li&gt;
&lt;li&gt;当被攻击者用 git 复制该 repository 镜像时，git 会自动地连带那个恶意 C&amp;amp;C repository 一起复制到被攻击者的 git 服务器&lt;/li&gt;
&lt;li&gt;当被攻击者在 repository 上执行某些特定操作如 git commit 时，恶意 C&amp;amp;C repository 被触发，把被攻击者的数据私下发送到攻击者的主机而不会被察觉&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;针对这类攻击，一种称为动态信息流追踪（Dynamic information flow tracking , DIFT）的技术被提出并应用于攻击侦查。然而，目前存在的大多数攻击侦查系统只能对单个主机的攻击进行侦查，例如对某个主机下的 system-call-level 或 instruction-level 的事件进行监控，而无法侦查如上述 GitPwnd 之类的跨主机攻击。&lt;/p&gt;
&lt;p&gt;二、解决方案&lt;/p&gt;
&lt;p&gt;论文提出了一种基于记录-回放的信息流标签和追踪系统（a record-and-replay-based data flow tagging and tracking system, called RTAG）。RTAG 首先通过隔断标签依赖关系（主机之间的信息流）来摆脱多个主机之间信息流顺序的约束，使 DIFT 可以并行执行。其次，RTAG 通过精心设计的数据结构来减少 DIFT 的内存消耗（90%）和时间消耗（60%-90%）。&lt;/p&gt;
&lt;p&gt;标签系统 RTAG 的大致设计思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &amp;lt;主机 mac 地址 + inode + dev + crtime + byte-offset&amp;gt; 来实现全局唯一标签（global tag），标识感兴趣文件中的每个字节，实现对文件在多个主机之间的信息流的追踪&lt;/li&gt;
&lt;li&gt;使用与 RAIN 系统一样的资源图（provenance graph） 来追踪程序之间的信息流，如程序到文件、程序到程序、文件到程序&lt;/li&gt;
&lt;li&gt;使用可达性分析算法，对多主机的全局资源图进行剪枝，得到只与攻击相关的资源子图，减少后续分析的计算量。为实现此跨主机的可达性追踪，RAIN 需要在 socket 层次（TCP &amp;amp; UDP）上对主机之间的网络通讯进行监控&lt;/li&gt;
&lt;li&gt;采用与 RAIN 系统一样的记录-回放策略（record-and-replay），即平时只记录信息流动的信息，只有在执行攻击分析查询时再通过回放记录来执行 DIFT（因为计算量和内存消耗较大，无法实时在线执行）&lt;/li&gt;
&lt;li&gt;使用 32-bit 的数据版本号来隔断 tags 之间的依赖关系，使得每个 replay 可以单独执行而无需执行所依赖的数据版本的 replay。数据版本号在数据（即文件的数据）被执行 write() 之类的系统调用时自动增加&lt;/li&gt;
&lt;li&gt;使用 global tag 和 local tag 转换技术来减低资源消耗量。因为在单个主机内执行攻击分析时，没有必要因为使用 global tag 而耗费内存资源。因此在执行这种单个主机内的 DIFT 之前，RTAG 会先把 global tag 转换成 local tag，待执行完后再换回来&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、总结&lt;/p&gt;
&lt;p&gt;总的来说，文章提出的 RTAG 系统是在原有的 RAIN 系统上，对其标签系统（tagging system）进行扩展而得到的。它通过使用全局标签来进行跨主机的信息流追踪，使用全局-局部标签转换来降低计算量等等，使得原有的单主机 DIFT 系统 RAIN 扩展到了多主机的攻击侦查。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>阶段总结(6)</title>
      <link>https://utopizza.github.io/posts/summary/2018-10-15-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%936/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/summary/2018-10-15-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%936/</guid>
      <description>&lt;p&gt;从7月底开始，一共面了顺丰、大疆、京东、网易、美团、华为、百度、腾讯这八家公司，也都拿到了offer。阿里、头条没有去面，因为听闻加班太严重而且离家太远了（当时不知道头条在深圳有分公司），就没投。自9月30号面完最后一家腾讯后，就不继续面其他公司了，回家休息了两周（10月1号至14号）。10月15号回到学校，继续做实验室老板安排的项目任务。&lt;/p&gt;
&lt;p&gt;现在回顾一下从5月份到7月份的三个月的复习，已经8月份到9月份两个月的面试。由于春招的时候我完全没有准备，没有投实习，没有拿到实习offer保底，实验室也不放人出去实习，因此5月份开始复习看书的时候，心里没底，很担心秋招找不好工作。同时还感觉有很多书要看，很多知识要补，相当焦虑紧张。但这样也有好处，那就是焦虑和紧张的状态会逼迫自己不敢有一丝松懈，感觉5月份到7月份这三个月我看书复习的效率相当高。现在回过头来看我自己都感到惊讶，仅仅三个月，从接近零基础，到面八家互联网公司就拿八个offer，没有被刷过一次。&lt;/p&gt;
&lt;p&gt;一、算法&lt;/p&gt;
&lt;p&gt;算法没啥好说的，必须把基础算法吃透，其实不多，也就排序、搜索、数据结构、树、图这几大类。我当时是把橙色那本《算法第四版》上面的所有代码手敲了两遍，然后再尝试自己写一遍。因为我觉得那本书上面的代码写得实在太漂亮了，相当的简洁，相当符合我的个人审美，并且那本书的作者是个巨神。&lt;/p&gt;
&lt;p&gt;这样搞了三遍基础的书法和数据结构后，心里就有些底，没那么方了。接下来也没啥好说的，刷题。我当时主要是在leetcode刷，因为讨论区相当活跃，每道题的讨论区有太多让人五体投地的巧妙解法了。刷leetcode之外，配合《剑指offer》和左程云的《程序员面试指南》，应该够了。leetcode前100道我刷了两三遍，100到200题我没时间了，应该是只做了一遍。剑指offer最重要，一定要烂熟，可以去牛客网刷，我刷了3遍左右，时不时要复习，因为面试题几乎全部是从上面出，原题。左程云那本我只看了一遍，手敲了一遍，偶而回过头看看代码。&lt;/p&gt;
&lt;p&gt;二、计算机基础&lt;/p&gt;
&lt;p&gt;这里的计算机基础指的是计算机网络、操作系统、数据库。对于这三科，我当时的复习策略是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先使用本科学过的课本快速回顾基础知识，因为学过的课本熟悉感最强，这样快速回顾一遍基础知识点可以一定程度的减缓焦虑，稳定情绪。我当时用两周复习了本科学过的计算机网络、数据库、操作系统。&lt;/li&gt;
&lt;li&gt;然后开始啃对应的黑皮书，在一些关键点上看深入去，因为单靠本科课本那点深度是完全不够应付面试官的。我当时计算机网络用《计算机网络：自顶向下方法(6th)》，数据库用《数据库系统概念(6th)》，操作系统用《现代操作系统(4th)》。还有其他的一些黑皮书，在我的阶段总结(5)中可以有介绍。&lt;/li&gt;
&lt;li&gt;啃完黑皮书后，理论基础应该差不多了，然后就找到对应的实现软件来研究，这个时候看起书来就相当轻松了，并且会经常有一种“哦原来是这样实现的/我靠原来在工业上是这样巧妙实现了那个理论”的感叹。计算机网络就深入看一些博客，或者针对常问的TCP/UDP协议深入去看；数据库我找了MySQL和Redis的书来看，如《Mysql InnoDB》和《Redis开发与运维》；操作系统我找了一些Linux编程的入门书来看，如《精通Linux C编程》。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、编程语言&lt;/p&gt;
&lt;p&gt;因为我5月份才开始看书，时间很紧张了，考虑到c++比较难，而java相对简单并且做实验室老板的项目一直在用，熟悉感稍微好些(相比c++自从大二之后再也没怎么用过了)，周围的同学都是java系，有问题方便交流些，所以综合考虑后就选择了java系。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先是java语法基础，这个必须吃透，没商量。我当时用的是《java编程思想》，看深入，看仔细。同时要看jdk源码，特别是hashmap那些，面试都要被问到烂了，但还是会问。&lt;/li&gt;
&lt;li&gt;当你看深入的时候，会很自然的会追究到底层原理，因此《深入理解java虚拟机》也是要一起吃透的，虚拟机是java系面试的考察重点，重中之重。&lt;/li&gt;
&lt;li&gt;基础打好之后，就要往应用方面去扩展，比如并发编程。《java并发编程实战》和《java并发编程的艺术》两本啃下来基本没问题了。&lt;/li&gt;
&lt;li&gt;另一个扩展就是恶心的SSM(spring+springMVC+mybatis)那套框架了。不过这个倒不是特别重要，这个我没时间看了，只了解个大概，但是貌似不是很影响，我遇到的都不会问很深甚至很多没问。感觉大概知道一些关键原理就行，例如AOP、IOC等。&lt;/li&gt;
&lt;li&gt;还有就是一些开源的项目，例如阿里的fastjson，还有各种知名的插件，工具，等等。这个属于加分项了，不是必备基础，我没有弄。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;四、应试重点&lt;/p&gt;
&lt;p&gt;提到重点，不得不感谢某中大巨佬，他在github开源了一个复习用的repo：&lt;a href=&#34;https://github.com/CyC2018/CS-Notes&#34;&gt;CyC2018/CS-Notes&lt;/a&gt; ，很多人在上面一起总结了很多面试的常问知识点，有针对性地进行复习，可以大大减轻复习压力。&lt;/p&gt;
&lt;p&gt;五、关于简历&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;越简单干净、布局清晰明确，越好&lt;/li&gt;
&lt;li&gt;个人介绍最好尽量写核心的技能点，除了说明自己计算机基础扎实以外，可以在面试公司之前先看对应的岗位要求，然后把自己掌握的技能有针对性地写上去。例如我面试美团网易的时候就突出熟悉JVM、熟悉Java并发编程、熟悉MySQL和Redis；而面试腾讯百度的时候就突出熟悉Linux进程间编程、熟悉TCP/UDP协议等等&lt;/li&gt;
&lt;li&gt;实习经历是非常重要的，特别如果有大厂的实习经历一定要写上去，这个是最最加分的。我没有写，因为我实验室不让出去实习，很亏很亏&lt;/li&gt;
&lt;li&gt;接下来就是项目经验，这个是第二重要的，把做过的项目按技术含量或者成果大小按从高到低顺序写上去，每个项目按“简介、负责、成果”分3点写，尽可能写简练并且突出亮点就行，不用写太详细。但是自己要不断复盘，把项目的所有细节准备清楚，因为面试官感兴趣的话会问得很细，如果自己做的项目都答不上，那么面试官就可能会怀疑这到底是不是你自己的做的项目，大大扣分&lt;/li&gt;
&lt;li&gt;面试之前要想做好自己的职业规划，最好结合目前看的书、掌握的技能点来扩展，这样会显得很有计划并且确实在执行，可以让面试官觉得你的职业规划是靠谱的，而不是凭空说大话。例如，我会跟面试官说，目前在看java并发编程和分布式的书，我打算以后往分布式架构、微服务这个方向发展，因为个人觉得这个是以后发展的大方向和趋势，然后再扯一些证明的例子，或者支撑理论，这样答下来就会让面试官觉得你确实是认真思考过的&lt;/li&gt;
&lt;li&gt;心态放好。不用紧张不用担心，就我面试过的互联网公司来说，大部分一二面的面试官其实也就比我大两三岁，都是很好说话的小哥，态度很好的，就算你一时间答不上来也会慢慢提示，一步步引导你。到了三四面，一般是部门leader，虽然有时候会比较严肃高冷，但是一般不会问很细节的像一二面的基础技术问题，而是一般会考察一些思维上的东西，例如智力题啊，场景题啊之类的开放性题目，只要多看面经总结，找到套路后一般都可以轻松应付（我感觉公司都是有自己题库的，每年问来问去都是那么些题，估计也是因为面试官没那么多精力想新题目，所以刷面经是比较有用的）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;六、资料汇总&lt;/p&gt;
&lt;p&gt;1、算法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《算法(4th)》/黑皮《数据结构与算法分析(Java语言版)》&lt;/li&gt;
&lt;li&gt;《算法导论》（学有余力并且想真正提高水平的，可以像我的大神舍友一样练习推导和证明，不过一般人都坚持不下来，例如我）&lt;/li&gt;
&lt;li&gt;《剑指Offer》&lt;/li&gt;
&lt;li&gt;《程序员代码面试指南》&lt;/li&gt;
&lt;li&gt;leetcode前200，最好前300题&lt;/li&gt;
&lt;li&gt;牛客网的《剑指Offer套题》&lt;/li&gt;
&lt;li&gt;《编程珠玑》《编程之美》我买了没看，感觉没啥用，层次太高了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2、Java基础&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《java编程思想》/《java核心技术(卷1+卷2)》&lt;/li&gt;
&lt;li&gt;《深入理解java虚拟机(2th)》&lt;/li&gt;
&lt;li&gt;《java并发编程的艺术》&lt;/li&gt;
&lt;li&gt;《java并发编程实战》&lt;/li&gt;
&lt;li&gt;部分jdk源码（主要是容器类，还有并发包中的锁，CAS，AQS，线程池）&lt;/li&gt;
&lt;li&gt;Spring+SpringMVC+MyBatis，我当时只是看博客跑个小Demo知道怎么用这套框架就算了，原理的话我只是懂个AOP和IOC的大概就没深入看了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3、计算机基础&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本科课本《计算机网络》+黑皮《计算机网络：自顶向下方法(6th)》&lt;/li&gt;
&lt;li&gt;本科课本《数据库系统概论》+黑皮《数据库系统概念(6th)》+《MySQL技术内幕：InnoDB存储引擎》+《Redis开发与运维》/《Redis设计与实现》&lt;/li&gt;
&lt;li&gt;本科课本《操作系统》+黑皮《现代操作系统(4th)》+《精通Linux C编程》&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4、应试重点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CyC2018/CS-Notes&#34;&gt;CyC2018/CS-Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jwasham/coding-interview-university&#34;&gt;jwasham/coding-interview-university&lt;/a&gt;(这个是进入google的水平，仅供参考，我也没看)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5、技能点扩展&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《Head First设计模式》&lt;/li&gt;
&lt;li&gt;《大型网站技术架构：核心原理与案例分析》(扫盲用)&lt;/li&gt;
&lt;li&gt;《轻量级Java EE企业应用实战》(我只看了讲IOC和AOP的一小部分)&lt;/li&gt;
&lt;li&gt;《深入浅出MyBatis技术原理与实战》(扫盲用)&lt;/li&gt;
&lt;li&gt;除了后台基础之外，我把我掌握的机器学习和Python当作额外技能点写了上去，感觉效果还可以，应该蛮加分的，不少面试官喜欢和我讨论这些内容&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>腾讯面经</title>
      <link>https://utopizza.github.io/posts/interview/2018-09-29-%E9%9D%A2%E7%BB%8F-%E8%85%BE%E8%AE%AF%E9%9D%A2%E7%BB%8F/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/interview/2018-09-29-%E9%9D%A2%E7%BB%8F-%E8%85%BE%E8%AE%AF%E9%9D%A2%E7%BB%8F/</guid>
      <description>&lt;p&gt;一面（2018-09-27 下午3点，约半个小时）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自我介绍中提到了我跟导师做过情感分析和兴趣点推荐的课题，面试官好像比较感兴趣中文怎么做情感分析，一直问我有没有什么思路，幸好记得一点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讲了阿里天池无人机的那个项目，问的不是很细&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讲了给实验室老板做的那个erp项目，问得也不是很细，问了些常规问题，框架啊带团队啊什么的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还问了会不会安卓，我讲了本科做过的那个安卓项目，简历上没有写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最近有没有什么学习计划，看什么书&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;去过深圳吗，愿意来深圳工作吗&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二面（2018-09-29 下午2点，约一个多小时）&lt;/p&gt;
&lt;p&gt;感觉部门老大应该是做管理的，问的技术不多，问的也不多，就常规地简单地问了下项目，没有深入问。反而给我很详细地介绍了他们团队的业务和方向，非常耐心非常nice。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>华为面经</title>
      <link>https://utopizza.github.io/posts/interview/2018-09-18-%E9%9D%A2%E7%BB%8F-%E5%8D%8E%E4%B8%BA%E9%9D%A2%E7%BB%8F/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/interview/2018-09-18-%E9%9D%A2%E7%BB%8F-%E5%8D%8E%E4%B8%BA%E9%9D%A2%E7%BB%8F/</guid>
      <description>&lt;p&gt;9月18号下午4点，学校附近的某个酒店，现场面。&lt;/p&gt;
&lt;p&gt;一面 约30分钟&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;挑个项目讲下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么特别深入研究的技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;职业规划&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;感觉面试官问得比较少，主要是我自动扩展开来讲，一直讲个不停。&lt;/p&gt;
&lt;p&gt;二面 约5分钟？？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我自我介绍都没说完，二面面官就说行，我没什么问题了，你有什么问我的。？？我愣了好久+黑人问号？？面官笑了下说，我看你一面评价挺高，我这边就不问什么问题，直接给你过了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我问了下华为云的产品和发展规划，面官很耐心介绍，态度很nice，感觉挺不错的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>百度面经</title>
      <link>https://utopizza.github.io/posts/interview/2018-09-18-%E9%9D%A2%E7%BB%8F-%E7%99%BE%E5%BA%A6%E9%9D%A2%E7%BB%8F/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/interview/2018-09-18-%E9%9D%A2%E7%BB%8F-%E7%99%BE%E5%BA%A6%E9%9D%A2%E7%BB%8F/</guid>
      <description>&lt;p&gt;一面（2018-09-13，下午5点，80分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;讲无人机项目。巨详细，从没被问这么细，还问了有没有看到前几名的方案，他们做得好的地方是在哪里，如果再让你们做一次会怎么优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O(1) 获取栈中的最大元素。答使用一个辅助栈。追问如何进一步优化，在面试官一步步引导下，想出对相同的元素进行压缩，再申请一个map来对相同的元素计数。最后要我分析了这样申请一个map的开销和原来的不压缩的开销如何权衡，我说如果是对于有大量重复的数据流，那么压缩是值得的，否则没必要，例如连续增大没有重复的数据流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对一个字符串中的单词的位置反转，要求是不能开辟新的空间，如要原地反转&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;股票买入卖出一次。两次呢？两次的没答上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何实现OOM，方法区的呢（CGLIB）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;i++是原子的吗，并发情况下有什么问题，使用volatile不能保证线程安全？都有哪些方法使他线程安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mysql的常见优化方案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让一个线程等待另一个线程怎么实现。join()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10亿个数分布在不同的机器上，如何选出 top k。答了最小堆。可能是想问mapreduce。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redis的五种基本数据类型，平时张口就来的竟然不记得set和zset了，尴尬&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么想投安全研发工程师，了解安全相关的技术吗，讲下XSS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么兴趣爱好，怎么带团队，职业规划，对工作城市有什么要求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么要问的。介绍了部门团队。最后直接说我通过了，有点惊讶，我感觉后面几个问题答得不太好&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二面（2018-09-14，下午3点，1个小时）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍，讲本科那个美国数学建模大赛，面试官小哥说挺有意思，问得比较细，讲了好久&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讲排序算法，快排&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二分查找，以及改进版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最长公共子序列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码量估计有多少，兴趣爱好，其他offer情况等待&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;介绍了下他们部门&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三面总监面（2018-09-18，下午2点，50分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;挑一个项目，讲了ERP那个。总监对我怎么带团队很感兴趣，一直讲带团队的事情&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问了一些性格啊，其他特长之类的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;职业规划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有啥要问的，详细介绍了部门团队&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>美团面经</title>
      <link>https://utopizza.github.io/posts/interview/2018-09-13-%E9%9D%A2%E7%BB%8F-%E7%BE%8E%E5%9B%A2%E9%9D%A2%E7%BB%8F/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/interview/2018-09-13-%E9%9D%A2%E7%BB%8F-%E7%BE%8E%E5%9B%A2%E9%9D%A2%E7%BB%8F/</guid>
      <description>&lt;p&gt;一面（2018-09-11上午，学校附近的丽顿酒店，约50分钟）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍，挑一个最熟悉或者最有亮点的项目讲一下。讲了阿里天池那个，估计面试官不太懂，全程在听。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面试官想挑一个后台的项目来问，看来看去挑了我给实验室老板做的那个ERP，我说了一顿后，面试官也抓不住什么点来问，就说问基础吧&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库索引都有哪些。能不能画一下B+索引的结构。很简单，画出来后，我说我再给你画出插入1到10的分裂过程吧。面试官有点懵逼，说也行。然后问了叶子结点的指针指向的是什么地址，答数据行在磁盘的地址。然后追问数据库是怎么通过这个地址去磁盘找数据的，我修正了下，答这个地址是磁盘块的地址，数据库会把整个块以及相邻的块一起读到内存（预读）。然后具体怎么去磁盘寻找块的过程我说不知道，面试官说没关系，他也忘了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问联合索引（a，b，c），where a=? and b&amp;gt;? and c=? 这样的语句为什么会失效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讲下JVM内存分块和GC策略那些，我画出来，给他展开很详细讲，他说行了行了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;熟悉的设计模式有哪些。我配合JDK的具体应用来讲。然后手画观察者模式的UML图，不太记得UML图的细节了，我画了个大概，但是把思路讲清楚了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范型的实现原理是什么。类型擦除。用范型来重载方法会怎么样（拒绝编译）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手撕两个无环链表的第一公共结点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手撕最低公共祖先&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;好像又想回到项目问，但是也没问出个啥，就问了下为啥不投算法，而是研发&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;愿不愿意来北京？他说看到我投的上海，我说北京生活压力太大，有点不敢去&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有啥要问的。我就问了是不是基础架构部，那个大名鼎鼎的美团技术博客是不是你们部门做的，吹了一波。不过我确实觉得那个博客比较厉害&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二面（一面结束后的5分钟，约50分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;挑一个认为最有亮点的项目讲，还是讲了阿里天池无人机那个。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么转后台，职业规划是什么，到目前准备到那一步了，开启吹比模式，扯了很久。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JVM分代和GC算法了解吗。我说一面讲过了。然后他说那你可以讲讲觉得比别人深入的地方，然后我详细讲了CMS和G1的四个阶段. 思想. 优缺点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;画一下观察者模式的ER图，讲一下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最近都在看哪些书，研究什么，我说并发，然后又扯了很久很久&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hadoop和Spark了解到什么程度，我说只搭建过一次，没有看到源码级别，就没问了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;看我简历上写了Mysql. Redis，让我挑一个讲。挑了Mysql，又是一顿扯。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手撕代码，给一个二维矩阵，每个元素表示地面高度，给其中一个坐标表示下雨，问最后水会流到哪些洼点（高度最低的点）。简单的二维矩阵搜索，从下雨那个点一直向比自己低的周围点扩散出去搜索，当找到一个点比四周都低的时候，它就是个洼地，加入一个全局的List&lt;!-- raw HTML omitted --&gt;即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;好像又问了一次职业规划，想做什么方向，愿意来北京不。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么要问&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三面（总监面，9月13日，约50分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍，讲无人机项目，讲在导师公司做的项目（手画）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;擅长什么方向，职业规划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单聊了下一些对技术的看法，例如分布式，架构，平台，业务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单问了下jvm分代以及GC算法，垃圾收集器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兴趣爱好，特长，团队经验，优缺点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么要问的。很详细地介绍了他们部门的情况，我表明了我是冲着他们这个技术团队去的，一直都有看他们的博客&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;hr面（总监面完约10分钟后开始，约20分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍，讲无人机项目，讲项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兴趣爱好特长&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优缺点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;怎么带团队&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;老虎. 大象. 孔雀. 考拉，选一个认为与自己性格比较接近的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么要问的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>网易面经</title>
      <link>https://utopizza.github.io/posts/interview/2018-08-24-%E9%9D%A2%E7%BB%8F-%E7%BD%91%E6%98%93%E9%9D%A2%E7%BB%8F/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/interview/2018-08-24-%E9%9D%A2%E7%BB%8F-%E7%BD%91%E6%98%93%E9%9D%A2%E7%BB%8F/</guid>
      <description>&lt;p&gt;网易云音乐，网易杭州总部现场面试，8月24日中午到下午。&lt;/p&gt;
&lt;p&gt;一面(年轻小哥，40分钟)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;讲一下索引原理，B+索引，手画插入1到10的过程&lt;/li&gt;
&lt;li&gt;场景题，修改歌单排序后保存到数据库，怎么实现最小开销。提示是最长公共子序列，然后手撕代码&lt;/li&gt;
&lt;li&gt;算法题，两个字符串最小编辑距离，手撕代码&lt;/li&gt;
&lt;li&gt;操作系统基础:进程调度，死锁条件，死锁预防，检测，解除，避免&lt;/li&gt;
&lt;li&gt;redis有序集合底层实现原理，跳跃表怎么查找一个数&lt;/li&gt;
&lt;li&gt;看了下简历，问为什么不继续做机器学习而是投java研发，以后想做哪方面&lt;/li&gt;
&lt;li&gt;有什么要问。我问了歌单保存那题跟最长公共子序列有啥关系，具体怎么实现，感觉小哥也没解释得很清楚，说是他们有一定的策略来实现什么的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二面(小组leader，谈笑风生1个多小时)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自我介绍，顺带介绍了下在导师公司给导师做的项目&lt;/li&gt;
&lt;li&gt;mysql，redis用过没，在项目里怎么用。答没，是自己看的书，了解过一些。然后扯了一些使用方式。&lt;/li&gt;
&lt;li&gt;讲redis的时候扯到了缓存和分布式缓存。问了缓存淘汰策略。然后又问我对分布式了解都有哪些，刚好前一天看了，就说了分布式锁，分布式事务。然后问我怎么理解CAP，具体有哪些权衡C和A的案例。估计我扯的还算沾边，面试官来了兴致，开始进入侃侃而谈状态，大谈分布式理论，思想。&lt;/li&gt;
&lt;li&gt;不记得怎么就扯到了锁(估计是说了redis分布式锁)，问了AQS实现方式。然后他问我有没有了解过“无锁队列”，然后他又是一顿介绍。感觉已经不是在面试了，纯属聊天。&lt;/li&gt;
&lt;li&gt;又扯回到mysql，问我了解到什么程度，我就把所有知道的都说了下，例如innodb和mysian对比，innodb的mvcc，索引，幻读，next-key lock，让我手画实现锁住一个范围的原理。场景题:有两个查询，select &amp;hellip; where a=？ and b =? ，和 select &amp;hellip; where a=? and b&amp;gt;? 如何分别建立索引，为什么，有什么区别。乱扯了一通，然后他也没给答案。&lt;/li&gt;
&lt;li&gt;我又讲了下mysql事务。问了实现原理。讲了redo和undo，然后问为什么要这样做。我说扯了一通，他说我没说到点上，关键是因为写缓冲的存在，断电会丢失。&lt;/li&gt;
&lt;li&gt;知道哪些设计模式。装饰者和模板、代理有什么区别。jdk里面都有哪些模式。&lt;/li&gt;
&lt;li&gt;solid原则&lt;/li&gt;
&lt;li&gt;未来几年想做哪方面，技术还是业务，有什么职业规划&lt;/li&gt;
&lt;li&gt;有什么要问(中途他接了个电话忙了一会儿)，我问了个技术问题，然后他又是一顿侃侃而谈。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;hr面(40分钟左右)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li&gt;总结自己优缺点，性格&lt;/li&gt;
&lt;li&gt;最自豪或者最有成就感的一件事&lt;/li&gt;
&lt;li&gt;有什么别的特长，说了弹吉他，然后聊了好久弹吉他的事，说了毕业晚会表演自弹自唱&lt;/li&gt;
&lt;li&gt;在导师公司怎么带团队的，有什么经验总结&lt;/li&gt;
&lt;li&gt;怎么看待云音乐，和qq音乐对比呢(送分题，反正狂吹就是了)&lt;/li&gt;
&lt;li&gt;有什么梦想&lt;/li&gt;
&lt;li&gt;平常有没有关注一些其他领域或者什么资讯，说了中兴事件和中国芯，确实是我一直在关注的&lt;/li&gt;
&lt;li&gt;都有哪些offer了，为什么不投BAT，又是送分题&lt;/li&gt;
&lt;li&gt;职业规划&lt;/li&gt;
&lt;li&gt;有什么要问的，问了最后会怎么定岗位&lt;/li&gt;
&lt;li&gt;让我先不要走，等5分钟，可能还有一面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总监面(不愧大佬，高冷，短裤拖鞋，霸气侧漏，40分钟)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li&gt;怎么理解互联网这个行业&lt;/li&gt;
&lt;li&gt;又是索引。问了一天的索引。问主键索引和唯一索引的原理区别，什么情况下使用，性能上有何区别。没答上。&lt;/li&gt;
&lt;li&gt;jvm怎么垃圾回收。c++学过吧，你觉得它应该怎么实现类似jvm垃圾回收的功能？你怎么知道一个对象在什么时候是否该被回收？没答上。&lt;/li&gt;
&lt;li&gt;你觉得你有什么特点或者特长可以帮助你成功，举个事例证明&lt;/li&gt;
&lt;li&gt;职业规划，想做什么&lt;/li&gt;
&lt;li&gt;有什么问&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>大疆面经</title>
      <link>https://utopizza.github.io/posts/interview/2018-08-16-%E9%9D%A2%E7%BB%8F-%E5%A4%A7%E7%96%86%E9%9D%A2%E7%BB%8F/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/interview/2018-08-16-%E9%9D%A2%E7%BB%8F-%E5%A4%A7%E7%96%86%E9%9D%A2%E7%BB%8F/</guid>
      <description>&lt;p&gt;一面（2018-07-24 下午三点半，电话面约20分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;介绍现在做的项目，因为在自我介绍中提到了在导师公司做的ERP。我简单介绍了一下Opentaps，以及我负责的采购模块的工作流后，就转移话题到其他项目上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;介绍阿里天池的无人机大赛，还有本科搞的美赛，讲一下遇到什么问题，当时怎么解决的，取得了什么成绩。基本是我自己在说，面试官很少打断和提问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么投的java研发，但是简历上大部分是数据分析类的比赛和项目。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有没有用过hadoop. spark处理过大批量数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;愿不愿意转Python，然后面试官介绍了一下他们部门的业务，主python，也有部分java&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;感觉都答得挺不错，面试官也比较认可吧，面完过了十几分钟查了下，状态为一面通过，等待hr联系安排二面&lt;/p&gt;
&lt;p&gt;二面（2018-07-27 下午三点半，一直等到五点，视频面约20分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于再次给自己挖坑，自我介绍的时候提到了在导师公司做ERP，面试官就开始问ERP。简单介绍了一下采购工作流，面试官就一直问有什么难点，扯了好久，最终结论是面试管认为这不算难点，只算业务繁琐，工作量的问题而已&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问了一下工业AI那个比赛，答得不好，说也没什么难点，只是常规的数据预处理+使用常用模型进行预测，就得到比较好的成绩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么要问的，我一看时间才过了10多分钟，感觉凉了一半，就赶紧扯了下前一位面试官让我转python的事，然后说了一下职业规划，然后让面试官提点建议，面试官很耐心很nice，简单介绍了一下部门业务，硬是被我扯着聊了10分钟后结束&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;面完感觉是凉了， 吃完饭回来查了下，状态变为二面通过，但是没有“等待hr联系三面”，不知道什么情况&lt;/p&gt;
&lt;p&gt;三. 终面（2018-08-16 下午三点半，学校现场面，约20分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍。问在导师公司做什么&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;看着简历问，让讲了无人机，还有ERP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;职业规划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;介绍了他部门，然后跟我解释了半天，做业务也可以技术积累&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有没有其他offer&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>顺丰面经</title>
      <link>https://utopizza.github.io/posts/interview/2018-08-11-%E9%9D%A2%E7%BB%8F-%E9%A1%BA%E4%B8%B0%E9%9D%A2%E7%BB%8F/</link>
      <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/interview/2018-08-11-%E9%9D%A2%E7%BB%8F-%E9%A1%BA%E4%B8%B0%E9%9D%A2%E7%BB%8F/</guid>
      <description>&lt;p&gt;一面（2018-08-02 晚上7点半，视频面，约30分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讲一下在导师公司做的项目，表示第一次听到opentaps，介绍一下。遇到什么难点，怎么解决&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讲一下无人机路线规划那个比赛&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;职业规划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么要问的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二面（2018-08-11下午两点半，视频面，约20分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;介绍一下在导师公司做的项目，自己负责什么&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;怎么带领团队，怎么沟通&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对导师的公司怎么看&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;了解哪些机器学习算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么要问的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>京东面经</title>
      <link>https://utopizza.github.io/posts/interview/2018-08-10-%E9%9D%A2%E7%BB%8F-%E4%BA%AC%E4%B8%9C%E9%9D%A2%E7%BB%8F/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/interview/2018-08-10-%E9%9D%A2%E7%BB%8F-%E4%BA%AC%E4%B8%9C%E9%9D%A2%E7%BB%8F/</guid>
      <description>&lt;p&gt;一面（2018-08-01 晚上8点，50分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讲一下在导师公司做的项目，有什么技术难点。说了数据库的用版本控制实现一个乐观锁。然后问了下工业AI比赛，简单讲了下思路（分析工序间的联系，筛选数据，然后预测）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jvm：内存模型、垃圾回收算法、垃圾收集器（没答好）；有什么类加载器（没答好）、双亲委派模型、有什么优缺点（没答好）；jvm如何调优（不会）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java：HashMap的内部机制、初始大小与扩容、为什么选择这个数值（没答好，给了答案是保持2的幂作性能开销小？）、为什么要用拉链法（我答的是为了解决碰撞问题。如果用线性探测开放地址法，每次删除一个元素，后面的所有碰撞的元素全部都要重新散列，代价非常大）、是否线程安全、哪个是线程安全、HashTable和ConcurrentHashMap如何实现线程安全、ConcurrentHashMap的内部机制、分段锁的思想。HashMap1.7之后有什么变化？红黑树。为什么？加快查询速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式了解吗，场景题：假设有100台服务器，争抢一个任务，应该怎么做？不太明白什么意思，反问是什么任务，是不是客户端请求，然后把反向代理和均衡负载说了下，面试官说不是，然后我又讲了paxos协议，他说也不是，实在想不出来，他说是用锁。。？没细说&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring：ioc，aop，能有多详细讲多详细&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;springMVC如何分析请求，然后如何交给handler处理，能有多详细讲多详细（不会）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mybatis怎么用（没答好），除了mapper还有什么（不会），对比hibernate有什么优点（不会）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redis讲一下，有什么应用场景（答得不好，答了说存session，面试官说不是，然后我说缓存？面试官好像没说啥），与mencache对比有什么优缺点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;场景题，有一些的jvm参数的历史数据（例如gc次数，gc时间等等），如何预测jvm是否会发生故障（特别是往年的京东618时候的jvm参数），说思路。我想了好久，面试官一直降低难度甚至换题目，我实在想不出，就随便后来说了下，先分析出都有哪些jvm的影响因素，然后用历史数据训练得到每个因素的权重，然后就可以使用这些权重来预测是否发生故障。面试官说这不就是我刚开始想问的嘛，笑了笑说让等二面&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二面（2018-08-02下午五点半，约10分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单讲一下项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么框架使用最熟悉，会不会HQL&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4、你是如何分配机器学习和java研发的精力&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;p&gt;如何利用机器学习预测jvm的故障，和一面的问题差不多，我乱扯了一些&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;说一下你最强势或者突出的技术特长，（我直接承认框架使用比较少，因为接触的项目不多，但是我对jdk、jvm、计算机基础比较扎实，也比较感兴趣，还以为他要开始狂问，但结果没问）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能不能来实习（他表示，不能来实习就很难办了）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单介绍了他的部门&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;感觉像是hr？没怎么问技术，听声音好像年纪比一面的面试官应该大不少，还问华科是不是华工。。&lt;/p&gt;
&lt;p&gt;三面（8月8日下午6点，约21分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;n个已排序队列，选出队列中最大的top k个数。显然先对每个队列取top k，然后再选出其中的top k。说了用小根堆，(nk)logk。面试官问还有没有更快的，没答上。后来和同学讨论了下，最好应该分情况答，如果n远大于k，应该用归并，复杂度是 klog(n)。如果k远大于n，则应该用小根堆。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讲一下阿里天池无人机的那个比赛，是怎么做的。对深度学习，图像处理有没有了解，答没有。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讲一下职业规划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;四面（8月9日下午7点，感觉也不算面试，就是做了道题）&lt;/p&gt;
&lt;p&gt;面试官给了链接，一道自他己出的小题目，对一个文件的数据进行求和统计然后排序输出，大概十五分钟写完，然后面试官不见了，不知道啥情况，等了一个多小时后我自己下线了&lt;/p&gt;
&lt;p&gt;HR面（8月10日中午2点，约7分钟）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简单介绍下项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一边看我简历一边说，保研成绩啊，比赛名次啊，一直在夸我都不好意思了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;家在哪里，北京有没有亲戚&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对京东了解吗？我笑了笑说在中国还有谁不了解京东的吗，然后她也笑了。然后我就说买东西基本都是京东买什么的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;说大概一周之后会答复我，走后面的流程什么的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么要问的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>阶段总结(5)</title>
      <link>https://utopizza.github.io/posts/summary/2018-05-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%935/</link>
      <pubDate>Wed, 30 May 2018 18:03:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/summary/2018-05-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%935/</guid>
      <description>&lt;p&gt;5月小结。月初购入了几本黑皮书，正式开始复习计算机基础知识：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《计算机网络：自顶向下方法（6th）》：看完了应用层、运输层、网络层、网络安全，有时间再补充无线网络、链路层、物理层&lt;/li&gt;
&lt;li&gt;《数据库系统概念（6th）》：看完了基本SQL语法、基本理论（范式）、索引，还需要看查询优化、事务、并发控制（锁）&lt;/li&gt;
&lt;li&gt;《现代操作系统（4th）》：看完了进程线程、内存管理、文件管理，还需要看设备管理，特别是I/O&lt;/li&gt;
&lt;li&gt;《Java编程思想（4th）》：重点看了多态、泛型、反射、容器、并发，还需要看I/O&lt;/li&gt;
&lt;li&gt;《算法导论（3th）》：当作标准风格代码来偶尔复习，重点是栈、队列、排序、查找、堆、树、图&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本月对以上几本书的部分重要章节快速温习了一遍，另外粗略过了一遍：&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;《深入理解Java虚拟机（2th）》：重点看了GC、类加载、编译优化、内存模型、并发控制，需要补充字节码和类文件结构&lt;/li&gt;
&lt;li&gt;《Java并发编程》：重点看了一些常用关键字和API，需要深入理解具体实现细节&lt;/li&gt;
&lt;li&gt;《Effective Java（2th）》：粗略看了一遍，看得懂的不多&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本月其他时间主要在leetcode练习基本编程功，5月8号重新注册了一个leetcode账号，从第一题开始重新练习，到月底一共做了约120道题，保证平均每天8道题左右的练习量。果然像网上说的那样，第二次做的时候，对一些见过的题目，或者大部分类似的题型，都能很快地有思路，但是目前还有很多细节不能优雅地处理好，另外太过依赖test case来调bug。往后需要争取直接一次性写出bug free的代码。目前能这样做到的比例很低，需要加强。&lt;/p&gt;
&lt;p&gt;接下来的6月份计划：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始看面经，总结常见面试问题&lt;/li&gt;
&lt;li&gt;有针对性地回头复习5月份看的内容，加强记忆，处理掉之前理解模糊的知识点&lt;/li&gt;
&lt;li&gt;继续加强编程的练习，基础功不用解释&lt;/li&gt;
&lt;li&gt;跟着极客时间的老师的课程内容，梳理并构建一个比较完整的JAVA知识体系&lt;/li&gt;
&lt;li&gt;有时间再补充一个面试用的小项目、hadoop和spark等大数据相关书籍、redis非关系型数据库、大型分布式系统的架构？&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>动态规划题(2)</title>
      <link>https://utopizza.github.io/posts/algorithm/2018-05-01-%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%982/</link>
      <pubDate>Tue, 01 May 2018 22:03:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2018-05-01-%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%982/</guid>
      <description>&lt;p&gt;1、最长递增子序列（返回长度）&lt;/p&gt;
&lt;p&gt;给定数组 arr，返回它的最长递增子序列的长度。&lt;/p&gt;
&lt;p&gt;思路：显然对于数组的任何一个子序列，它必定以数组的某个元素结尾，因此可用 dp[i] 表示以 arr[i] 结尾的最长递增子序列的长度。那它是如何得来的呢？显然它就是在前面 i-1 个最长递增子序列后面追加或者不追加 arr[i] 而得到的 i-1 个新的递增子序列中，最长的那个。如果 arr[i] 大于 arr[j]，那么 arr[i] 就可以追加到以 arr[j] 结尾的最长递增子序列。&lt;/p&gt;
&lt;p&gt;边界条件：如果 arr[i] 比它前面的 i-1 个元素都小，那么以 arr[i] 结尾的最长递增子序列就是它自己了，此时 dp[i]=1。&lt;/p&gt;
&lt;p&gt;$$
dp[i]=\max{ dp[j]+1 } \text{,} \quad (0 \leq j &amp;lt; i , \text{,} , arr[j]&amp;lt;arr[i])
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;private static int LIS(int[] arr) {
    if (arr == null || arr.length == 0) return 0;
    int[] dp = new int[arr.length];
    for (int i = 0; i &amp;lt; arr.length; i++) {
        dp[i] = 1;
        for (int j = 0; j &amp;lt; i; j++) {
            if (arr[i] &amp;gt; arr[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }
    int maxLen = 0;
    for (int i = 0; i &amp;lt; dp.length; i++) maxLen = Math.max(maxLen, dp[i]);
    return maxLen;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、最长递增子序列（返回序列）&lt;/p&gt;
&lt;p&gt;给定数组 arr，返回它的最长递增子序列。&lt;/p&gt;
&lt;p&gt;思路：先按上面所述求出 dp 数组，然后再根据 dp 数组恢复出最长的子序列。恢复过程很简单：先找到 dp 中最大的元素的位置，假设是 i ，那么说明数组 arr 的最大递增序列以 arr[i] 结尾，也就是说它是所求序列的最后一个元素。然后从 arr[i] 开始往前扫描，如果遇到一个元素满足 dp[j]=d[i]-1 并且 arr[j] 小于 arr[i]，那么 arr[j] 便是倒数第二个元素。依次类推即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;private static int[] LIS2(int[] arr, int[] dp) {
    int maxLen = 0;
    int lastIndex = 0;
    for (int i = 0; i &amp;lt; dp.length; i++) {
        if (dp[i] &amp;gt; maxLen) {
            maxLen = dp[i];
            lastIndex = i;
        }
    }

    int[] LIS = new int[maxLen];
    int LISIndex = maxLen - 1;
    LIS[LISIndex--] = arr[lastIndex];
    for (int j = lastIndex; j &amp;gt;= 0; j--) {
        if (arr[j] &amp;lt; arr[lastIndex] &amp;amp;&amp;amp; dp[j] == dp[lastIndex] - 1) {
            LIS[LISIndex--] = arr[j];
            lastIndex = j;
        }
    }

    return LIS;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、最长公共子序列（返回长度）&lt;/p&gt;
&lt;p&gt;给定两个数组，返回两个数组的最长公共子序列的长度。&lt;/p&gt;
&lt;p&gt;思路：用 dp[i][j] 表示 X[0&amp;hellip;i] 与 Y[0&amp;hellip;j] 的最长公共子序列长度。那么 dp[i][j] 是如何得到的？我们只需观察两个数组的最后一个元素 X[i] 和 Y[j]。如果 X[i] 和 Y[j] 相等，那么说明它就是 dp[i][j] 对应的公共子序列的最后一个元素。此时 dp[i][j] 由 dp[i-1][j-1]+1 得到。如果不相等，说明这个元素不是公共子序列的最后一个元素。那么此时 dp[i][j] 要么等于 dp[i-1][j]，要么等于 dp[i][j-1]。&lt;/p&gt;
&lt;p&gt;边界：注意dp[0][0]，dp[i][0] 和 dp[0][j]。&lt;/p&gt;
&lt;p&gt;$$
dp[i][j]=
\begin{cases}
dp[i-1][j-1]+1，&amp;amp; \text{if $x_{i}=y_{j}$} \&lt;br&gt;
max{dp[i-1][j], , dp[i][j-1]}，&amp;amp; \text{if $x_{i} \neq y_{j}$}
\end{cases}
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;private static int LCS(int[] X, int[] Y) {
    if (X == null || X.length == 0 || Y == null || Y.length == 0) return 0;
    int[][] dp = new int[X.length][Y.length];
    if (X[0] == Y[0]) dp[0][0] = 1;
    for (int i = 1; i &amp;lt; X.length; i++) dp[i][0] = Math.max(X[i] == Y[0] ? 1 : 0, dp[i - 1][0]);
    for (int j = 1; j &amp;lt; Y.length; j++) dp[0][j] = Math.max(X[0] == Y[j] ? 1 : 0, dp[0][j - 1]);
    for (int i = 1; i &amp;lt; X.length; i++) {
        for (int j = 1; j &amp;lt; Y.length; j++) {
            if (X[i] == Y[j]) dp[i][j] = dp[i - 1][j - 1] + 1;
            else dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
        }
    }
    return dp[X.length - 1][Y.length - 1];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、最长公共子序列（返回序列）&lt;/p&gt;
&lt;p&gt;给定两个数组，返回两个数组的最长公共子序列。&lt;/p&gt;
&lt;p&gt;思路：想按上题求出 dp 数组，然后根据它来恢复序列。思路很简答，根据上面的思路倒推回去即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;private static int[] LCS2(int[] X, int[] Y, int[][] dp) {
    int len = dp[X.length - 1][Y.length - 1];
    int[] lsc = new int[len];

    int m = X.length - 1;
    int n = Y.length - 1;
    int index = len - 1;
    while (index &amp;gt;= 0) {
        if (n &amp;gt; 0 &amp;amp;&amp;amp; dp[m][n] == dp[m][n - 1]) n--;
        else if (m &amp;gt; 0 &amp;amp;&amp;amp; dp[m][n] == dp[m - 1][n]) m--;
        else { // X[m]==Y[n]
            lsc[index--] = X[m];
            m--;
            n--;
        }
    }

    return lsc;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5、最长公共子数组/子串&lt;/p&gt;
&lt;p&gt;给定两个数组，返回最长公共子数组。&lt;/p&gt;
&lt;p&gt;思路：思路类似公共子序列，但是因为子数组/子串必须是元素连续的，因此略有不同。同样构造 dp 数组，dp[i][j] 表示以 X[i] 和 Y[j] 结尾的最长公共子数组/子串的长度。如果这两个元素不相等，那么 dp[i][j]=0，如果相等则 dp[i][j]=dp[i-1][j-1]+1。&lt;/p&gt;
&lt;p&gt;边界：dp[0][0]，dp[i][0]，dp[0][j]。&lt;/p&gt;
&lt;p&gt;$$
dp[i][j]=
\begin{cases}
dp[i-1][j-1]+1，&amp;amp; \text{if $x_{i}=y_{j}$} \&lt;br&gt;
0，&amp;amp; \text{if $x_{i} \neq y_{j}$}
\end{cases}
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;private static int[][] LCSA(int[] X, int[] Y) {
    if (X == null || Y == null || X.length == 0 || Y.length == 0) return null;
    int[][] dp = new int[X.length][Y.length];
    if (X[0] == Y[0]) dp[0][0] = 1;
    for (int i = 0; i &amp;lt; X.length; i++) dp[i][0] = X[i] == Y[0] ? 1 : 0;
    for (int j = 0; j &amp;lt; Y.length; j++) dp[0][j] = X[0] == Y[j] ? 1 : 0;
    for (int i = 1; i &amp;lt; X.length; i++) {
        for (int j = 1; j &amp;lt; Y.length; j++) {
            if (X[i] == Y[j]) dp[i][j] = dp[i - 1][j - 1] + 1;
            else dp[i][j] = 0;
        }
    }
    return dp;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在根据 dp 数组来恢复出公共子数组/子串。由于 dp[i][j] 表示的是以 X[i] 和 Y[j] 结尾的最长公共子数组/子串，只有当 X[i] 和 Y[j] 相等时才会增长 dp[i][j]。因此可以看到 dp 数组必定是沿着右下方增长的。只要遍历 dp 找到最大的元素 dp[m][n]，其值即为最长公共子数组/子串的长度，并且该子数组/子串以 X[m] 或者 Y[n] 结尾。直接从 X 或者 Y 里面截取即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;private static int[] LCSA2(int[] X, int[] Y, int[][] dp) {
    int maxlen = 0;
    int lastIndex = 0;
    for (int i = 0; i &amp;lt; X.length; i++) {
        for (int j = 0; j &amp;lt; Y.length; j++) {
            if (dp[i][j] &amp;gt; maxlen) {
                lastIndex = i;
                maxlen = dp[i][j];
            }
        }
    }

    int[] lcsa = new int[maxlen];
    int index = lastIndex;
    for (int i = maxlen - 1; i &amp;gt;= 0; i--) {
        lcsa[i] = X[index--];
    }
    return lcsa;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>动态规划题(1)</title>
      <link>https://utopizza.github.io/posts/algorithm/2018-04-29-%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%981/</link>
      <pubDate>Sun, 29 Apr 2018 20:03:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2018-04-29-%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%981/</guid>
      <description>&lt;p&gt;1、矩阵的最小路径和&lt;/p&gt;
&lt;p&gt;给定一个矩阵 m ，从左上角开始，每次只能向右或者向下走，最后到达右下角的位置，定义路径上所有的数字之和为路径和。求所有路径中最小路径和。&lt;/p&gt;
&lt;p&gt;思路：因为题目规定了每次只能向右走一步或者向下走一步，因此每一个位置的上一步只能是来自左边一个位置或者上边一个位置。那么走到某个位置的最小路径，只能是左边位置路径和与上边位置路径和中最小的那个，加上本位置的数字。&lt;/p&gt;
&lt;p&gt;考虑边界条件：第一行的所有位置只能从左边走过来，第一列的所有位置只能从上面走下来。&lt;/p&gt;
&lt;p&gt;用 $dp[i][j]$ 表示第 $i$ 行第 $j$ 列位置上的最小路径和，则&lt;/p&gt;
&lt;p&gt;$$
dp[i][j]=min{dp[i][j-1], dp[i-1][j]}+m[i][j]
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;private static int minPath(int[][] m) {
    if (m == null || m.length == 0 || m[0].length == 0) return 0;
    int row = m.length;
    int col = m[0].length;
    int[][] dp = new int[row][col];
    dp[0][0] = m[0][0];
    for (int i = 1; i &amp;lt; row; i++) dp[i][0] = dp[i - 1][0] + m[i][0];
    for (int j = 1; j &amp;lt; col; j++) dp[0][j] = dp[0][j - 1] + m[0][j];
    for (int i = 1; i &amp;lt; row; i++) {
        for (int j = 1; j &amp;lt; col; j++) {
            dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + m[i][j];
        }
    }
    return dp[row - 1][col - 1];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、硬币找零——最少硬币数（硬币数量无限）&lt;/p&gt;
&lt;p&gt;给定数组 coins，其元素均为正整数且不重复。每个元素代表一种面值的硬币。再给定一个换零的目标正整数 target，求用 coins 进行找零的最少硬币数。每种面值的硬币可以多次使用。&lt;/p&gt;
&lt;p&gt;思路：因为题目规定每种面值的硬币可以无限重复使用，因此在找零的过程中，每一步都可以拿起 coins 数组中任意一个硬币，即每一步都有 coins.length 种选择。假设现在手上得到找零目标为 target 的最优找零方案。那么现在倒退一步来看，在拿起某个硬币 coins[j] 而得到 target 之前，手上的方案 target-coins[j] 必定也是最优的（可用算法导论的剪切-粘贴法证明）。如前面所述，每一步都有 coins.length 种选择，那么只需找出这些选择中最优的方案即可。即对每一个目标 i，只需搜索目标为 i-coins[j] 的所有方案并取最优的方案加 1 即可。&lt;/p&gt;
&lt;p&gt;考虑边界条件：找零目标为 0 时的最少硬币数当然是 0。另外在遍历 coins 数组时，需要注意数组越界问题，即如果某个硬币的面值比要找零的目标还大的情况下，需要跳过这种情况。可通过先对 coins 数组进行排序来减少每一步的搜索空间。&lt;/p&gt;
&lt;p&gt;设 dp[i] 表示找零目标为 i 的最少硬币数，则&lt;/p&gt;
&lt;p&gt;$$
dp[i]=\min_{1 \leq j \leq coins.length} dp[i-coins[j]]+1
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;private static int minCoins(int[] coins, int target) {
    if (coins == null || coins.length == 0 || target &amp;lt;= 0) return 0;
    int[] dp = new int[target + 1];
    dp[0] = 0;
    int max = Integer.MAX_VALUE; 
    Arrays.sort(coins); // let &amp;#34;coins[j]&amp;lt;=i&amp;#34; to skip some useless solutions
    for (int i = 1; i &amp;lt;= target; i++) {
        dp[i] = max; 
        for (int j = 0; j &amp;lt; coins.length &amp;amp;&amp;amp; coins[j] &amp;lt;= i; j++) {
            if (dp[i - coins[j]] != max) dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);
        }
    }
    return dp[target] == max ? 0 : dp[target];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、硬币找零——最少硬币数（硬币数量有限）&lt;/p&gt;
&lt;p&gt;给定数组 coins，其元素均为正整数，有可能重复。每个元素代表一种面值的硬币。再给定一个换零的目标正整数 target，求用 coins 进行找零的最少硬币数。每个硬币只能使用一次。&lt;/p&gt;
&lt;p&gt;思路：由于每个硬币只能用一次，所以不但需要记录每一步找零的目标，还需要记录用到了 coins 中哪些硬币，因此需要使用二位数组 dp[i][j]。dp[i][j] 表示使用 coins[0&amp;hellip;i] 中的某些硬币来组成找零目标 j 的最少硬币数。主体思路和上一题差不多，只是这里不能“在每一步任意选取 coins.length 种硬币”了，而只能“要么用第 i 个硬币，要么不用”。假设现在手上已有使用前 i 个硬币得到找零目标为 j 的最优方案 dp[i][j]，那么它是如何得到的？同样倒推回去，它的前一步是：如果这一步使用了第 i 枚硬币 coins[i]，那么在使用这枚硬币前，手上的方案 dp[i-1][j-coins[i]] 必定也是一个最优的方案，此时使用这枚硬币后得到 dp[i][j]=dp[i-1][j-coins[i]]+1；如果这一步不使用 coins[i]，那么前一步手上的最优方案是 dp[i-1][j]，因为不使用这枚硬币，所以 dp[i][j]=dp[i-1][j]+0。最后 dp[i][j] 的最优解即为这两种情况的最小值。&lt;/p&gt;
&lt;p&gt;边界条件：找零目标为 0 时最少硬币数为 0。搜索 coins 数组时同样要考虑硬币面值是否大于找零目标。如果小于找零目标，就按照上面的去两种方案中的最小值。如果大于找零目标，说明这个硬币永不上来找零，但是它的硬币数并不是0，而是直接等于不用这个硬币的方案，即 dp[i-1][j]。&lt;/p&gt;
&lt;p&gt;$$
dp[i][j]=\min{dp[i-1][j-coins[i]]+1, \quad dp[i-1][j]}
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;private static int minCoinsLimit(int[] coins, int target) {
        if (coins.length == 0 || target &amp;lt;= 0) return 0;
        int[][] dp = new int[coins.length][target + 1];
        int max = Integer.MAX_VALUE;

        for (int j = 1; j &amp;lt;= target; j++) dp[0][j] = max;
        if (target &amp;gt;= coins[0]) dp[0][coins[0]] = 1;

        for (int i = 1; i &amp;lt; dp.length; i++) {
            for (int j = 1; j &amp;lt;= target; j++) {
                if (j - coins[i] &amp;gt;= 0)
                    if (dp[i - 1][j - coins[i]] == max) dp[i][j] = dp[i - 1][j];
                    else dp[i][j] = Math.min(dp[i - 1][j - coins[i]] + 1, dp[i - 1][j]);
                else
                    dp[i][j] = max;
            }
        }
        return dp[coins.length - 1][target] == max ? 0 : dp[coins.length - 1][target];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、硬币找零——找零方法数（硬币数量无限）&lt;/p&gt;
&lt;p&gt;给定数组 coins， 其中所有的值均为正整数且不重复，每个值代表一种面值的硬币。现给定找零目标 target，规定每种硬币可以使用无数次，求一共有多少种找零方法。&lt;/p&gt;
&lt;p&gt;思路：思路很简单，用 dp[i][j] 表示使用硬币 coins[0&amp;hellip;i] 来组成找零目标 j 的方法数。同样倒回去想，dp[i][j]是怎么来的呢？显然是由 dp[i-1][x] 得来的。由于硬币数量无限，所以对第 i 种硬币，可以使用 0 到 K 个（$ K * coins[i] \leq j $）。因此 dp[i][j] 等于 dp[i-1][j-0&lt;em&gt;coins[i]]、 dp[i-1][j-1&lt;/em&gt;coins[i]]、dp[i-1][j-2&lt;em&gt;coins[i]]、&amp;hellip;、dp[i-1][j-K&lt;/em&gt;coins[i]] 之和。&lt;/p&gt;
&lt;p&gt;$$
dp[i][j]=\sum_{0\leq k \leq K} dp[i-1][j-k*coins[i]]
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;private static int coins(int[] coins, int target) {
    if (coins == null || coins.length == 0 || target &amp;lt;= 0) return 0;
    int[][] dp = new int[coins.length][target + 1];
    for (int i = 0; i &amp;lt; coins.length; i++) dp[i][0] = 1;
    for (int j = 0; j * coins[0] &amp;lt;= target; j++) dp[0][j * coins[0]] = 1;
    for (int j = 1; j &amp;lt;= target; j++) {
        for (int i = 1; i &amp;lt; coins.length; i++) {
            int sum = 0;
            for (int k = 0; k * coins[i] &amp;lt;= j; k++) {
                sum += dp[i - 1][j - k * coins[i]];
            }
            dp[i][j] = sum;
        }
    }
    return dp[coins.length - 1][target];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里还可以进一步优化，把最里面那层求累加和的 for 循环去掉：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
dp[i][j]
&amp;amp; =\sum_{0\leq k \leq K} dp[i-1][j-k*coins[i]] \&lt;br&gt;
&amp;amp; =dp[i-1][j]+\sum_{1\leq k \leq K} dp[i-1][j-k*coins[i]] \&lt;br&gt;
&amp;amp; =dp[i-1][j]+dp[i][j-coins[i]]
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;想一下为什么？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>阶段总结(4)</title>
      <link>https://utopizza.github.io/posts/summary/2018-04-28-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%934/</link>
      <pubDate>Sat, 28 Apr 2018 10:48:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/summary/2018-04-28-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%934/</guid>
      <description>&lt;p&gt;快到五一了，抽空稍微总结一下4月份的情况。&lt;/p&gt;
&lt;p&gt;从3月底到4月15号左右，一直在赶项目和改Bug，还有找老师验收。因为同届的专硕要回去学校写论文和答辩，准备毕业了。项目一直各种Bug，各种改，一直拖到了15号左右才正式全部验收完成。总算解放了，这个项目业务逻辑真的太复杂，一直占用了我巨量的时间，以至于我3月份和4月份基本没有自己的时间来准备实习招聘的面试，错过了很多机会。上一次阶段总结制定的计划基本没有时间推进，书基本没看，进度落下了很多。眼睁睁看着舍友们同学们各种收割大厂offer，压力很大，心里很不是滋味。&lt;/p&gt;
&lt;p&gt;从4月15号开始，我从项目中解放出来，开始看书。我根据目前收集到的消息，综合各方面考虑，决定先打好基础，考虑 Java 研发工程师的方向，不再死磕算法工程师的岗位。原因有以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从长远来看，感觉机器学习、深度学习有点过度泡沫的迹象了。资本和企业都在疯狂砸钱招算法工程师做研究，但是真正把这些高级算法落地、实现盈收的企业的很少，更别说作为主要收入了。可以设想等这波热潮过去，资本撤离之后，还会有多少企业养得起这么多高薪而且不一定能为企业挣钱的算法工程师。&lt;/li&gt;
&lt;li&gt;从就业情况来看，随着涌进来的人越来越多，竞争自然越来越激烈，门槛自然越来越高。据资料显示，这两年算法岗的要求比前几年高了很多。牛客网上很多这样的例子，前些年的学长学姐没有比赛没有项目没有论文，能力也不是很强，就靠刷几本书一些公开课视频就可以拿大厂的算法岗。然而这两年尤其是今年，很多天池大赛拿到top名次、有深度学习项目经历、有顶会论文、实力很强的同学都觉得非常难进大厂的算法岗，甚至有的同学抱怨连实习都找不到。&lt;/li&gt;
&lt;li&gt;从自身角度来看，我应该属于比较劣势的情况。上述的top名次、项目、论文我都没有，没有十分核心的竞争力。只有两个top20左右的天池大赛，决赛都没有进。书和公开课也刷的很少，主要是被老师的项目占去了太多的时间，经常熬夜打比赛就已经精疲力尽了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，前一段时间和老师讨论了下，也和大神舍友交流过，受到蛮多的启发。首先大神舍友的建议是，不要死磕算法岗，目前这个条件要进大厂算法岗确实比较困难。然后老师给我的建议是，“要考虑自己的长处是什么，不要拿自己的短处去硬碰别人的长处。我们计算机科班出身的同学，长处应该是深刻理解计算机系统（组成原理、操作系统、网络、数据库、并发、web框架等），数据结构和算法（不是机器学习深度学习的那些算法），能够把复杂的逻辑、业务、算法转化成可靠的代码和稳定的程序，实现具体的功能。机器学习深度学习那些算法从根本上来讲就是数学和统计学，不是我们的长处”。我认为老师说的有一定的道理，虽然不是完全认可他的想法（未免有点狭隘）。计算机的基础确实应该成为我们的长处，虽然算法岗确实薪水高待遇好，但是如果自身没有远超同届竞争者的优势，要得到一份好的工作是不太现实的。所以我决定需要好好复习，打好作为计算机专业学生的基础，至少保证能够达到软件研发工程师的水平，学有余力再向算法工程师进阶。&lt;/p&gt;
&lt;p&gt;从16号开始到月末的这两周，我看完的书有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《操作系统》&lt;/li&gt;
&lt;li&gt;《计算机网络》的传输层和网络层&lt;/li&gt;
&lt;li&gt;《数据库系统概论》&lt;/li&gt;
&lt;li&gt;《java编程思想》前半部分&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来打算准备的看的内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《深入理解Java虚拟机》&lt;/li&gt;
&lt;li&gt;《Java多线程编程》、《Java并发编程》&lt;/li&gt;
&lt;li&gt;《高性能Mysql》、《Spring》、《MyBatis》&lt;/li&gt;
&lt;li&gt;《设计模式》&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再加上之前计划中的那些算法书和面试准备书，差不多这些了。至于项目，时间不多了，大概只能准备个秒杀系统之类的小系统。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>阿里天池气象无人机线路优化大赛</title>
      <link>https://utopizza.github.io/posts/projects/2018-03-25-%E9%A1%B9%E7%9B%AE-%E9%98%BF%E9%87%8C%E5%A4%A9%E6%B1%A0%E6%B0%94%E8%B1%A1%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%BA%BF%E8%B7%AF%E4%BC%98%E5%8C%96%E5%A4%A7%E8%B5%9B/</link>
      <pubDate>Sun, 25 Mar 2018 20:37:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/projects/2018-03-25-%E9%A1%B9%E7%9B%AE-%E9%98%BF%E9%87%8C%E5%A4%A9%E6%B1%A0%E6%B0%94%E8%B1%A1%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%BA%BF%E8%B7%AF%E4%BC%98%E5%8C%96%E5%A4%A7%E8%B5%9B/</guid>
      <description>&lt;p&gt;一、赛题&lt;/p&gt;
&lt;p&gt;给出5天的气象数据（风速和降雨量），预测未来5天的气象情况，并根据预测结果，为每天的10架无人机设计最优的飞行路线。要求是无人飞行器不能进入风速大于等于15、降雨量大于等于4的区域，否则立即坠毁。另外还有一些限制条件如任意两架无人飞行器起飞时间必须间隔大于等于10分钟且最大飞行时长为18个小时等等。详情见：未来已来——气象数据领航无人飞行器线路优化大赛。&lt;/p&gt;
&lt;p&gt;其中，我负责气象预测部分，队友负责线路规划部分。由于线路规划是取决于气象预测的结果，如果预测错误导致飞行器进入实际是危险的区域而坠毁，那么将会受到严重的加时惩罚（每架次惩罚24*60分钟）。所以气象预测的准确性在这个比赛中非常重要。因此我们的目标是：尽可能避免坠毁，其次再考虑如何寻找总飞行时长最小的线路。以下主要讲述我负责的气象预测部分。&lt;/p&gt;
&lt;p&gt;二、数据&lt;/p&gt;
&lt;p&gt;官方给出5天的气象数据，分为风速和降雨量两部分。每个地图区域抽象成一个坐标点(x,y)，每个区域每小时一条气象数据，每天一共20个小时。拿到数据后需要进行 Merge，才能得到“每个区域每个小时一条数据”的数据格式。&lt;/p&gt;
&lt;p&gt;Merge 的时候要注意列名是否重复，是否需要重命名新拼接的列，否则会导致错误。完成后需要检查数据是否正确。从图中可以看出，样本的特征不多，只有坐标、天、小时、真值和 10 个气象模型的预测值共 14 个特征。&lt;/p&gt;
&lt;p&gt;三、分析&lt;/p&gt;
&lt;p&gt;把每个小时的静态风速图和一天20个小时的风速动图画出来分析。发现每天的风速变化相当大，即便是同一天内，同一个区域不同小时的风速变化也很大，这为预测增加了不小的难度。&lt;/p&gt;
&lt;p&gt;另一个难点是官方提供的测评方式是直接返回无人飞行器的飞行时长总得分，而不是关于气象预测的某种评价函数的得分。这让我们无法直接获得气象预测结果的反馈，为模型调优增加了难度。&lt;/p&gt;
&lt;p&gt;还有一个难点是前5天和后5天的数据分布不一致。例如前5天平均风速在10左右，远小于危险风速值15，而后5天平均风速在15左右，每天都是大片的飞行危险区域，可行域很少，增加了线路寻优的难度。&lt;/p&gt;
&lt;p&gt;四、初赛&lt;/p&gt;
&lt;p&gt;1、直接二分类&lt;/p&gt;
&lt;p&gt;刚开始的想法是二分类。因为每个区域对于飞行器来说，只有“危险”和“安全”两个状态，因此我们先想到的是把气象预测问题看作二分类问题来处理，使用 LightGBM 的 binary classification 模式直接对每个区域每个小时是否安全进行逻辑回归。尝试过的方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;取5天的某4天作训练集，剩下一天作为验证集&lt;/li&gt;
&lt;li&gt;尝试去掉特征 [xid, yid, date_id, hour] 中的一个或多个&lt;/li&gt;
&lt;li&gt;把10列气象特征的平均值作为新特征&lt;/li&gt;
&lt;li&gt;特征规范化（minmax）/ 二值化（对10列气象特征）&lt;/li&gt;
&lt;li&gt;尝试不同的危险阈值（风速），如 13，13.5，14，14.5，15等&lt;/li&gt;
&lt;li&gt;设置正负样本的权重，尝试不同的权重，如 1：1，1：10等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里的思路是，为了尽量避免预测的时候出现伪安全区域，导致飞行器坠毁而被严重罚时，应该设置更低的危险阈值，更大的负样本（危险区域）权重。当然如果把过多的安全区域预测为危险区域，会导致后面的线路规划没有路可走。&lt;/p&gt;
&lt;p&gt;经过几次提交发现效果不太理想（也可能是线路规划的问题，总之最终得分不是很好）。通过误差分析发现，直接使用二分类对那些接近危险阈值的样本的预测并不好。例如，有某个区域在某个小时的10列气象特征的平均值为14.5，应该判为危险，但是二分类模型却把它判断为安全（为什么？）。&lt;/p&gt;
&lt;p&gt;2、先回归再按阈值二分类&lt;/p&gt;
&lt;p&gt;由于二分类效果不理想，于是转向回归，即先通过回归预测未来5天的风速值，通过与危险阈值比较，大于等于危险阈值的判为危险，否则判为安全区域。尝试过的方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;随机切分数据集 train、eval、test，按 98%：1%：1% 的比例&lt;/li&gt;
&lt;li&gt;去掉特征 date_id&lt;/li&gt;
&lt;li&gt;特征标准化（minmax）&lt;/li&gt;
&lt;li&gt;删除异常点（就是10个气象特征均值与真值的绝对值之差达到5以上的样本）&lt;/li&gt;
&lt;li&gt;每天单独训练，得到5个模型，每个模型对后5天的结果进行预测，再加权平均&lt;/li&gt;
&lt;li&gt;对预测结果进行平滑。尝试使用 scipy 的高斯平滑和卷积平滑。具体步骤是先把整个地图某个小时的风速按坐标顺序 reshape 成一个“图像”矩阵，然后调用 &lt;code&gt;scipy.ndimage.filters.gaussian_filter()&lt;/code&gt; 和 &lt;code&gt;scipy.ndimage.filters.convolve()&lt;/code&gt; 进行平滑处理，再把矩阵平展成原来的数据格式&lt;/li&gt;
&lt;li&gt;尝试不同的危险阈值（风速），如 13，13.5，14，14.5，15等&lt;/li&gt;
&lt;li&gt;对每个样本，加入周围8个点的10*8共80个风速特征&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先回归再按阈值二分类这个方案得到的成绩是比较好的，在线路规划的版本不变的情况下，最好的成绩来自 20000 轮训练的 ligtGBM regression 模型。高斯平滑和卷积平滑方案作用不大，成绩提高在个位数以内，可视为基本无效。&lt;/p&gt;
&lt;p&gt;3、投票法&lt;/p&gt;
&lt;p&gt;不跑模型不训练，直接统计预测集中每个样本的10列风速值特征中大于等于危险风速值的个数，如果10个中有5个或以上是危险的风速，那么就把这条样本预测为危险，否则预测为安全。也尝试过对九宫格（即加入周围80列特征）进行此方法，但是都效果一般，从最终得分来看提高不大。&lt;/p&gt;
&lt;p&gt;最后还是使用了方案2，20000 轮的回归，结合线路规划的多次优化，最终以第2名的成绩进入复赛。&lt;/p&gt;
&lt;p&gt;五、复赛&lt;/p&gt;
&lt;p&gt;复赛加入了降雨量这个条件，并且对飞行器的飞行规则也加了一些约束，总体来说比初赛难度大了很多。由于时间只有4天，提交的次数有限，我们只尝试了一下方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;lightGBM 的 LGBMClassifier 二分类&lt;/li&gt;
&lt;li&gt;xgboost 的 XGBClassifier 二分类&lt;/li&gt;
&lt;li&gt;投票法&lt;/li&gt;
&lt;li&gt;风速和降雨量合并起来一起预测&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打算尝试模型融合，但是时间不够了，最终成绩是17名。最好成绩用的版本是 xgboost 的二分类版本。&lt;/p&gt;
&lt;p&gt;六、第三名分享思路&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://tianchi.aliyun.com/forum/new_articleDetail.html?spm=5176.8366600.0.0.771a311fkLZyZe&amp;amp;raceId=231622&amp;amp;postsId=4259&#34;&gt;Future Chanllenge &amp;ndash; Experience Sharing (3rd place)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他们的思路很简单，就是用 xgboost 和 lightGBM 来做回归然后再模型融合，也没有太多特征工程，就是比我们多了一个“对每一行数据，视那些比真值大太多或者小太多的数据为异常点，用剩下的点的均值替换掉些数据”。这样改数据的方法有什么理论支持？我不是很理解。另外他们做了交叉验证和很多不同的特征组合，但是我们的机器不好，跑一次训练加预测就要两个多小时，我们没有这个时间。再有一个不同的就是他们做了模型融合，我们没有做。我觉得在预测这一部分我们和他们的效果应该是差不太多的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>特征工程</title>
      <link>https://utopizza.github.io/posts/machinelearning/2018-03-17-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/</link>
      <pubDate>Sat, 17 Mar 2018 20:37:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2018-03-17-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/</guid>
      <description>&lt;p&gt;特征工程（Feature Engineering）：利用领域知识和现有数据，构造出需要的特征，用于机器学习算法【参考维基百科：&lt;a href=&#34;https://en.wikipedia.org/wiki/Feature_engineering&#34;&gt;Feature engineering&lt;/a&gt;】。&lt;/p&gt;
&lt;p&gt;俗话说，数据与特征工程决定了模型的上限，改进算法只是逼近这个上限。可见特征工程在机器学习领域里的地位之重要。针对数据挖掘以及传统的机器学习，通过人们的总结和归纳，特征工程主要包括以下方面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2018-03-17-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;目前比较流行的方案是借助一个强大的 python 类库—— sklearn 来实现特征工程。它的&lt;a href=&#34;http://scikit-learn.org/stable/&#34;&gt;官方文档&lt;/a&gt;是教材级别的文档，值得深入学习。言归正传，下面开始总结特征工程的方法。&lt;/p&gt;
&lt;p&gt;一、数据预处理（参考sklearn官方文档 &lt;a href=&#34;http://scikit-learn.org/stable/modules/preprocessing.html&#34;&gt;Preprocessing data&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;1、无量纲化：使不同规格的数据转换到同一规格。常用的方法有标准化、缩放化、正则化三种，它们的具体区别参见：&lt;a href=&#34;http://www.cnblogs.com/chaosimple/p/4153167.html&#34;&gt;归一化/标准化/正则化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(1)、标准化：减去均值并除以标准差。公式表达为：&lt;/p&gt;
&lt;p&gt;$$x_{new}=\frac{x-\bar{x}}{S}$$&lt;/p&gt;
&lt;p&gt;使用 sklearn 的 StandardScaler 实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.preprocessing import StandardScaler

data_new = StandardScaler().fit_transform(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2)、缩放化：常用最大最小值进行缩放，把特征缩放到区间 [0，1] 内，公式表达为：&lt;/p&gt;
&lt;p&gt;$$x_{new}=\frac{x-x_{min}}{x_{max}-x_{min}}$$&lt;/p&gt;
&lt;p&gt;使用 skearn 的 MinMaxScaler 实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.preprocessing import MinMaxScaler

data_new = MinMaxScaler().fit_transform(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(3)、正则化：对每个样本计算其 p-范数，然后对该样本中每个元素除以该范数，这样处理的结果是使得每个处理后样本的 p-范数（L1-norm，L2-norm）等于1。其目的在于样本向量在点乘运算或其他核函数计算相似性时，拥有统一的标准，也就是说都转化为“单位向量”。在 L2 范数下正则化公式表达为：&lt;/p&gt;
&lt;p&gt;$$x_{new}=\frac{x}{||x||_{2}}$$&lt;/p&gt;
&lt;p&gt;使用 sklearn 的 Normalizer 实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.preprocessing import Normalizer

data_new = Normalizer().fit_transform(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、二值化：设定一个阈值，大于阈值的赋值为1，小于等于阈值的赋值为0，公式表达如下：&lt;/p&gt;
&lt;p&gt;$$x_{new} =
\begin{cases}
1, &amp;amp; \text {if $x &amp;gt; threshold$} \
0, &amp;amp; \text{if $x \leq threshold$}
\end{cases}$$&lt;/p&gt;
&lt;p&gt;使用 sklearn 的 Binarizer 实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.preprocessing import Binarizer

data_new = Binarizer(threshold=3).fit_transform(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、独热编码：常用于类别特征（category feature）的处理，把如“男/女”这样的字符型特征转化为数值类型特征。思想是使用 N 位状态寄存器来对 N 个状态进行编码，每个状态都由他独立的寄存器位，并且在任意时候，其中只有一位有效。详情参见：&lt;a href=&#34;http://blog.csdn.net/dulingtingzi/article/details/51374487&#34;&gt;数据预处理之独热编码&lt;/a&gt;。使用 sklearn 的 OneHotEncoder 实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.preprocessing import OneHotEncoder

data_new = OneHotEncoder().fit_transform(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、缺失值处理：缺失值的填补方法有多种，中位数填补、众数填补、均值填补、临近数填补。采用怎么样的填补方法，或者直接放弃该特征，需视具体情况而定。可参考：&lt;a href=&#34;http://www.cnblogs.com/xiaohuahua108/p/6237906.html&#34;&gt;浅谈数据挖掘中的数据处理（缺失值处理以及异常值检测）&lt;/a&gt;。使用 sklearn 的 Imputer 实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.preprocessing import Imputer

data_new = Imputer(strategy=&amp;#39;mean&amp;#39;).fit_transform(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5、构造多项式特征：假设有数据集有两个特征 $[X_1, X_2]$，则可以利用 sklearn 的 PolynomialFeatures 构造二次多项式特征如 $[1,X_1,X_2,X_1^2,X_1*X_2,X_2^2]$。也可以构造更高次数的多项式特征，只需要调整参数即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.preprocessing import PolynomialFeatures

data_new = PolynomialFeatures(2).fit_transform(data) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;6、函数转换：利用 Python 的函数对特征进行转换。可以用 sklearn 的 FunctionTransformer 实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import numpy as np
from sklearn.preprocessing import FunctionTransformer

data_new = FunctionTransformer(np.log1p).transform(X)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二、特征选择（参考sklearn官方文档 &lt;a href=&#34;http://scikit-learn.org/stable/modules/feature_selection.html&#34;&gt;Feature selection&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;1、Filter：过滤法或称选择法，按照发散性或者相关性对各个特征进行评分，设定阈值或者待选择阈值的个数，选择特征。&lt;/p&gt;
&lt;p&gt;(1)、方差选择法：先计算各个特征的方差，然后根据阈值，选择方差大于阈值的特征。这样可以去掉一些方差特别小的特征如常量特征，这种特征对于模型的训练和预测不会有太多贡献。方差的数学公式表达：&lt;/p&gt;
&lt;p&gt;$$\delta^{2}=\frac{(X-\mu)^2}{N}$$&lt;/p&gt;
&lt;p&gt;使用 sklearn 的 VarianceThreshold 实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.feature_selection import VarianceThreshold

data_new = VarianceThreshold(threshold=3).fit_transform(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2)、Pearson 相关系数选择法：计算各个特征对目标值的相关系数以及相关系数的P值，然后选择相关性最高的 k 个。Pearson 相关系数是用两个变量的协方差除以两个变量的标准差得到的，详情参考 &lt;a href=&#34;https://www.zhihu.com/question/19734616&#34;&gt;知乎：如何理解皮尔逊相关系数&lt;/a&gt; 以及 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%9A%AE%E5%B0%94%E9%80%8A%E7%A7%AF%E7%9F%A9%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0&#34;&gt;维基百科：皮尔逊积矩相关系数&lt;/a&gt;。数学公式表达：&lt;/p&gt;
&lt;p&gt;$$P(X,Y)
=\frac{Cov(X,Y)}{\sigma_X \sigma_Y}
=\frac{E[(X-\mu_{X})(Y-\mu_{Y})]}{\sigma_X \sigma_Y}
$$&lt;/p&gt;
&lt;p&gt;使用 sklearn 的 SelectKBest 与 scipy 的 pearsonr 结合实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.feature_selection import SelectKBest
from scipy.stats import pearsonr

data_new = SelectKBest(lambda X, Y: array(map(lambda x:pearsonr(x, Y), X.T)).T, k=2).fit_transform(data, target)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(3)、卡方检验法：经典的卡方检验（Chi-Square）是检验定性自变量对定性因变量的相关性，详情参考：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%A1%E6%96%B9%E6%A3%80%E9%AA%8C&#34;&gt;卡方检验&lt;/a&gt;。使用 sklearn 的 SelectKBest 与 chi2 结合实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2

X_new = SelectKBest(chi2, k=2).fit_transform(X, y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(4)、互信息法：皮尔逊系数只能衡量线性相关性，而互信息系数能够很好地度量各种相关性，但是计算相对复杂一些。互信息是用来评价一个事件的出现对于另一个事件的出现所贡献的信息量，可用来评价定性自变量对定性因变量的相关性，详情参考&lt;a href=&#34;http://blog.csdn.net/liu_zhlai/article/details/53512939&#34;&gt;特征选择方法之互信息&lt;/a&gt;。数学描述为：&lt;/p&gt;
&lt;p&gt;$$I(X,Y)=\sum_{x \in X}\sum_{y \in Y} p(x,y) \log \frac{p(x,y)}{p(x)p(y)}$$&lt;/p&gt;
&lt;p&gt;使用 sklearn 的 SelectKBest 与 minepy 的 MINE 结合实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.feature_selection import SelectKBest
from minepy import MINE

def mic(x, y):
    m = MINE()
    m.compute_score(x, y)
    return (m.mic(), 0.5)

X_new = SelectKBest(lambda X, Y: array(map(lambda x:mic(x, Y), X.T)).T, k=2).fit_transform(X, Y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、Wrapper：包装法，根据目标函数（通常是预测效果评分），每次选择若干特征，或者排除若干特征。&lt;/p&gt;
&lt;p&gt;(1)、递归特征消除：使用一个基模型来进行多轮训练，每轮训练后，模型选择 importance 排在前列的若干特征构建新的特征集，再基于新的特征集进行下一轮训练，如此重复直至特征个数达到指定的数量。使用 sklearn 的 RFE 类实现如下，这里使用逻辑斯蒂回归作为基模型，也可以使用 sklearn 中其他的模型如 svm 等等：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression

X_new = RFE(estimator=LogisticRegression(), n_features_to_select=2).fit_transform(X, Y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、Embedded：嵌入法，先使用某些机器学习的算法和模型进行训练，得到各个特征的权值系数，根据系数从大到小选择特征。类似于Filter方法，但是是通过训练来确定特征的优劣。&lt;/p&gt;
&lt;p&gt;(1)、基于正则项的特征选择法：使用带正则项的基模型，除了筛选出特征外同时也进行了降维，例如使用具有特征稀疏能力的 L1 范数作为正则项（&lt;a href=&#34;https://www.zhihu.com/question/37096933&#34;&gt;知乎：l1 相比于 l2 为什么容易获得稀疏解？&lt;/a&gt;）。使用 sklearn 的 SelectFromModel 结合带 L1 正则项的逻辑回归模型实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.feature_selection import SelectFromModel
from sklearn.linear_model import LogisticRegression

X_new = SelectFromModel(LogisticRegression(penalty=&amp;#34;l1&amp;#34;, C=0.1)).fit_transform(X, Y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2)、基于树模型的特征选择法：树模型中GBDT也可用来作为基模型进行特征选择。使用 sklearn 的 SelectFromModel 结合 GradientBoostingClassifier 实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import GradientBoostingClassifier

X_new = SelectFromModel(GradientBoostingClassifier()).fit_transform(X, Y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三、降维&lt;/p&gt;
&lt;p&gt;当特征选择完成后，可以直接训练模型了，但是可能由于特征矩阵过大，导致计算量大，训练时间长的问题，因此降低特征矩阵维度也是必不可少的。常见的降维方法除了以上提到的基于 L1 正则项的模型以外，另外还有主成分分析法（PCA）和线性判别分析（LDA），线性判别分析本身也是一个分类模型。PCA 和 LDA 有很多的相似点，其本质是要将原始的样本映射到维度更低的样本空间中，但是 PCA 和 LDA 的映射目标不一样：&lt;a href=&#34;http://www.cnblogs.com/LeftNotEasy/archive/2011/01/08/lda-and-pca-machine-learning.html&#34;&gt;PCA 是为了让映射后的样本具有最大的发散性；而 LDA 是为了让映射后的样本有最好的分类性能&lt;/a&gt;。所以说 PCA 是一种无监督的降维方法，而 LDA 是一种有监督的降维方法。&lt;/p&gt;
&lt;p&gt;1、主成分分析法（PCA）：使用 sklearn 的 PCA 实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.decomposition import PCA

X_new = PCA(n_components=2).fit_transform(X)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、线性判别分析法（LDA）：使用 sklearn 的 LDA 实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from sklearn.lda import LDA

X_new = LDA(n_components=2).fit_transform(X, Y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;四、特征交互（Feature interaction）&lt;/p&gt;
&lt;p&gt;通过结合领域知识或者数据特点等等，利用多个特征组合成新的特征，例如&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用某个特征，构造多项式特征&lt;/li&gt;
&lt;li&gt;把某个特征进行某些函数变换，例如取绝对值、平移、取对数等等&lt;/li&gt;
&lt;li&gt;通过某几个特征的加减乘除运算、与或非等运算，或者各种 join 等操作得到的新特征&lt;/li&gt;
&lt;li&gt;按某个特征进行 groupby 分组，把每一组作为新的特征，样本属于哪一组就在对应的特征用 1 表示，其余用 0 表示&lt;/li&gt;
&lt;li&gt;用基因编程创造新特征&lt;/li&gt;
&lt;li&gt;用决策树创造新特征&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;五、参考资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/jasonfreak/p/5448385.html&#34;&gt;使用sklearn做单机特征工程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/sqiu_11/article/details/59487177&#34;&gt;sklearn学习——特征工程(特征选择)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.17bigdata.com/%E7%BB%93%E5%90%88scikit-learn%E4%BB%8B%E7%BB%8D%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95.html&#34;&gt;结合Scikit-learn介绍几种常用的特征选择方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/28641663/answer/41653367&#34;&gt;知乎：机器学习中，有哪些特征选择的工程方法？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/26444240&#34;&gt;机器学习特征工程实用技巧大全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/33651227&#34;&gt;警惕「特征工程」中的陷阱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24635014&#34;&gt;特征选择， 经典三刀&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>阶段总结(3)</title>
      <link>https://utopizza.github.io/posts/summary/2018-03-15-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%933/</link>
      <pubDate>Thu, 15 Mar 2018 01:20:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/summary/2018-03-15-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%933/</guid>
      <description>&lt;p&gt;上一次阶段总结是2017年12月23日，到现在差不多3个月。最近春招和实习招聘开始，看了些面经后深感实力不足，现做个总结并规划一下未来的几个月如何为秋招做准备。&lt;/p&gt;
&lt;p&gt;1月份过得比较辛苦。首先是鼻炎复发已经拖了几个月，到了这个月拖得实在比较严重了，就跑了好几趟华科同济医学院校区看医生，又去同济医院做鼻镜检查，浪费了很多时间。然后大概是15号左右，同时报名参加了《工业AI制造质量预测》、《糖尿病血糖值预测》、《盐城汽车销量预测》、《盐城汽车上牌量预测》四个天池大数据竞赛。到了月底，无人机初赛、工业复赛和糖尿病初赛几乎同时 A 榜截止换 B 榜（无人机没有B榜，一直在前几名所以不用操心），实在无法兼顾，只好放弃了糖尿病专攻工业。最后结果是无人机初赛 2/1646，工业复赛 21/2529（初赛 15/2529，大神舍友带进去的），糖尿病初赛 234/2522 没有入围前100【实在不建议在时间不允许的条件下强行同时参加多个比赛，一方面经常熬夜对身体损害确实比较大（切身体会），另一方面精力分散很难取得很好的成绩，当然大神除外】。除了看病和打比赛，白天在实验室老板的公司天天被催项目，某一次验收进度不理想，被“导师”上岗上线批评我们小组态度有问题，无奈之下只好把白天的时间全用来赶项目。总的来说，这个月白天赶老板的项目，晚上熬夜打比自己的赛，另外还因为鼻炎经常无法正常休息，精神一直很差，这个月可以说确实是比较辛苦了。&lt;/p&gt;
&lt;p&gt;2月份初也比较累，“导师”说过年之前又要验收一次项目进度，核心模块要上线，又不断催进度。然后5号到9号无人机复赛，只有仅仅四天时间，刚好我和队友都在回家路上，浪费了大量时间和好几次提交机会，吃了很大亏，导致成绩不理想。当然我们水平不高实力不够也是重要原因。最后复赛成绩是 17/1646。9号之后就在家开始过年休息，期间偶尔抽点时间搞了下《盐城上牌预测》和《盐城销量预测》，这两个比赛的类型可以说是时间序列相关的，没有什么经验，一直没有什么提高。23号收假回到学校，25号左右两个比赛又是差不多同时截止，我主攻《销量预测》，队友主攻《上牌量预测》，但是结果都不太理想，初赛成绩分别是 132/2500 和 130/2635，都没进复赛。到此，我所有参加的天池大数据竞赛都结束了，熬夜搞比赛的日子暂告一段落。总的来说，这个月的月初和月尾都是在打比赛，中间9到23号两周主要在家过年休息，稍微休息了下。&lt;/p&gt;
&lt;p&gt;3月份，开始陆陆续续收到各种年级群里的各种招聘信息，然后花了一周左右开始做简历，并开始看面经，发现目前我的水平远达不到招聘信息上面的岗位要求，十分焦虑。于是开始疯狂复习，现在先来整理一个目标，再制定一个计划，按计划执行。&lt;/p&gt;
&lt;p&gt;一、目标与可行性分析&lt;/p&gt;
&lt;p&gt;最终的目标就是在秋招的时候能够找到一份自己满意，感兴趣，并且体面工作。和朋友们讨论之后，他们一致认为第一份工作最好是去大厂，例如阿里巴巴，腾讯，百度，网易，今日头条，美团，滴滴，京东，华为等等。&lt;/p&gt;
&lt;p&gt;另外，在考虑了一段时间之后，决定找机器学习算法工程师的岗位，因为实在厌倦了后台开发的增删查改和各种繁琐的业务逻辑。虽然机器学习算法岗的薪资是比后台研发高不少，但是要求和门槛也是高很多的。另一方面从我自身的角度来分析，我没有参加过 ACM 等信息竞赛的经历，机器学习也是自己挤时间看书自学，没有导师带，周围也没有学长学姐搞机器学习（往届的学长学姐都是找的前后台研发相关的方向，基本没有相关经验传授），可以说是孤军奋战了吧。幸亏有个大神舍友，通过向他学习，我才有了今天的一些还过得去的比赛成绩，真的无比感谢。总的来说就是，如果我想找到机器学习相关的不太差的工作，接下来几个月肯定要付出异常的艰辛。&lt;/p&gt;
&lt;p&gt;二、常见岗位要求（以腾讯与阿里实习招聘为例）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;专业：计算机等相关专业&lt;/li&gt;
&lt;li&gt;学历：本科及以上，&lt;strong&gt;硕士博士优先&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;语言：&lt;strong&gt;精通&lt;/strong&gt; C/C++、Java、Python 等至少一门编程语言，极佳的工程实现能力&lt;/li&gt;
&lt;li&gt;算法基本功：&lt;strong&gt;熟悉&lt;/strong&gt;常用机器学习算法，&lt;strong&gt;尤其是深度学习、增强学习等相关领域&lt;/strong&gt;，对模式识别，概率统计、最优化等算法原理及应用，有&lt;strong&gt;扎实的基础&lt;/strong&gt;，&lt;strong&gt;深入的理解&lt;/strong&gt;和浓厚的兴趣&lt;/li&gt;
&lt;li&gt;框架与平台：&lt;strong&gt;了解&lt;/strong&gt;目前常见的&lt;strong&gt;机器学习或者深度学习框架&lt;/strong&gt;中的一个或者多个：Spark，XGBoost，Caffe，Tensorflow 等&lt;/li&gt;
&lt;li&gt;加分项：在计算机科学学术会议和期刊如 NIPS、ICML、IJCAI、AAAI、UAI、KDD、SIGIR 等&lt;strong&gt;发表过论文&lt;/strong&gt;，或者有相关的&lt;strong&gt;开源项目贡献经验&lt;/strong&gt;，有&lt;strong&gt;数理分析&lt;/strong&gt;方面良好的素养以及&lt;strong&gt;数理统计基础&lt;/strong&gt;，良好的&lt;strong&gt;数据敏感能力&lt;/strong&gt;、较强的逻辑分析能力&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、具体计划&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;针对编程语言，选定Java和Python，其中Java用来写算法，Python用来做机器学习。刷一遍**《Java编程思想》**和**《利用Python进行数据分析》**。&lt;/li&gt;
&lt;li&gt;针对传统算法基本功，把**《算法第四版》**的所有传统算法代码反复练习回顾，务必做到烂熟于心。为了应对笔试和面试的算法题，需要多刷题，要刷的书有**《程序员面试指南》**、**《剑指Offer》**、**《编程之法》**、**《编程之美》**、**《编程珠玑》**等等，经典的问题的各种解法一定也要非常熟练。除了刷书，还要多动手实践来提高速度和准确性，多刷 **leetcode** 和**牛客网**，目前 leetcode 刷了 100 道 Easy 和 50 道 Medium，但是很多都印象模糊了，要复习一遍也要继续刷新的。总之算法功底非常重要，如果面试的时候算法写不出来就直接 Over 了。&lt;/li&gt;
&lt;li&gt;针对机器学习和深度学习算法，同样要熟练写出**《机器学习实战》**的十大机器学习算法的核心代码。其次才是理论，所有概念都要清晰理解熟记，基本的推导要熟练，面试的时候一般都要求**现场推导核心公式**。再有就是要对每个算法模型做**横向比较**，相同点不同点，各自的优缺点，各自的使用场景等等。关于理论的书就两本吧，**《机器学习》**和**《统计方法学》**应该就够了。&lt;/li&gt;
&lt;li&gt;针对数理分析能力与数理统计基础，要恶补**《概率论与数理统计》**，在时间允许的情况下可能要再补充一些资料。要做到深刻理解所有原理，并且能够讲清楚。这是机器学习算法工程师的基本功。&lt;/li&gt;
&lt;li&gt;针对框架与平台，暂时选定 &lt;strong&gt;XGBoost&lt;/strong&gt;，&lt;strong&gt;Sklearn&lt;/strong&gt;，&lt;strong&gt;Spark&lt;/strong&gt;，Hadoop 与 &lt;strong&gt;TensorFlow&lt;/strong&gt; 吧，找些相关书籍和资料过一遍，掌握相关概率原理，并且跑一些简单demo，然后写个总结帖就差不多了，不用花太多时间。其中，XGBoost 和 SKlearn 是一直常用的，Spark 与 Hadoop 在本科毕业设计中也搭建使用过，问题不是很大，剩下 TensorFlow 这个深度学习的框架还没接触过，估计要花一段时间上手。关于 XGBoost 就直接去官网看文档和找一些论文看；Spark 和 Hadoop 目前还没有开始找书，以后再补充；至于 SkLearn 和 TensorFlow，感觉看现在这个本 &lt;strong&gt;《Hands-On Machine Learning with Scikit-Learn and TensorFlow》&lt;/strong&gt;，再去 github 看看官方文档和源码就差不多了。&lt;/li&gt;
&lt;li&gt;针对加分项，论文是没戏了，不用考虑。至于项目，打算再做一个天池的《搜索广告转化预测》，感觉这个和工业界的业务比较接近，如果最后成绩不错，面试时可以拿这个出来讲。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;四、一些补充&lt;/p&gt;
&lt;p&gt;有空刷刷知乎的面经，一定要多刷牛客的面经，多总结。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/41233373&#34;&gt;知乎：如果你是面试官，你怎么去判断一个面试者的深度学习水平？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/62482926&#34;&gt;知乎：面试官如何判断面试者的机器学习水平？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/23259302&#34;&gt;知乎：如何准备机器学习工程师的面试 ？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/21714701&#34;&gt;知乎：机器学习，数据挖掘在研究生阶段大概要学些什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nowcoder.com/discuss&#34;&gt;牛客：机器学习面经&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，挤时间把 Coursera 上面的课上完，完成作业。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/machine-learning&#34;&gt;《Machine Learning》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/neural-networks-deep-learning&#34;&gt;《Neural Networks and Deep Learning》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/neural-networks&#34;&gt;《Neural Networks for Machine Learning》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mooc.study.163.com/smartSpec/detail/1001319001.htm&#34;&gt;《网易微专业课程》&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>机器学习类竞赛</title>
      <link>https://utopizza.github.io/posts/machinelearning/2018-02-04-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B1%BB%E7%AB%9E%E8%B5%9B/</link>
      <pubDate>Sun, 04 Feb 2018 22:07:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2018-02-04-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B1%BB%E7%AB%9E%E8%B5%9B/</guid>
      <description>&lt;p&gt;一、国外&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/&#34;&gt;Kaggle&lt;/a&gt;：最著名最活跃的大数据竞赛平台，竞赛题目源源不断，种类丰富，而且有不菲的竞赛奖金。特别是上面的论坛大牛众多而且非常 nice，如果英文能力过关的话在上面可以学到最多最好的数据挖掘和机器学习、深度学习的知识。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kdd.org/kdd-cup&#34;&gt;KDD Cup&lt;/a&gt;：SIGKDD 是 Data Mining 领域的顶会。KDD Cup 是其下的一个比赛。含金量很高。每年都会有比较有意思的题目。难度较大，偏学术，因而全世界的DM、ML大牛、小牛都可能在做这个。这个比赛偶尔会在国内的阿里天池平台上出现，有不少清北博士参加。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、国内&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://tianchi.shuju.aliyun.com/&#34;&gt;阿里巴巴天池大数据科研平台&lt;/a&gt;：由国内科技巨头阿里举办，应该算是国内名气最大的数据挖掘类型的比赛了。由于是阿里举办，所以比赛获得不错名次的可以获得阿里校招直通车的权利。我参加过几个，感觉不少细节问题处理得并不是很好，例如有时候会出现赛题规则混乱，数据集因为各种问题不断更换等等，和 Kaggle 的差距还是不小。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datafountain.cn&#34;&gt;CCF大数据与计算智能大赛（BDCI）&lt;/a&gt;：由中国计算机学会 CCF 主办，是目前国内权威的大数据类赛事之一，组织单位都很权威，也有很多院士、专家参与评审。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dcjingsai.com/common/cmptIndex.html&#34;&gt;DataCastle&lt;/a&gt;：国内的另一个比较有名气的大数据竞赛平台，不过奖金较少。DC在成都，可能是和电子科大有某些联系，评委多是电子科大的老师。&lt;/li&gt;
&lt;li&gt;另外国内一些IT巨头例如百度，腾讯，京东等等会自己举办一些机器学习大数据和算法竞赛，例如京东金融的 &lt;a href=&#34;http://www.datafountain.cn//#/competitions/247/intro&#34;&gt;京东JData算法大赛&lt;/a&gt; 、&lt;a href=&#34;http://jddjr.jd.com/&#34;&gt;京东金融全球数据探索者大赛&lt;/a&gt; ，腾讯的 &lt;a href=&#34;http://algo.tpai.qq.com/&#34;&gt;腾讯社交广告赛（TSA）&lt;/a&gt;，华为的 &lt;a href=&#34;http://codecraft.devcloud.huaweicloud.com/&#34;&gt;华为软件精英挑战赛&lt;/a&gt; 等等，大概每年一度，因为是企业自己举办的比赛，其目的就是为了招揽人才，所以这种比赛除了奖金外，一般都会发 Special Offer，十分诱人。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、参考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/41450532/answer/91325509&#34;&gt;天池大数据竞赛和Kaggle、DataCastle的比较，哪个比较好？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25686876&#34;&gt;Kaggle入门，看这一篇就够了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/32032932/answer/58810196&#34;&gt;Kaggle 的比赛在 Machine Learning 领域中属于什么地位？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/27424282&#34;&gt;分分钟带你杀入Kaggle Top 1%&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/41449961/answer/92090896&#34;&gt;参加天池大数据竞赛对校园招聘有帮助吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/29916643&#34;&gt;国内数据挖掘竞赛哪个好？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>字符串大整数相乘</title>
      <link>https://utopizza.github.io/posts/algorithm/2018-01-29-%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%A7%E6%95%B4%E6%95%B0%E7%9B%B8%E4%B9%98/</link>
      <pubDate>Mon, 29 Jan 2018 22:07:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2018-01-29-%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%A7%E6%95%B4%E6%95%B0%E7%9B%B8%E4%B9%98/</guid>
      <description>&lt;p&gt;在 leetcode 上看到一个巨强的解法，记录一下以加深记忆。原文参见：&lt;a href=&#34;https://leetcode.com/problems/multiply-strings/discuss/17605/Easiest-JAVA-Solution-with-Graph-Explanation&#34;&gt;Easiest JAVA Solution with Graph Explanation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目：&lt;a href=&#34;https://leetcode.com/problems/multiply-strings/description/&#34;&gt;Multiply Strings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意为，给定两个字符串形式的非负整数，求它的乘积，以字符串形式返回。并且：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两个字符串的长度小于 110.&lt;/li&gt;
&lt;li&gt;两个字符串只包含 0 到 9 的数字.&lt;/li&gt;
&lt;li&gt;两个字符串不以任何 ‘0’ 开头.&lt;/li&gt;
&lt;li&gt;不能使用编程语言内置的大整数库函数，也不能直接转换成整数求解.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;leetcode 上某大神给出的思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;位数分别为 $m$ 和 $n$ 的两个整数相乘，乘积的位数最大不超过 $m+n$&lt;/li&gt;
&lt;li&gt;从左至右地，乘数的第 $[i]$ 位与被乘数的第 $[j]$ 位相乘的积，将被加到最终结果的第 $[i+j]$ 位和第 $[i+j+1]$ 位&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2018-01-29-%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%A7%E6%95%B4%E6%95%B0%E7%9B%B8%E4%B9%98/123.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;因此，整个计算过程就可以直接模拟我们小学就学的竖式乘法计算过程。这也是令我惊讶的地方，小学就学会了的竖式乘法计算，但是十几年来（我）都没有发现这两个十分有用的规律&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static String multiply(String num1, String num2) {
    int m = num1.length();
    int n = num2.length();
    int[] pos = new int[m + n];

    for (int i = m - 1; i &amp;gt;= 0; i--) {
        for (int j = n - 1; j &amp;gt;= 0; j--) {
            int mul = (num1.charAt(i) - &amp;#39;0&amp;#39;) * (num2.charAt(j) - &amp;#39;0&amp;#39;);
            int p1 = i + j;
            int p2 = i + j + 1;
            int sum = mul + pos[p2];

            pos[p1] += sum / 10;
            pos[p2] = sum % 10;
        }
    }

    StringBuilder sb = new StringBuilder();
    for (int p : pos)
        if (!(sb.length() == 0 &amp;amp;&amp;amp; p == 0))
            sb.append(p);

    return sb.length() == 0 ? &amp;#34;0&amp;#34; : sb.toString();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>回溯法</title>
      <link>https://utopizza.github.io/posts/algorithm/2018-01-24-%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%BA%AF%E6%B3%95/</link>
      <pubDate>Wed, 24 Jan 2018 13:57:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2018-01-24-%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%BA%AF%E6%B3%95/</guid>
      <description>&lt;p&gt;回溯法 （Backtracking） 是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。（摘自百度百科）&lt;/p&gt;
&lt;p&gt;此方法一般适用于求“有多少种解”的题目，如N皇后问题的“一共有多少种走法”，数独问题的“一共有多少种填法”，数组和问题的“一共有多少种组合使得数组中的某些元素之和等于目标值”等等。这种问题的特点是搜索空间很大，并且往往伴有约束条件，如N皇后问题的“每个皇后不能在同一直线上”，数独问题的“每行每列每个小九宫格都由1到9组成并且不重复”，数组和问题的“元素之和等于给定目标值”。善于利用这些约束条件，往往可以跳过大量的不可能存在解的搜索空间，极大地减少计算量。此方法也称“剪枝法”。&lt;/p&gt;
&lt;p&gt;下面是 leetcode 的一些相关题目的解法。&lt;/p&gt;
&lt;p&gt;一、数组和&lt;/p&gt;
&lt;p&gt;1、&lt;a href=&#34;https://leetcode.com/problems/combination-sum/description/&#34;&gt;Combination Sum&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; combinationSum(int[] nums, int target) {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ret = new ArrayList&amp;lt;&amp;gt;();
    Arrays.sort(nums);
    backtrack(ret,new ArrayList&amp;lt;&amp;gt;(),nums,target,0);
    return ret;
}

public void backtrack(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; soluList, List&amp;lt;Integer&amp;gt; solu, int[] nums, int remain, int start){
    if(remain&amp;lt;0) return;
    else if(remain==0) soluList.add(new ArrayList(solu));
    else{
        for(int i=start;i&amp;lt;nums.length;i++){
            solu.add(nums[i]);
            backtrack(soluList,solu,nums,remain-nums[i],i);
            solu.remove(solu.size()-1);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、&lt;a href=&#34;https://leetcode.com/problems/combination-sum-ii/description/&#34;&gt;Combination Sum II&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; combinationSum2(int[] nums, int target) {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ret=new ArrayList&amp;lt;&amp;gt;();
    Arrays.sort(nums);
    backtrack(ret,new ArrayList&amp;lt;&amp;gt;(),nums,target,0);
    return ret;
}

private void backtrack(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; soluList, List&amp;lt;Integer&amp;gt; solu, int[] nums, int remain, int start){
    if(remain&amp;lt;0) return;
    else if(remain==0) soluList.add(new ArrayList(solu));
    else{
        for(int i=start;i&amp;lt;nums.length;i++){
            if(i&amp;gt;start&amp;amp;&amp;amp;nums[i-1]==nums[i]) continue;
            solu.add(nums[i]);
            backtrack(soluList,solu,nums,remain-nums[i],i+1);
            solu.remove(solu.size()-1);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二、子集组合&lt;/p&gt;
&lt;p&gt;1、&lt;a href=&#34;https://leetcode.com/problems/subsets/description/&#34;&gt;Subsets&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; subsets(int[] nums) {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; soluList=new ArrayList&amp;lt;&amp;gt;();
    backtrack(soluList, new ArrayList&amp;lt;&amp;gt;(), nums, 0);
    return soluList;
}

private void backtrack(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; soluList, List&amp;lt;Integer&amp;gt; solu, int[] nums, int start){
    soluList.add(new ArrayList&amp;lt;&amp;gt;(solu));
    for(int i=start;i&amp;lt;nums.length;i++){
        solu.add(nums[i]);
        backtrack(soluList,solu,nums,i+1);
        solu.remove(solu.size()-1);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、&lt;a href=&#34;https://leetcode.com/problems/subsets-ii/description/&#34;&gt;Subsets II&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; subsetsWithDup(int[] nums) {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; soluList=new ArrayList&amp;lt;&amp;gt;();
    Arrays.sort(nums);
    backtrack(soluList,new ArrayList&amp;lt;&amp;gt;(),nums,0);
    return soluList;
}

private void backtrack(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; soluList, List&amp;lt;Integer&amp;gt; solu, int[] nums, int start){
    soluList.add(new ArrayList&amp;lt;&amp;gt;(solu));
    for(int i=start;i&amp;lt;nums.length;i++){
        if(i&amp;gt;start&amp;amp;&amp;amp;nums[i-1]==nums[i]) continue;
        solu.add(nums[i]);
        backtrack(soluList,solu,nums,i+1);
        solu.remove(solu.size()-1);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三、全排列&lt;/p&gt;
&lt;p&gt;1、&lt;a href=&#34;https://leetcode.com/problems/permutations/description/&#34;&gt;Permutations&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; permute(int[] nums) {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; soluList=new ArrayList&amp;lt;&amp;gt;();
    backtrack(soluList,new ArrayList&amp;lt;&amp;gt;(),nums);
    return soluList;
}
    
private void backtrack(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; soluList, List&amp;lt;Integer&amp;gt; solu, int[] nums){
    if(solu.size()==nums.length) soluList.add(new ArrayList&amp;lt;&amp;gt;(solu));
    else{
        for(int i=0;i&amp;lt;nums.length;i++){
            if(solu.contains(nums[i])) continue;
            solu.add(nums[i]);
            backtrack(soluList, solu, nums);
            solu.remove(solu.size()-1);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、&lt;a href=&#34;https://leetcode.com/problems/permutations-ii/description/&#34;&gt;Permutations II&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; permuteUnique(int[] nums) {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; soluList=new ArrayList&amp;lt;&amp;gt;();
    Arrays.sort(nums);
    backtrack(soluList,new ArrayList&amp;lt;&amp;gt;(),nums,new boolean[nums.length]);
    return soluList;
}

private void backtrack(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; soluList, List&amp;lt;Integer&amp;gt; solu, int[] nums, boolean[] used){
    if(solu.size()==nums.length) soluList.add(new ArrayList&amp;lt;&amp;gt;(solu));
    else{
        for(int i=0;i&amp;lt;nums.length;i++){
            if(used[i]) continue;
            if(i&amp;gt;0&amp;amp;&amp;amp;nums[i-1]==nums[i]&amp;amp;&amp;amp;!used[i-1]) continue;
            used[i]=true;
            solu.add(nums[i]);
            backtrack(soluList,solu,nums,used);
            solu.remove(solu.size()-1);
            used[i]=false;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>https://utopizza.github.io/posts/algorithm/2018-01-14-%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sun, 14 Jan 2018 21:57:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2018-01-14-%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>&lt;p&gt;一、原始二分查找&lt;/p&gt;
&lt;p&gt;二分查找的思想很简单，就是在一个有序序列里查找一个目标时，先与中位数比较，如果目标等于中位数，则直接返回。如果目标小于中位数，就去前半部分继续查找。如果目标大于中位数，就去后半部分查找，如此重复直至不可再分。如果找到则返回 mid，否则返回 -1 表示序列中不存在改目标。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int BinarySearch(int[] nums, int target) {
    int lo = 0, hi = nums.length - 1;
    while (lo &amp;lt;= hi) {
        int mid = lo + (hi - lo) / 2;
        if (nums[mid] == target) return mid;
        else if (nums[mid] &amp;gt; target) hi = mid - 1;
        else lo = mid + 1;
    }
    return -1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二、半有序数组的二分查找&lt;/p&gt;
&lt;p&gt;进阶问题，在一个部分有序（这里只考虑升序）的旋转数组里，使用二分查找来找到最大或者最小的值。所谓旋转数组，就是一个已按升序排序的数组，循环左移或者右移若干位，例如 $[4,5,6,0,1,2,3]$。先给出寻找最小值的代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int BinarySearchMinForRotateArray(int[] nums) {
    int lo = 0, hi = nums.length - 1;
    while (lo &amp;lt; hi) {
        int mid = (lo + hi) / 2;
        if (nums[mid] &amp;gt; nums[nums.length-1]) lo = mid + 1;
        else hi = mid;
    }
    return lo;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是寻找最大值的代码，之前我写不出来，当数组是完全有序（也即最小值是第一个数，最大值是最后一个数）的时候，程序会死循环。后发现使用一个小技巧：&lt;code&gt;mid = (lo + hi + 1) / 2&lt;/code&gt; 就可以解决这个问题。因为这样可以使得 mid 指针向右偏，因为数组是升序的，最大值会在最小值的左边，所以能够调整到刚好在找到最大值的时候退出循环。这里有些复杂的边界调整，暂时还没整理出一个规律。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int BinarySearchMaxForRotateArray(int[] nums) {
    int lo = 0, hi = nums.length - 1;
    while (lo &amp;lt; hi) {
        int mid = (lo + hi + 1) / 2;
        if (nums[mid] &amp;lt; nums[0]) hi = mid - 1;
        else lo = mid;
    }
    return lo;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三、二分查找思想实现整数除法运算&lt;/p&gt;
&lt;p&gt;应用问题，要求不能用乘法、除法和模运算来实现一个除法。为了简单表示，这里暂不考虑小数除法和溢出的问题。思路是，通过不断把除数加倍，来逼近被除数。如果某次加倍后会超过被除数，则用被除数减去当前的除数累加和，把剩下的差作为新的逼近目标，重复调用自身来递归地逼近。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// a/b
public int dividedByBinarySearch(int a, int b) {
    if (a &amp;lt; b) return 0;
    int sum = b;
    int multiply = 1;
    while (sum + sum &amp;lt;= a) {
        sum += sum;
        multiply += multiply;
    }
    return multiply + dividedByBinarySearch(a - sum, b);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;四、二分查找寻找指定元素的起始与结束下标&lt;/p&gt;
&lt;p&gt;给定一个升序的整型数组，里面的元素会重复若干个，使用二分查找确定指定元素的起始和结束位置。例如，给定 [1,2,3,4,4,4,4,5]，指定目标为 4，则返回 [3,6]。思路是使用两次二分查找，分别向左和向右找最顶端的指定元素。这个例子应该能比较好地说明 &lt;code&gt;mid = (lo + hi + 1) / 2&lt;/code&gt; 这个技巧，目的是保证 mid 指针一直等于 target。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int[] BinarySearchRange(int[] nums, int target) {
    int[] ret = new int[2];
    ret[0] = -1;
    ret[1] = -1;
    if (nums == null || nums.length == 0) return ret;

    // find the left top
    int lo = 0, hi = nums.length - 1;
    while (lo &amp;lt; hi) {
        int mid = (lo + hi + 1) / 2;
        if (target &amp;lt;= nums[mid]) hi = mid;
        else lo = mid + 1;
    }
    if (nums[lo] == target) ret[0] = lo;

    // find the right top
    lo = 0;
    hi = nums.length - 1;
    while (lo &amp;lt; hi) {
        int mid = (lo + hi) / 2;
        if (target &amp;gt;= nums[mid]) lo = mid;
        else hi = mid - 1;
    }
    if (nums[lo] == target) ret[1] = lo;

    return ret;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>FourSum</title>
      <link>https://utopizza.github.io/posts/algorithm/2018-01-13-%E7%AE%97%E6%B3%95-foursum/</link>
      <pubDate>Sat, 13 Jan 2018 23:20:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2018-01-13-%E7%AE%97%E6%B3%95-foursum/</guid>
      <description>&lt;p&gt;一、TwoSum&lt;/p&gt;
&lt;p&gt;给定一个整型数组，和一个 target，返回数组中两个数之和等于 target 的所有组合。不能输出重复组合。例如给定数组 [2,3,1,-4,8,3]，target = 4，则满足条件的非重复组合有 [3,1] 和 [-4,8]。&lt;/p&gt;
&lt;p&gt;思路：因为要求输出的是数组元素而不是数组下标，因此可以对数组进行排序（注意，如果题目要求输出数组下标，就不应使用排序，而是使用 HashMap 来优化）。排序之后，使用两个指针分别从数组两头往中间移动搜索整个数组，为避免重复组合，需跳过重复的元素。当指针相遇时搜索结束，因此搜索的时间复杂度为 $O(n)$。（其实如果算上前面的排序操作那么时间复杂度不止$O(n)$。因为所有基于比较的排序算法的时间复杂度下界为 $O(nlogn)$，所以本算法的总时间复杂度实际上应是 $O(n+nlogn)=O(nlogn)$）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; TwoSum(int[] nums, int target) {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; list = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();
    Arrays.sort(nums);
    int lo = 0, hi = nums.length - 1;
    while (lo &amp;lt; hi) {
        int sum = nums[lo] + nums[hi];
        if (sum == target) {
            list.add(Arrays.asList(nums[lo], nums[hi]));
            while (lo &amp;lt; hi &amp;amp;&amp;amp; nums[lo] == nums[lo + 1]) lo++;
            while (lo &amp;lt; hi &amp;amp;&amp;amp; nums[hi] == nums[hi - 1]) hi--;
            lo++;
            hi--;
        } else if (sum &amp;gt; target) hi--;
        else lo++;
    }
    return list;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二、ThreeSum&lt;/p&gt;
&lt;p&gt;上述题目的改进版，给定整型数组和一个 target，输出数组中三个数之和等于 target 的所有非重复组合。&lt;/p&gt;
&lt;p&gt;思路：可以转化成 TwoSum 问题，即对原数组中第 $i$ 个元素 $nums[i]$，用 target 减去这个元素的差作为剩下的子数组 $nums[i+1,\cdots,n-1]$ 的 TwoSum 问题的 target。相当与对每一个元素调用一次 TwoSum 来找剩下的两个元素，因为 TwoSum 的时间复杂度为 $O(n)$，因此 ThreeSum 的时间复杂度为 $O(n^2)$。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ThreeSum(int[] nums, int target) {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; list = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();
    if (nums == null || nums.length &amp;lt; 3) return list;

    Arrays.sort(nums);
    
    // ThreeSum
    for (int i = 0; i &amp;lt; nums.length - 2; i++) {
        if (i == 0 || nums[i] != nums[i - 1]) {

            // TwoSum
            int lo = i + 1, hi = nums.length - 1, t = target - nums[i];
            while (lo &amp;lt; hi) {
                int sum = nums[lo] + nums[hi];
                if (sum == t) {
                    list.add(Arrays.asList(nums[lo], nums[hi], nums[i]));
                    while (lo &amp;lt; hi &amp;amp;&amp;amp; nums[lo] == nums[lo + 1]) lo++;
                    while (lo &amp;lt; hi &amp;amp;&amp;amp; nums[hi] == nums[hi - 1]) hi--;
                    lo++;
                    hi--;
                } else if (sum &amp;gt; t) hi--;
                else lo++;
            }

        }
    }
    return list;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三、FourSum&lt;/p&gt;
&lt;p&gt;再次改进版，给定一个整型数组和一个 target，求数组中四个元素之和等于 target 的所有非重复组合。&lt;/p&gt;
&lt;p&gt;思路：类似地，先排序，然后选定一个元素，把剩下的右边子数组看作 ThreeSum 问题。推理同上，时间复杂度为 $O(n^3)$。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; FourSum(int[] nums, int target) {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ret = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();
    Arrays.sort(nums);

    // four sum
    for (int i = 0; i &amp;lt; nums.length - 3; i++) {
        if (i == 0 || nums[i] != nums[i - 1]) {

            // three sum
            for (int j = i + 1; j &amp;lt; nums.length - 2; j++) {
                if (j == i + 1 || nums[j] != nums[j - 1]) {

                    // two sum
                    int lo = j + 1, hi = nums.length - 1, t = target - nums[i] - nums[j];
                    while (lo &amp;lt; hi) {
                        int sum = nums[lo] + nums[hi];
                        if (sum == t) {
                            ret.add(Arrays.asList(nums[i], nums[j], nums[lo], nums[hi]));
                            while (lo &amp;lt; hi &amp;amp;&amp;amp; nums[lo] == nums[lo + 1]) lo++;
                            while (lo &amp;lt; hi &amp;amp;&amp;amp; nums[hi] == nums[hi - 1]) hi--;
                            lo++;
                            hi--;
                        } else if (sum &amp;gt; t) hi--;
                        else lo++;
                    }

                }
            }

        }
    }

    return ret;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>位运算技巧</title>
      <link>https://utopizza.github.io/posts/algorithm/2018-01-06-%E7%AE%97%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sat, 06 Jan 2018 20:20:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2018-01-06-%E7%AE%97%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;p&gt;一、6种基本位操作&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;符号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;运算规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;And（按位与）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;对应位上同时为 1 时，结果才为 1，否则为 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;$\mid$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Or（按位或）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;对应位上同时为 0 时，结果才为 0，否则为 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;~&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Not（取反）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1 变 0，0 变 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;^&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Xor（异或）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;对应位上相同时输出 0，相异时输出 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;laquo;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Left Shift（左移）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;各二进位全部左移若干位，高位丢弃，低位补 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Right Shift（右移）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;各二进位全部右移若干位，低位丢弃，高位分情况&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算机内部使用补码作为机器数，正数的补码等于原码，负数的补码等于原码的符号位外取反加一，切记。另外注意机器字长，如果题目没有明确说明，一般默认是32位或64位&lt;/li&gt;
&lt;li&gt;这6种操作符中，只有~取反是单目操作符，其它5种都是双目操作符&lt;/li&gt;
&lt;li&gt;位操作只能用于整型数据&lt;/li&gt;
&lt;li&gt;位操作运算优先级比较低（比加减乘除低），因此一般需要使用括号来保证正确的运算顺序，否则容易出错&lt;/li&gt;
&lt;li&gt;右移运算（&amp;gt;&amp;gt;）时，对无符号数，高位补0。对有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）&lt;/li&gt;
&lt;li&gt;Java中的右移（&amp;gt;&amp;gt;）执行的是算术右移，高位补符号位；Java中的无符号（逻辑）右移有单独的运算符号：&amp;gt;&amp;raquo;&lt;/li&gt;
&lt;li&gt;另外位操作还有一些复合操作符，如 &amp;amp;=、|=、^=、&amp;laquo;=、&amp;gt;&amp;gt;= 等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、常用技巧&lt;/p&gt;
&lt;p&gt;1、计算给定的整数对应的二进制数中 1 的个数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int countOnes(int n) {
    int count=0;
    while(n!=0) {
        n = n&amp;amp;(n-1);
        count++;
    }
    return count;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、判断一个整数是否是 4 的 n 次方。思路很清晰，4 的 n 次方即为 2 的 2n 次方，因此其二进制形式必定是由一个 1 和偶数个 0 组成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public boolean isPowerOfFour(int num) {
    int count0=0;
    int count1=0;
    while(num&amp;gt;0){
        if((num&amp;amp;1)==1){
            count1++;
        }else{
            count0++;
        }
        num&amp;gt;&amp;gt;=1;
    }
    return count1==1 &amp;amp;&amp;amp; (count0%2==0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、仅用位运算求两个整数的和。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int getSum(int a, int b) {
    //return b==0? a:getSum(a^b, (a&amp;amp;b)&amp;lt;&amp;lt;1);
    while(b!=0){
        int temp=a^b;
        b=(a&amp;amp;b)&amp;lt;&amp;lt;1;
        a=temp;
    }
    return a;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、找出缺失的数。给定一个整型数组，每个数字都出现了两次，现在缺失了一个数字，即有一个数字只出现一次，找出这个数字。思路：利用异或运算的两个特性， 自己与自己异或结果为0，异或满足交换律&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int missingNumber(int[] nums) {
    int ret = 0;
    for (int i = 0; i &amp;lt; nums.length; ++i) {
        ret ^= nums[i];
    }
    return ret;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5、找出缺失的数。给定一个整型数组，长度为 $n$，取值范围为 $[0,&amp;hellip;,n]$。找出缺失的那一个数。例如给定 $[0,1,3]$，返回 2。思路同上，把数组的 n 个数和完整的序列 $[0,&amp;hellip;,n]$ 异或起来，最后结果就是只出现一次的也即在数组中缺失的那个数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static int missingNumber(int[] nums) {
    int ret = 0;
    for (int i = 0; i &amp;lt; nums.length; ++i) {
        ret ^= i;
        ret ^= nums[i];
    }
    return ret ^ nums.length;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;6、判断奇偶。只要根据最未位是 0 还是 1 来决定，为 0 就是偶数，为 1 就是奇数。因此可以用 if((a &amp;amp; 1) == 0) 代替 if(a % 2 == 0) 来判断 a 是不是偶数。&lt;/p&gt;
&lt;p&gt;7、不使用第三方变量交换两个数。利用一个数异或上自己等于 0 （消去这个数）的性质。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public void swap(int a, int b)  
{  
    if (a != b)  
    {  
        a ^= b;  
        b ^= a;  
        a ^= b;  
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;8、变换符号，即最高位 1 变 0，0 变 1。把该数取反加 1 即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int signReversal(int a)  
{  
    return ~a + 1;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;9、取绝对值。由上述可知对于负数可以通过对其取反加一来得到正数。因此现在只要判断输入的数是正数还是负数，如果是正数就直接输出，是负数就取反加一。对输入的数算术右移31位，由于高位补的是符号位，因此右移后如果原来是正数那么结果就是 0（0x 0000 0000），如果是负数那么右移的结果是 -1（0x FFFF FFFF）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int abs(int a)  
{  
    int i = a &amp;gt;&amp;gt; 31;  
    return i == 0 ? a : (~a + 1);  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果进一步考虑，注意到任何数与 0 异或等于自己，与 -1 异或等于取反，而代码中的 i 要么是 0，要么是 -1，因此 a 与 i 异或再减去 i 和原代码等价，并且这样省去了判断。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int abs(int a)  
{  
    int i = a &amp;gt;&amp;gt; 31;  
    return (a ^ i) - i;  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;10、逆序一个二进制数。这里只关注正整数的有效位，例如，正整数 11 的二进制是 1011，逆序后得到 1101，输出 13。思路是对输入的数不断地取最低位并右移，取到的位赋到输出结果的最低位并不断左移。当输入的数减小到 0 时，算法完成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public int reverseBit(int n) {
    int mask = 1, res = 0;
    while (n != 0) {
        res &amp;lt;&amp;lt;= 1;
        res |= (n &amp;amp; mask);
        n &amp;gt;&amp;gt;= 1;
    }
    return res;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;11、逆序一个 32 位无符号整数的二进制。我们知道机器码是最高位是用于表示符号位的，但是 Java 中没有无符号整数的数据类型，怎办呢？&lt;/p&gt;
&lt;p&gt;三、参考资料&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/morewindows/article/details/7354571&#34;&gt;位操作基础篇之位操作全面总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/sum-of-two-integers/discuss/84278/&#34;&gt;leetcode-A summary: how to use bit manipulation to solve problems easily and efficiently&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3165776/reverse-bits-in-number&#34;&gt;Stack Overflow-Reverse bits in number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3324707/how-can-i-invert-bits-of-an-unsigned-byte-in-java&#34;&gt;Stack Overflow-How can I invert bits of an unsigned byte in Java?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>机器数的三种编码策略</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-12-31-%E7%AE%97%E6%B3%95-%E6%9C%BA%E5%99%A8%E6%95%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BC%96%E7%A0%81%E7%AD%96%E7%95%A5/</link>
      <pubDate>Sun, 31 Dec 2017 15:10:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-12-31-%E7%AE%97%E6%B3%95-%E6%9C%BA%E5%99%A8%E6%95%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BC%96%E7%A0%81%E7%AD%96%E7%95%A5/</guid>
      <description>&lt;p&gt;一、机器数（Machine Data）与真值（True Value）&lt;/p&gt;
&lt;p&gt;一个数在计算机中的二进制表示形式，叫做这个数的机器数。我们知道，计算机的物理结构决定了它内部只能存储 0 和 1，也即二进制数，那么计算机如何区分表示一个数的正负呢？一般上，计算机用机器数的最高位存放符号，如果最高位是 0 则表示这个数是一个正数。如果最高位是 1 则表示这个数是一个负数。假设计算机字长为 8 位（现在的计算机一般32位和64位），则 +3 转换成二进制机器数就是 0000 0011，-3 转换成二进制机器数是 1000 0011。&lt;/p&gt;
&lt;p&gt;反过来，我们把当一个二进制数作为机器数出现时，它所代表的真实数值为机器数的真值。例如，机器数 0000 0011 的真值为 +000 0001 = +3，机器数 1000 0001 的真值为 –000 0011 = –3。&lt;/p&gt;
&lt;p&gt;下面分别介绍原码，反码，补码，它们实际上就是机器数的三种不同的编码策略。其中，适合人脑理解和计算的是原码，而适合计算机使用的是补码。&lt;/p&gt;
&lt;p&gt;二、原码（Primitive Encoding）&lt;/p&gt;
&lt;p&gt;原码就是直接使用符号位和真值的绝对值的二进制数作为机器码。例如，计算机字长为 8 位时，&lt;/p&gt;
&lt;p&gt;$$[+3]_{原}=0000 , 0011$$&lt;/p&gt;
&lt;p&gt;$$[-3]_{原}=1000 , 0011$$&lt;/p&gt;
&lt;p&gt;由于原码最高位用于表示符号，因此原码可以表示的最大正数为 0111 1111 即 +127，最小负数为 1111 1111 即 -127，因此 8 位字长的原码机器码的取值范围为 [-127, 127]。&lt;/p&gt;
&lt;p&gt;三、反码（Invert Encoding）&lt;/p&gt;
&lt;p&gt;反码的定义为：正数的反码等于它的原码，负数的反码等于其原码的符号位不变，其余各位取反。例如，计算机字长为 8 位时，&lt;/p&gt;
&lt;p&gt;$$[+3]_{反}=0000 , 0011$$&lt;/p&gt;
&lt;p&gt;$$[-3]_{反}=1111 , 1100$$&lt;/p&gt;
&lt;p&gt;四、补码（Complement Encoding）&lt;/p&gt;
&lt;p&gt;补码的定义为：正数的补码等于它的原码，负数的补码等于其原码的符号位不变，其余各位取反，再加一。例如，计算机字长为 8 位时，&lt;/p&gt;
&lt;p&gt;$$[+3]_{补}=0000 , 0011$$&lt;/p&gt;
&lt;p&gt;$$[-3]_{补}=1111 , 1101$$&lt;/p&gt;
&lt;p&gt;五、为什么需要原码、反码、补码三种编码策略&lt;/p&gt;
&lt;p&gt;由上面知道，对于一个正数，它的原码、反码和补码的表示是完全一样的。而对于一个负数，它的三种编码策略完全不一样。例如，计算机字长为 8 位时，&lt;/p&gt;
&lt;p&gt;$$[+3]&lt;em&gt;{真值}=[0000,0011]&lt;/em&gt;{原}=[0000,0011]&lt;em&gt;{反}=[0000,0011]&lt;/em&gt;{补}$$&lt;/p&gt;
&lt;p&gt;$$[-3]&lt;em&gt;{真值}=[1000,0011]&lt;/em&gt;{原}=[1111,1100]&lt;em&gt;{反}=[1111,1101]&lt;/em&gt;{补}$$&lt;/p&gt;
&lt;p&gt;适合人脑直观理解的是原码，因为它就是以真值的绝对值的二进制加上一个符号位来表示，但是这样却不适合于计算机的计算。因为如果单独处理计算机中每一个机器数的符号位，会使得电路设计非常复杂。于是需要一种可以直接让符号位直接参与计算并且保证结果正确的编码方式，这就是补码被提出的原因。补码的推导具体参见：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html&#34;&gt;原码, 反码, 补码 详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tup.com.cn/upload/books/yz/026562-01.pdf&#34;&gt;机器数与编码&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前计算机内部使用的一般都是补码，切记。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>阶段总结(2)</title>
      <link>https://utopizza.github.io/posts/summary/2017-12-23-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%932/</link>
      <pubDate>Sat, 23 Dec 2017 20:55:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/summary/2017-12-23-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%932/</guid>
      <description>&lt;p&gt;上一次总结是8月17日，到现在刚好过去了4个月。2018元旦快到了，研二上学期也接近尾声，稍微总结一下这四个月的工作。&lt;/p&gt;
&lt;p&gt;9月份先花了了半个月左右的时候整理了本科期间的大部分技术文档和比赛经验，补了些博客。后半个月开始看《算法导论》，主要精力集中于动态规划那一章，自己用 Java 实现了书上的几个算法并按照自己的理解写了几篇博客。之后感觉做题还是太少，理解和熟练程度都不够，便开始在网上搜一些动态规划的经典题目进行补充。这个月基本以补博客为主&lt;/p&gt;
&lt;p&gt;10月份中秋国庆假回了趟家，到10月9日左右才回学校。这个月过的比较混乱，同时在尝试做论文和算法，写博客。但因为论文的数据问题进度被卡住了，所以主要精力貌似集中于刷 leetcode 的算法题了，那段时间刷了大概有100多道，大部分是 Easy 难度。19号左右，同届的专硕同学和上一届的学硕学长找完工作回来了，请教了不少经验，要了个书单，不过帮助不大，他们找的都是前后台研发岗，不是机器学习和算法岗。这个月可以说主要以刷 leetcode 为主&lt;/p&gt;
&lt;p&gt;11月份，大神舍友带我打天池比赛。11月8日左右弄到了服务器，选好题，选好了 baseline 模型 LightGBM，我就完全停止了论文和算法的学习，全部精力放在了比赛上面。第一次正式使用 Python 的 pandas，numpy，sklearn 这些工具库来实现机器学习，花了不少精力，学习到了很多非常实用的知识。因为 lgb 的本质是梯度提升树，所以我回头去看书，复习了一遍决策树，提升算法，集成学习，提升树与回归树，推导了一些细节，写了一系列博客。&lt;/p&gt;
&lt;p&gt;12月份，当然是继续以比赛为主要工作内容。不断尝试新的想法，代码更新并整理了一遍又一遍，成绩排名还行，一直在前20。另外由于题目比较坑，官方的数据有问题，重新发布了两次数据集，导致我们之前的大量调试工作都白费了。同时也逐渐感到遇到提高的瓶颈了，需要继续深入学习新的知识，我们又尝试了模型融合，但是效果并不是很理想。这个月主要精力在调试参数和补决策树的理论知识为主。另外向舍友大神要了个书单和coursera的视频单，但是感觉难度较大，也没太多时间去看了，主要看了吴恩达的《Machine Learning》，并完成作业。&lt;/p&gt;
&lt;p&gt;总的来说，这四个月来完成的主要工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整理出了本科时的部分技术博客&lt;/li&gt;
&lt;li&gt;读《算法导论》，研究并练习动态规划算法&lt;/li&gt;
&lt;li&gt;刷了100多道 leetcode 题，从 Easy 难度开始入手&lt;/li&gt;
&lt;li&gt;参加天池大数据比赛，初步学习正规使用 Python&lt;/li&gt;
&lt;li&gt;看吴恩达《Machine Learning》视频，做课后作业&lt;/li&gt;
&lt;li&gt;看了一些 Kaggle 的资料，初步了解 Kaggle&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;接下来计划：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继续弄好天池，争取拿个拿得出手的成绩&lt;/li&gt;
&lt;li&gt;继续完成吴恩达《Machine Learning》的后半部分课程&lt;/li&gt;
&lt;li&gt;开始刷 leetcode 的 medium 难度的题，适时总结&lt;/li&gt;
&lt;li&gt;论文希望能有时间推进进度吧&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;推荐资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《程序员的数学》（日）结成浩等&lt;/li&gt;
&lt;li&gt;《概率论与数理统计》 陈希孺（中科大版）&lt;/li&gt;
&lt;li&gt;《具体数学：计算机学科基础》 Knuth等&lt;/li&gt;
&lt;li&gt;《Python for Data Analysis》&lt;/li&gt;
&lt;li&gt;《Hands-On Machine Learning with Scikit-Learn and TensorFlow》&lt;/li&gt;
&lt;li&gt;Coursera:&lt;a href=&#34;https://www.coursera.org/specializations/machine-learning&#34;&gt;《Machine Learning Specialization》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Coursera:&lt;a href=&#34;https://www.coursera.org/learn/neural-networks-deep-learning&#34;&gt;《Neural Networks and Deep Learning》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Coursera:&lt;a href=&#34;https://www.coursera.org/learn/neural-networks&#34;&gt;《Neural Networks for Machine Learning》&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>逻辑回归在梯度提升树中损失函数的梯度推导</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-12-12-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%9C%A8%E6%A2%AF%E5%BA%A6%E6%8F%90%E5%8D%87%E6%A0%91%E4%B8%AD%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E7%9A%84%E6%A2%AF%E5%BA%A6%E6%8E%A8%E5%AF%BC/</link>
      <pubDate>Tue, 12 Dec 2017 16:40:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-12-12-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%9C%A8%E6%A2%AF%E5%BA%A6%E6%8F%90%E5%8D%87%E6%A0%91%E4%B8%AD%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E7%9A%84%E6%A2%AF%E5%BA%A6%E6%8E%A8%E5%AF%BC/</guid>
      <description>&lt;p&gt;一、梯度提升树&lt;/p&gt;
&lt;p&gt;因为做比赛最近用到了 LightGBM 来实现逻辑回归，并尝试修改 LightGBM 的目标函数，于是顺便温习一下梯度提升树和逻辑回归，并简单推导了一下逻辑回归在梯度提升树中的损失函数的梯度计算。&lt;/p&gt;
&lt;p&gt;前面的博文介绍过，当损失函数是平方损失和指数损失时，前向加法模型的提升树（回归提升树）可以很方便地进行目标函数的优化并构造决策树。但对于一般的损失函数，前向加法提升树就比较难实现优化。这时就需要使用梯度提升模型的提升树，它能适应一般的损失函数。类似最速下降法，梯度提升树利用损失函数的负梯度在当前模型的值&lt;/p&gt;
&lt;p&gt;$$- \left[ \frac{\partial L(y,f(x_i))}{\partial f(x_i)} \right]$$&lt;/p&gt;
&lt;p&gt;作为回归提升树算法中的残差的近似值，来拟合一个回归树。&lt;/p&gt;
&lt;p&gt;二、逻辑回归&lt;/p&gt;
&lt;p&gt;逻辑回归是比较简单而且应用非常广泛的机器学习算法。它主要用于二分类任务，但是与一般的分类器不同，逻辑回归并不直接给出未知样本的预测类别，而是给出属于某个类别的概率。&lt;/p&gt;
&lt;p&gt;对一个二分类任务，每个训练样本都属于且只属于两种类别之中的一种，即要么是正样本，要么是负样本。习惯上，一般用 $0$ 表示负样本，用 $1$ 表示正样本。&lt;/p&gt;
&lt;p&gt;设训练集一共有 $m$ 个样本，每个样本有 $n$ 个属性，第 $i$ 个训练样本表示为 $x_i=(x_{i}^{(1)},x_{i}^{(2)},\cdots,x_{i}^{(n)})$，$1 \leq i \leq m$。对应地，每个样本有一个类别，设为 $Y$，则对第 $i$ 个样本，要么 $Y_i=1$，要么 $Y_i=0$。&lt;/p&gt;
&lt;p&gt;现在的任务是，给定 $m$ 个已知对应类别的样本 ${(x_1,Y_1),(x_2,Y_2),\cdots,(x_m,Y_m)}$，用来作为训练集，学习一个分类器模型 $f(x,Y)$，然后用这个模型来对未知类别的样本如 $(x_{m+1},？)$ 进行预测，预测它的类别 $Y_{m+1}$ 是等于 $1$ 还是等于 $0$。&lt;/p&gt;
&lt;p&gt;逻辑回归使用 $sigmod$ 函数作为预测模型，它不直接判定某个样本是正样本还是负样本，而是给出一个条件概率，即在已知样本的 $n$ 个属性的情况下，该样本属于正样本或负样本的概率。数学描述为&lt;/p&gt;
&lt;p&gt;$$P(Y=1 \mid x)=\frac{1}{1+e^{-w \cdot x}}$$&lt;/p&gt;
&lt;p&gt;$$P(Y=0 \mid x)=1-\frac{1}{1+e^{-w \cdot x}}$$&lt;/p&gt;
&lt;p&gt;其中 $w$ 是 $n$ 维的向量，每一维对应样本 $x$ 的 $n$ 个特征，可以理解为：$w^{(i)}$ 表示训练样本 $x$ 第 $i$ 个特征 $x^{(i)}$ 的权重。$w \cdot x$ 为两个向量的内积，即&lt;/p&gt;
&lt;p&gt;$$w \cdot x=w^{(1)}*x^{(1)}+w^{(2)}*x^{(2)}+\cdots+w^{(n)}*x^{(n)}$$&lt;/p&gt;
&lt;p&gt;如果给定了训练集，那么模型训练的任务就是学习上面的权重参数 $w$，如果找到某个确定的向量 $w=w^{*}$ 能把训练样本最正确地分类，那么它就是我们要找的那个最优解。确定这个参数后，模型也就完全确定了。当使用该模型执行预测任务时，只需要把未知样本输入这个模型，即可得出未知样本属于正样本或负样本的概率。&lt;/p&gt;
&lt;p&gt;那么我们如何找到这个最优的向量 $w^{*}$ ？对于逻辑回归，因为它是概率问题，所以一般使用极大似然估计法来估计模型参数。&lt;/p&gt;
&lt;p&gt;极大似然估计法思路：“存在即合理”，使得每个已知样本（即训练样本）出现的概率最大的参数 $w^{*}$ 就是最优的参数。设给定的训练集为 $T={(x_1,Y_1),(x_2,Y_2),\cdots,(x_m,Y_m)}$，其中 $x_i \in R^n$，$Y_i \in {0,1}$，由逻辑回归的定义知每个样本（作为正样本或负样本）出现的概率为&lt;/p&gt;
&lt;p&gt;$$
P(x_i)=
\begin{cases}
P(Y_i=1 \mid x_i)=\frac{1}{1+e^{-w \cdot x_i}}  \&lt;br&gt;
P(Y_i=0 \mid x_i)=1-\frac{1}{1+e^{-w \cdot x_i}}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;有了每个样本的概率 $P(x_i)$，现在只要找到一个 $w=w^{*}$ 使得所有样本的概率同时最大，应该怎么做呢？思路很简单，因为目标是使它们同时最大，因此把它们全部乘起来，得到一个关于 $w$ 的函数，只要使这个函数的值最大，那就相当于使这些概率同时最大了。这个函数称为似然函数，设为 $L(w)$，即&lt;/p&gt;
&lt;p&gt;$$L(w)=P(x_1) * P(x_2) * \cdots * P(x_m)=\prod_{i=1}^{m} P(x_i)$$&lt;/p&gt;
&lt;p&gt;到这里其实已经基本完成学习任务的数学定义了。但是为了能让机器执行学习任务，还需要解决两个小问题，一是公式的推导化简，二是使用什么方法搜索 $w$ 的解空间。&lt;/p&gt;
&lt;p&gt;对于第一个问题，当你尝试把 $P(x_i)$ 的公式代入似然函数 $L(w)$ 时，你就会发现非常困难，因为 $P(x_i)$ 公式针对 $Y_i$ 分了两种情况。这里用到了一个小技巧，可以把两种情况的公式在形式上统一到一个公式。如果你注意到，对于每个样本的类别属性 $Y_i$，它要么是 $1$ 要么是 $0$ ，那么就可以利用这个性质，把两种情况统一写成：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
P(x_i)
&amp;amp;=P(Y_i=1 \mid x_i)^{Y_i} * P(Y_i=0 \mid x_i)^{1-Y_i} \&lt;br&gt;
&amp;amp;=(\frac{1}{1+e^{-w \cdot x_i}})^{Y_i} * (1-\frac{1}{1+e^{-w \cdot x_i}})^{1-Y_i}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;这个形式的 $P(x_i)$ 和上面的原始定义是完全等价的。你可以发现，当 $Y_i=1$ 时，乘号右边的部分因为指数为 $1-Y_i=0$ 就变成了 $1$ 而只剩下左边的部分，这就相当于当 $Y_i=1$ 自动时把 $P(Y_i=1 \mid x_i)$ 这部分选择出来了，反之亦然。&lt;/p&gt;
&lt;p&gt;有了如此统一的 $P(x_i)$ 的表达形式，就可以代入似然函数得到&lt;/p&gt;
&lt;p&gt;$$L(w)=\prod_{i=1}^{m} P(x_i)=\prod_{i=1}^{m} \left[ (\frac{1}{1+e^{-w \cdot x_i}})^{Y_i} * (1-\frac{1}{1+e^{-w \cdot x_i}})^{1-Y_i} \right]$$&lt;/p&gt;
&lt;p&gt;如果进一步考虑到，因为 $P(x_i)$ 是一个概率，如果样本数目太多，大量的小数连乘对于机器来说容易出现下溢等等的精度问题，为避免这些实际问题一般对似然函数取对数，把连乘变成连加，从而得到对数似然函数&lt;/p&gt;
&lt;p&gt;$$\log L(w)=\sum_{i=1}^{m} \left[ Y_i*\log(\frac{1}{1+e^{-w \cdot x_i}})+(1-Y_i)*(1-\frac{1}{1+e^{-w \cdot x_i}}) \right]$$&lt;/p&gt;
&lt;p&gt;现在只要让机器找到一个 $w=w^{*}$ 使得 $\log L(w)$ 最大，也即极大值，那么这就是最优的解。对第二个问题，一般常用的方法是梯度下降法或者拟牛顿法来搜索 $w$ 的解空间，这里限于篇幅不再展开。&lt;/p&gt;
&lt;p&gt;三、逻辑回归之于梯度提升树&lt;/p&gt;
&lt;p&gt;现在有了逻辑回归的目标函数，就可以推导出逻辑回归的损失函数在梯度提升树中的每一轮训练时的负梯度的值。&lt;/p&gt;
&lt;p&gt;首先为了在形式上与第一节中的梯度提升树的负梯度公式保持统一，我们把上面逻辑回归的目标函数 $\log L(w)$ 写成&lt;strong&gt;关于每一个样本的损失函数&lt;/strong&gt;的形式&lt;/p&gt;
&lt;p&gt;$$L(Y_i,P(x_i))=Y_i*\log(\frac{1}{1+e^{-w \cdot x_i}})+(1-Y_i)*(1-\frac{1}{1+e^{-w \cdot x_i}})$$&lt;/p&gt;
&lt;p&gt;为了在接下来的推导过程简便表达，先设&lt;/p&gt;
&lt;p&gt;$$z=\frac{1}{1+e^{-w \cdot x_i}}, \quad 1-z=1-\frac{1}{1+e^{-w \cdot x_i}}$$&lt;/p&gt;
&lt;p&gt;为了简洁过程在这里我们把 $-w*x_i$ 看作一个整体的变量即可，现在分别对 $z$ 和 $1-z$ 求导，有&lt;/p&gt;
&lt;p&gt;$$z&#39;=\frac{e^{-w \cdot x_i}}{(1+e^{-w \cdot x_i})^2}, \quad
(1-z)&amp;lsquo;=-\frac{e^{-w \cdot x_i}}{(1+e^{-w \cdot x_i})^2}
$$&lt;/p&gt;
&lt;p&gt;因此梯度提升树在第 $i$ 个样本处的负梯度（一阶导）：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
-\frac{\partial L(Y_i,P(x_i))}{\partial P(x_i)}
&amp;amp;= -\left[ Y_i * \log(z) + (1-Y_i) * \log(1-z) \right]&amp;rsquo; \&lt;br&gt;
&amp;amp;= -\left[ Y_i * \frac{1}{z} * z&amp;rsquo; + (1-Y_i) * \frac{1}{1-z} * (1-z)&amp;rsquo; \right]\&lt;br&gt;
&amp;amp;= -\left[ Y_i * (1+e^{-w \cdot x}) * \frac{e^{-w \cdot x_i}}{(1+e^{-w \cdot x_i})^2} + (1-Y_i) * \frac{1+e^{-w \cdot x}}{e^{-w \cdot x}} * -\frac{e^{-w \cdot x_i}}{(1+e^{-w \cdot x_i})^2} \right]\&lt;br&gt;
&amp;amp;= -\left[ Y_i * (1-\frac{1}{1+e^{-w \cdot x_i}}) + (1-Y_i) * -\frac{1}{1+e^{-w \cdot x_i}} \right]\&lt;br&gt;
&amp;amp;= -\left[ Y_i - Y_i * \frac{1}{1+e^{-w \cdot x_i}} - \frac{1}{1+e^{-w \cdot x_i}} + Y_i * \frac{1}{1+e^{-w \cdot x_i}} \right]\&lt;br&gt;
&amp;amp;= -\left[ Y_i - \frac{1}{1+e^{-w \cdot x_i}} \right] \&lt;br&gt;
&amp;amp;= \frac{1}{1+e^{-w \cdot x_i}} - Y_i
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;进一步，在 LightGBM 中自定义训练的目标函数的时候需要计算二阶导：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\frac{\partial^2 L(Y_i,P(x_i))}{\partial P(x_i)}
&amp;amp;= (\frac{1}{1+e^{-w \cdot x_i}} - Y_i)&amp;rsquo; \&lt;br&gt;
&amp;amp;= \frac{e^{-w \cdot x_i}}{(1+e^{-w \cdot x_i})^2} \&lt;br&gt;
&amp;amp;= \frac{1}{1+e^{-w \cdot x_i}} * \frac{e^{-w \cdot x_i}}{1+e^{-w \cdot x_i}} \&lt;br&gt;
&amp;amp;= \frac{1}{1+e^{-w \cdot x_i}} * (1-\frac{1}{1+e^{-w \cdot x_i}})
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;关于设置自定义目标函数和验证函数，lightGBM 的官方示例代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;# self-defined objective function
# f(preds: array, train_data: Dataset) -&amp;gt; grad: array, hess: array
# log likelihood loss
def loglikelood(preds, train_data):
    labels = train_data.get_label()
    preds = 1. / (1. + np.exp(-preds))
    grad = preds - labels
    hess = preds * (1. - preds)
    return grad, hess
    
# self-defined eval metric
# f(preds: array, train_data: Dataset) -&amp;gt; name: string, value: array, is_higher_better: bool
# binary error
def binary_error(preds, train_data):
    labels = train_data.get_label()
    return &amp;#39;error&amp;#39;, np.mean(labels != (preds &amp;gt; 0.5)), False

# train model
gbm = lgb.train(params,
                lgb_train,
                num_boost_round=10,
                init_model=gbm,
                fobj=loglikelood,
                feval=binary_error,
                valid_sets=lgb_eval)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《统计学习方法》 李航&lt;/li&gt;
&lt;li&gt;《Machine Learning》 Andrew NG, Coursera&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/LightGBM/tree/master/examples/python-guide&#34;&gt;微软 LightGBM 官方完整代码示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dmlc/xgboost/issues/15&#34;&gt;关于Xgboost的自定义目标函数的相关问题&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>RandomForest与GBDT</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-12-05-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-randomforest%E4%B8%8Egbdt/</link>
      <pubDate>Tue, 05 Dec 2017 11:40:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-12-05-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-randomforest%E4%B8%8Egbdt/</guid>
      <description>&lt;p&gt;一、随机森林（RandomForest）&lt;/p&gt;
&lt;p&gt;前面学习过了 bagging 方法，我们知道该方法是通过&lt;strong&gt;有放回随机抽样&lt;/strong&gt;来构建 $S$ 个和原数据集大小相等的训练集，然后分别进行训练，得到 $S$ 个分类器，再把这些分类器通过多数表决的方式组合得到最终的分类器。&lt;/p&gt;
&lt;p&gt;随机森林算法正是 bagging 方法的一种扩展。随机森林算法不仅对训练集的样本（行）进行抽样，而且对训练集的特征（列）也进行抽样。具体来说，随机森林分为三个步骤：&lt;/p&gt;
&lt;p&gt;1、随机采样&lt;/p&gt;
&lt;p&gt;对于行采样，使用有放回随机采样，和常规 bagging 方法一致，前面已经介绍过，此处不再赘述。&lt;/p&gt;
&lt;p&gt;对于列采样，假设样本有 $M$ 个特征（即训练集有 $M$ 列），那么该算法在每次决策树的节点要分裂的时候，随机选择其中 $m$ 个特征作为考察的特征子集（即只在这 $m$ 个特征之中选出最优特征作为分裂决策，而不是像传统决策树那样考察全部特征）。满足 $m &amp;laquo; M$ ，即每次随机选择的子特征集的大小应远小于总特征集的大小，一般情况下推荐取 $m=log_2(M)$。&lt;/p&gt;
&lt;p&gt;行采样的目的是 “用有限数据模拟无限数据”，而列采样的目的是使每个决策树专注于一小部分特征的学习，使其成为各自的 “窄领域专家”，当最终把这些 “擅长于不同领域的专家” 组合到一起时，就可以大大减少 “所有专家犯同样错误” 的可能，也即过拟合的可能。&lt;/p&gt;
&lt;p&gt;2、完全分裂&lt;/p&gt;
&lt;p&gt;因为有了上一步采样的过程，最终分类器的过拟合现象基本不可能发生，因此在学习各个决策树的时候就按照完全分裂的方式来构造，无须剪枝。如在执行分类任务时，分裂的决策依据就可以选择常规决策树的生成算法的决策依据，如 ID3 算法的信息增益等。&lt;/p&gt;
&lt;p&gt;3、执行决策&lt;/p&gt;
&lt;p&gt;当学习完成，得到 $S$ 个彼此独立的决策树后，就可以把这些决策树组合在一起，作为最终的分类器。组合的方式是常规 bagging 方式，即在对预测输出进行结合时，让各个分类器分别执行预测，得到 $S$ 个预测结果，如果预测任务是分类任务则使用投票法选择票数最多的那个类别返回，如果是回归任务则使用均值法取这些预测结果的均值返回。&lt;/p&gt;
&lt;p&gt;二、梯度提升树（Gradient boosting decision tree，GBDT）&lt;/p&gt;
&lt;p&gt;梯度提升树是 boosting 提升方法中的一种。它的提出是为了解决 “回归提升树在使用一般损失函数的时候，求解目标函数时每一步的优化比较困难” 这一问题。之前学习的回归提升树在使用&lt;strong&gt;前向分步算法&lt;/strong&gt;求解目标函数时，使用的损失函数是指数函数，每一步的优化很简单。但如果要扩展到一般的损失函数，就不那么容易了。因此 Freidman 提出了梯度提升（gradient boosting）算法，利用最速下降法的近似方法，其关键是利用损失函数的负梯度在当前模型的值作为回归提升树中的残差的近似值，来拟合一个回归树。&lt;/p&gt;
&lt;p&gt;梯度提升算法：&lt;/p&gt;
&lt;p&gt;输入：训练数据集 $T$，输入空间 $X$，输出空间 $Y$，损失函数 $L(y,f(x))$
输出：回归提升树 $f_M(x)$&lt;/p&gt;
&lt;p&gt;1、初始化&lt;/p&gt;
&lt;p&gt;$$f_0(x)=argmin\sum_{i=1}^{N}L(y_i,c)$$&lt;/p&gt;
&lt;p&gt;2、对 $M$ 个分类器，进行对应的第 $m=1,2,\cdots,M$ 轮学习。对第 $m$ 轮学习：&lt;/p&gt;
&lt;p&gt;(1)、计算&lt;/p&gt;
&lt;p&gt;$$r_{mi}=-\left[ \frac{\partial L(y_i,f(x_i))}{\partial f(x_i)} \right]_{f(x)=f_{m-1}(x)}$$&lt;/p&gt;
&lt;p&gt;(2)、拟合 $r_{mi}$，得到第 $m$ 个回归树的叶结点区域 $R_{mj}$，$j=1,2,\cdots,J$&lt;/p&gt;
&lt;p&gt;(3)、对 $j=1,2,\cdots,J$，计算&lt;/p&gt;
&lt;p&gt;$$c_{mj}=argmin\sum_{x_i \in R_{mj}} L(y_i,f(x_i)+c)$$&lt;/p&gt;
&lt;p&gt;(4)、更新&lt;/p&gt;
&lt;p&gt;$$f_m(x)=f_{m-1}(x)+\sum_{j=1}^{J}c_{mj}I(x \in R_{mj})$$&lt;/p&gt;
&lt;p&gt;3、执行完 $M$ 轮学习后，得到最终的回归提升树&lt;/p&gt;
&lt;p&gt;$$f_M(x)=\sum_{m=1}^{M}\sum_{j=1}^{J}c_{mj}I(x \in R_{mj})$$&lt;/p&gt;
&lt;p&gt;目前比较流行的 GBDT 算法实现有两个，分别是陈天奇的 xgboost（eXtreme Gradient Boosting） 和 微软的 lightGBM。关于两者的详细分析对比看&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24498293&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/holybin/article/details/25653597&#34;&gt;机器学习中的算法：决策树模型组合之随机森林（Random Forest）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/flying_sfeng/article/details/64133822&#34;&gt;随机森林的原理分析及Python代码实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《统计学习方法》李航&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jianshu.com/p/005a4e6ac775&#34;&gt;GBDT：梯度提升决策树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24498293&#34;&gt;XGBoost, LightGBM性能大对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《机器学习》周志华&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>boosting与bagging</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-11-30-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-boosting%E4%B8%8Ebagging/</link>
      <pubDate>Thu, 30 Nov 2017 21:02:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-11-30-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-boosting%E4%B8%8Ebagging/</guid>
      <description>&lt;p&gt;一、boosting&lt;/p&gt;
&lt;p&gt;前面已经学习过，boosting 是一种提升方法，它通过改变训练样本的权重，学习多个分类器，并将这些分类器进行组合，提高分类的性能。&lt;/p&gt;
&lt;p&gt;boosting 方法每一轮学习一个分类器，并根据本次学习的误差，改变整个样本集合中每个样本的权重，被误分类的那些样本的权重将增大。在下一轮学习新的分类器时，这些被误分类的样本将会被赋予更大的关注。&lt;/p&gt;
&lt;p&gt;因此可以看出，boosting 方法是通过串行训练而获得的，下一轮的学习是基于上一轮的误差进行的。另外，每一轮的训练集都是整个原数据集，数据集中的样本不变，变的是各个样本的权重。&lt;/p&gt;
&lt;p&gt;最后，在学习基本分类器时，会同时计算得到每个分类器的权重。boosting 的最终组合分类器是这一系列基本分类器的加权组合。&lt;/p&gt;
&lt;p&gt;目前比较典型的两种 boosting 算法是 Adaboosting （Adaptive Boosting，自适应boosting）算法，和 GBDT（gradient boosting decision tree，梯度提升决策树）算法。&lt;/p&gt;
&lt;p&gt;二、bagging&lt;/p&gt;
&lt;p&gt;自举汇聚法（bootstrap aggregating），也称 bagging 方法。该方法通过从原数据集中&lt;strong&gt;随机放回抽样&lt;/strong&gt;，得到 $S$ 个和原数据集大小相等的数据集，来作为 $S$ 次训练的训练集，从而训练得到 $S$ 个分类器。&lt;/p&gt;
&lt;p&gt;因为是放回抽样，所以新的数据集中可以有重复的样本，原数据集也可以有部分样本不在新数据集中出现。&lt;/p&gt;
&lt;p&gt;得到了 $S$ 个分类器后，就将这些分类器组合成最终的分类器。执行预测时，让这 $S$ 个分类器分别对新数据进行预测，得到  $S$ 个预测结果。如果是分类任务，则采用多数表决的方式，选择这 $S$ 个结果中票数最多的那个类别返回。如果是回归任务，则取均值作为最终结果返回。&lt;/p&gt;
&lt;p&gt;目前比较典型的 bagging 类的方法有随机森林（Random Forest）。&lt;/p&gt;
&lt;p&gt;三、区别&lt;/p&gt;
&lt;p&gt;1、学习方式&lt;/p&gt;
&lt;p&gt;boosting 的每一轮学习是基于前一轮的误差，因此它的一系列基本分类器的训练是串行的。bagging 是随机不放回抽样得到若干个新的训练集进行各自的训练，彼此间没有联系，可并行。&lt;/p&gt;
&lt;p&gt;2、训练样本&lt;/p&gt;
&lt;p&gt;boosting 不改变样本，而是在每一轮根据误差改变每个样本的权重。bagging 不改变权重，而是从原数据集抽选其中一部分样本（可重复）来构成不同的训练集。&lt;/p&gt;
&lt;p&gt;3、分类器组合方式&lt;/p&gt;
&lt;p&gt;boosting 的最终分类器是基本分类器的加权之和，每个分类器有各自的权重，最终的预测结果是每个分类器的预测结果的加权之和。bagging 的分类器没有权重的概念，每个基本分类器都有相等权重的一票，最终的预测结果是票数最多的那一个类（标签）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>分类提升树与回归提升树</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-11-26-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%88%86%E7%B1%BB%E6%8F%90%E5%8D%87%E6%A0%91%E4%B8%8E%E5%9B%9E%E5%BD%92%E6%8F%90%E5%8D%87%E6%A0%91/</link>
      <pubDate>Sun, 26 Nov 2017 14:40:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-11-26-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%88%86%E7%B1%BB%E6%8F%90%E5%8D%87%E6%A0%91%E4%B8%8E%E5%9B%9E%E5%BD%92%E6%8F%90%E5%8D%87%E6%A0%91/</guid>
      <description>&lt;p&gt;一、提升树（boosting tree）&lt;/p&gt;
&lt;p&gt;提升树是以&lt;strong&gt;分类树&lt;/strong&gt;或&lt;strong&gt;回归树&lt;/strong&gt;为&lt;strong&gt;基本分类器&lt;/strong&gt;的提升方法。提升树被认为是统计学习中性能最好的方法之一。提升方法采用加法模型（即基函数的线性组合）与前向分步算法。对分类问题，决策树是二叉分类树；对回归问题，决策树是二叉回归树。&lt;/p&gt;
&lt;p&gt;提升树模型可以表示为决策树的加法模型：&lt;/p&gt;
&lt;p&gt;$$f_M(x)=\sum_{m=1}^{M}T(x;\theta_m)$$&lt;/p&gt;
&lt;p&gt;其中，$T(x;\theta_m)$ 表示决策树，$\theta_m$ 为决策树的参数，$M$ 为决策树的个数。&lt;/p&gt;
&lt;p&gt;二、二分类问题的提升树&lt;/p&gt;
&lt;p&gt;对于二分类问题，提升树算法只需将 Adaboost 算法中的基本分类器限制为二分类树即可。&lt;/p&gt;
&lt;p&gt;目前比较流行的方案是采用一种简单决策树作为基本分类器：单层决策树（decision stump，也称决策树桩）。它仅仅基于单个特征来执行决策，因此对应地只有一个树结点：根节点。它只能执行一次二分类，如 $x &amp;lt; v$ 或 $x &amp;gt; v$。&lt;/p&gt;
&lt;p&gt;三、回归问题的提升树&lt;/p&gt;
&lt;p&gt;回归树的形式化描述：设训练数据集 $T={(x_1,y_1),(x_2,y_2),\cdots,(x_N,y_N)}$，$x_i \in X \subseteq R^n$，$y_i \in Y \subseteq R$，$X$ 是输入空间，$Y$ 是输出空间。如果将输入空间 $X$ 划分为 $J$ 个不相交的区域 $R_1,R_2,\cdots,R_J$，并且在每个区域上有确定的输出常量 $c_j$，那么回归树可以表示为：&lt;/p&gt;
&lt;p&gt;$$T(x;\theta)=\sum_{j=1}^{J}c_j \cdot I(x \in R_j)$$&lt;/p&gt;
&lt;p&gt;其中，参数 $\theta={(R_1,c_1),(R_2,c_2),\cdots,(R_J,c_J)}$ 表示回归树的区域划分和各区域上的输出常量（即输出的回归值），$J$ 是回归树的复杂度（即&lt;strong&gt;叶结点&lt;/strong&gt;个数）。&lt;/p&gt;
&lt;p&gt;回归问题的提升树算法：&lt;/p&gt;
&lt;p&gt;输入：如上，训练数据集 $T$，输入空间 $X$，输出空间 $Y$
输出：回归提升树 $f_M(x)$&lt;/p&gt;
&lt;p&gt;1、初始化 $f_0(x)=0$&lt;/p&gt;
&lt;p&gt;2、对 $M$ 个分类器，进行对应的第 $m=1,2,\cdots,M$ 轮学习。对第 $m$ 轮学习：&lt;/p&gt;
&lt;p&gt;(1)、计算以前一轮为止，目前学习到的回归提升树 $f_{m-1}(x)$ 的残差&lt;/p&gt;
&lt;p&gt;$$r_{mi}=y_i-f_{m-1}(x_i)，i=1,2,\cdots,N$$&lt;/p&gt;
&lt;p&gt;(2)、拟合残差 $r_{mi}$ 学习得到第 $m$ 个回归树 $T(x;\theta_m)$&lt;/p&gt;
&lt;p&gt;(3)、把该回归树加入 $f_{m-1}(x)$，得到新的回归提升树&lt;/p&gt;
&lt;p&gt;$$f_m(x)=f_{m-1}(x)+T(x;\theta_m)$$&lt;/p&gt;
&lt;p&gt;3、执行完 $M$ 轮学习后，得到最终的回归提升树&lt;/p&gt;
&lt;p&gt;$$f_M(x)=\sum_{m=1}^{M}T(x;\theta_m)$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adaboost算法</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-11-22-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-adaboost%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 22 Nov 2017 14:17:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-11-22-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-adaboost%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;一、提升方法（boosting）&lt;/p&gt;
&lt;p&gt;提升方法主要用于分类问题，它的基本思想是，通过改变训练样本的权重，学习多个不同的分类器，最后把这些基本分类器（也称弱分类器）通过线性组合，得到最终的强分类器。&lt;/p&gt;
&lt;p&gt;这里所谓的提升，通俗地说其实就是将一个分类问题交给多个分类器来处理，“对于一个复杂任务来说，将多个专家的判断进行适当的综合，得出的最终判断，要比任何一个专家单独的判断要好”。虽然每一个弱分类器都是只是一个窄领域的专家，但是把一系列这样的弱分类组合到一起，得到的分类能力并不比单个强分类器差。而且直接学习一个强分类器远比学习一个弱分类器难。&lt;/p&gt;
&lt;p&gt;目前大多数提升方法是通过不断改变训练数据的概率分布（样本权重分布）来不断学习出一系列弱分类器。那么这样需要确定两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在每一轮如何改变训练样本的权值或者概率分布&lt;/li&gt;
&lt;li&gt;如何将这些弱分类器组合成一个强分类器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提升方法中的代表性算法有 Adaboost 算法，它的做法是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在每一轮学习后，提高前一轮学习中被错误分类的样本的权值，降低前一轮学习中被正确分类的样本的权值。这样，后面学习的分类器将会专注于前面的分类器不能很好处理的那些样本，弥补了前面的分类器的不足（窄领域）。举个例子，小明和小红在学习分类一堆水果，小明先学习，他在学习分类的时候由于精力和时间有限，在一轮学习后，小明只能很好地对体积大的水果进行分类，对那些体积小的水果经常分错类。然后到小红学习的时候，为了保证两个人最终能够把这堆水果都正确分类，那么聪明的小红应该知道，自己应该专注于对那些小明不擅长的体积小的水果进行学习，因为如果小明能够很好地分类体积大的水果，而自己能够很好地分类体积小的水果，那么两个人组合互补起来得到的分类能力，远比两个人都强行学习对所有水果分类的效果好得多。&lt;/li&gt;
&lt;li&gt;对于弱分类器的组合，Adaboost 采取加权多数表决的方法，即加大分类误差小的弱分类器的权值，使其在最终表决的时候起较大作用，减小分类误差较大的弱分类器的权值，使其在最终表决中起较小作用。这个很容易理解，谁分类的误差小、准确度高，当然谁在最终的表决里就有更大的话语权了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、Adaboost 算法&lt;/p&gt;
&lt;p&gt;算法目标：给定一个二分类的训练数据集 $T={(x_1,y_1),(x_2,y_2),\cdots,(x_N,y_N)}$，其中 $x_i \in R^n$ 是样本实例，$y_i \in {-1,+1}$ 是样本类别标记。本算法目标是从该训练数据集中，学习出 $M$ 个弱分类器，最后将这些弱分类器通过&lt;strong&gt;线性组合&lt;/strong&gt;，得到最终的一个强分类器。&lt;/p&gt;
&lt;p&gt;输入：训练数据集 $T$，弱学习算法
输出：最终分类器 $G(x)$&lt;/p&gt;
&lt;p&gt;1、初始化训练集 $N$ 个样本的权重分布&lt;/p&gt;
&lt;p&gt;$$D_1=(w_{1,1},\cdots,w_{1,i},\cdots,w_{1,N})$$&lt;/p&gt;
&lt;p&gt;$$w_{1,i}=\frac{1}{N}，i=1,2,\cdots,N$$&lt;/p&gt;
&lt;p&gt;2、对 $M$ 个分类器，开展对应的 $m=1,2,\cdots,M$ 轮学习。对第 $m$ 轮学习：&lt;/p&gt;
&lt;p&gt;(1)、用训练数据集 $T$、第 $m$ 轮的样本权重 $D_m$、和弱分类器学习算法，学习得到第 $m$ 个弱分类器&lt;/p&gt;
&lt;p&gt;$$G_m(x):X \to {-1,+1}$$&lt;/p&gt;
&lt;p&gt;(2)、计算 $G_m(x)$ 在训练集上的分类误差率&lt;/p&gt;
&lt;p&gt;$$e_m=P(G_m(x_i) \neq y_i)=\sum_{i=1}^{N}w_{m,i}I(G_m(x_i) \neq y_i)$$&lt;/p&gt;
&lt;p&gt;(3)、计算 $G_m(x)$ 的权重&lt;/p&gt;
&lt;p&gt;$$\alpha_m=\frac{1}{2}\ln(\frac{1}{e_m}-1)$$&lt;/p&gt;
&lt;p&gt;(4)、计算下一轮学习的样本权重分布&lt;/p&gt;
&lt;p&gt;$$D_{m+1}=(w_{m+1,1},\cdots,w_{m+1,i},\cdots,w_{m+1,N})$$&lt;/p&gt;
&lt;p&gt;$$
w_{m+1,i}=\frac
{w_{m,i} \cdot e^{-\alpha_m y_i G_m(x_i)}}
{\sum_{i=1}^{N} w_{m,i} \cdot e^{-\alpha_m y_i G_m(x_i)}}
，i=1,2,\cdots,N
$$&lt;/p&gt;
&lt;p&gt;3、执行完 $M$ 轮学习后，得到 $M$ 个弱分类器 $G_1(x),G_2(x),\cdots,G_M(x)$，通过线性组合得到最终表决&lt;/p&gt;
&lt;p&gt;$$f(x)=\sum_{m=1}^{M} \alpha_m \cdot G_m(x)$$&lt;/p&gt;
&lt;p&gt;加上符号函数 $sign()$，从而得到最终分类器&lt;/p&gt;
&lt;p&gt;$$G(x)=sign(f(x))=sign \left( \sum_{m=1}^{M} \alpha_m \cdot G_m(x) \right)$$&lt;/p&gt;
&lt;p&gt;三、Adaboost 的解释&lt;/p&gt;
&lt;p&gt;Adaboost 算法是模型为&lt;strong&gt;加法模型&lt;/strong&gt;、损失函数为&lt;strong&gt;指数函数&lt;/strong&gt;、学习算法为&lt;strong&gt;前向分步算法&lt;/strong&gt;时的&lt;strong&gt;二分类&lt;/strong&gt;学习方法。&lt;/p&gt;
&lt;p&gt;1、加法模型（additive model）：&lt;/p&gt;
&lt;p&gt;$$f(x)=\sum_{m=1}^{M} \beta_m \cdot b(x;\gamma_m)$$&lt;/p&gt;
&lt;p&gt;其中 $b(x;\gamma_m)$ 为基函数，$\gamma_m$ 为基函数的参数，$\beta_m$ 为基函数的系数。&lt;/p&gt;
&lt;p&gt;2、前向分步算法&lt;/p&gt;
&lt;p&gt;具体参见《统计学习方法》，这里直接给出结论：由前向分步算法可以推导出 Adaboost 算法，Adaboost 算法是前向分步算法的一个特例。以后有时间再回来补这部分推导。&lt;/p&gt;
&lt;p&gt;3、Adaboost 的训练误差&lt;/p&gt;
&lt;p&gt;Adaboost 的训练误差可以证明是指数下降的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>训练误差与测试误差</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-11-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E8%AE%AD%E7%BB%83%E8%AF%AF%E5%B7%AE%E4%B8%8E%E6%B5%8B%E8%AF%95%E8%AF%AF%E5%B7%AE/</link>
      <pubDate>Mon, 20 Nov 2017 13:57:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-11-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E8%AE%AD%E7%BB%83%E8%AF%AF%E5%B7%AE%E4%B8%8E%E6%B5%8B%E8%AF%95%E8%AF%AF%E5%B7%AE/</guid>
      <description>&lt;p&gt;今天和队友讨论好准备做交叉验证的时候，我们竟然都搞错了对交叉验证的理解，回过头来看书的时候发现是竟然因为搞错了一些最基本的但十分重要的知识，特此记录一下。&lt;/p&gt;
&lt;p&gt;一、交叉验证（cross validation）&lt;/p&gt;
&lt;p&gt;机器学习中的交叉验证是一种常用的模型选择的方法。交叉验证的基本思想是重复地使用数据，把给定的数据集进行切分，分成训练集和测试集，在此基础上反复地进行训练、测试，并选择最好的模型。&lt;/p&gt;
&lt;p&gt;1、简单交叉验证&lt;/p&gt;
&lt;p&gt;随机地将已给数据集分为两部分，约 70% 作为训练集，剩下 30% 作为测试集。然后用训练集在不同的参数条件下训练模型，得到各个参数不同的模型，接着在测试集上评价模型的测试误差，选出测试集误差最小的模型。 这种方法只把训练集和测试集做一次划分。&lt;/p&gt;
&lt;p&gt;2、$S$ 折交叉验证&lt;/p&gt;
&lt;p&gt;目前应用最多的是 $S$ 折交叉验证，首先随机地将已给数据切分成 $S$ 个互不相交的大小相同的子集，然后利用其中任意 $S-1$ 个子集作为训练集训练得到一个模型，把剩下的那一个子集作为测试集测试模型得到一个测试误差。如此重复 $S$ 次，直到每一个子集都作为一次测试集，一共得出 $S$ 个不同的模型，和 $S$ 个对应的测试误差。最后，选择出这 $S$ 个测试误差中最小的那个模型，作为最终确定的最优模型。&lt;/p&gt;
&lt;p&gt;到这里，我就不明白，为什么这样做可以避免过拟合？选择测试误差最小的那个模型，不就又过拟合了吗？后来查了一下书，其实是我把训练误差和测试误差搞混了，而且过拟合的定义没理解好。&lt;/p&gt;
&lt;p&gt;二、过拟合（over-fitting）&lt;/p&gt;
&lt;p&gt;所谓过拟合，是指在学习时选择的模型包含参数过多，以致于出现这一模型对已知数据预测得很好，但是对未知数据预测很差的现象。也就是说，在训练集上训练误差已经非常小，但在测试集上测试误差却非常大。&lt;/p&gt;
&lt;p&gt;出现这个问题往往是因为在设定训练的目标函数时，只片面地追求对训练数据的预测能力。例如，假设现在有一个任务是用训练集（点集）去拟合一个多项式函数，然后用这个多项式函数去预测一些未知的样本。如果在设定训练的目标函数时，只考虑多项式函数与训练样本总误差的最小化，那么在学习的时候为了找到这个最小误差，模型会不断地提高自己的多项式次数（也即模型的复杂度），尝试用三次，四次，或者更高次的多项式，去逼近所有训练样本，达到最小误差。极端的情况下有可能找到一个极高次的多项式函数，使得所有样本都落在这个函数上，训练样本总误差达到了 $0$。但实际上，数据集中往往包含各种噪音和离群点，而模型却无法分辨，在计算总误差的时候依然包含了这些噪音，为了减小这些误差不得不提高多项式函数的次数。如下图所示，理想的模型其实是一个二次多项式函数，但是由于只考虑了使总误差最小，学习的结果是得到一个高次的多项式函数，那么如果用这个高次多项式来预测本应该是二次多项式的未知数据，那么预测效果将会非常糟糕。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2017-11-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E8%AE%AD%E7%BB%83%E8%AF%AF%E5%B7%AE%E4%B8%8E%E6%B5%8B%E8%AF%95%E8%AF%AF%E5%B7%AE/%E8%BF%87%E6%8B%9F%E5%90%88.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以认为，在训练误差已经比较小的情况下（模型训练完成后），测试误差是对过拟合程度的一种衡量。如果模型在测试集上的测试误差越小，说明过拟合程度越小，如果测试误差越大，则说明过拟合程度比较严重了。所以上面交叉验证中，选择测试误差最小的模型，实际上就是过拟合程度最小的模型。&lt;/p&gt;
&lt;p&gt;三、训练误差（training error）与测试误差（test error）&lt;/p&gt;
&lt;p&gt;统计学习的目的是使学习到的模型不仅对已知数据（训练集），而且对未知数据（测试集）都有很好的预测能力。当损失函数给定时，基于损失函数的模型的训练误差和预测误差就成为了模型训练效果评估的标准。&lt;/p&gt;
&lt;p&gt;假设给定训练集为 $Tr={ (x_1,y_1),(x_2,y_2),\cdots,(x_N,y_N) }$，测试集为 $Te={ (x_1,y_1),(x_2,y_2),\cdots,(x_M,y_M) }$，其中 $x_i \in R^n$，$y_i \in R$，选定的损失函数是 $L(Y,f(X))$，学习到的模型是 $Y=\hat{f}(X)$，则输入某个样本到模型得到的预测值为 $\hat{y}_i=\hat{f}(x_i)$，则&lt;/p&gt;
&lt;p&gt;训练误差是模型 $Y=\hat{f}(X)$ 在训练集 $Tr$ 上的平均损失：&lt;/p&gt;
&lt;p&gt;$$R_{emp}(\hat{f})=\frac{1}{N}\sum_{i=1}^{N}L(y_i,\hat{y}_i)$$&lt;/p&gt;
&lt;p&gt;测试误差是模型 $Y=\hat{f}(X)$ 在测试集 $Te$ 上的平均损失：&lt;/p&gt;
&lt;p&gt;$$e_{test}=\frac{1}{M}\sum_{i=1}^{M}L(y_i,\hat{y}_i)$$&lt;/p&gt;
&lt;p&gt;根据前人的经验，训练误差和测试误差与模型有着如下图的关系：当模型的复杂度增大时，训练误差会逐渐减小并趋向于 0，而测试误差会先减小，达到最小值后又增大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2017-11-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E8%AE%AD%E7%BB%83%E8%AF%AF%E5%B7%AE%E4%B8%8E%E6%B5%8B%E8%AF%95%E8%AF%AF%E5%B7%AE/%E6%A8%A1%E5%9E%8B%E5%A4%8D%E6%9D%82%E5%BA%A6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当选择的模型复杂度过大时，过拟合现象就会发生（训练误差很小，但测试误差很大），这样在训练模型时，就需要防止过拟合，进行最优的模型选择，即选择复杂度适当的模型，目的是找到具有最优泛化能力（最小测试误差）的模型，因为我们训练模型的目的不是让模型完美逼近训练集，而是让模型完美预测未知数据。&lt;/p&gt;
&lt;p&gt;而常用的模型选择方式有两种，一种是上面的交叉验证法，取预测效果最好的众多个模型中的一个，另一个方法就是在目标函数中加入正则项，惩罚模型在学习过程中增大的复杂度。例如在上面所举的例子中，可以在目标函数中加入关于模型复杂度的函数，当模型复杂度越高，这个函数的值就越大。那么这样一来，模型在学习的时候，最小化的目标就不仅仅是训练样本的总误差了，而是训练样本总误差与模型复杂度之和。如此这般就可以因避免片面追求误差最小而提高了复杂度。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CART算法</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-11-18-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-cart%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 18 Nov 2017 16:34:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-11-18-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-cart%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;分类与回归树（classification and regression tree, CART）模型是应用广泛的决策树学习方法，&lt;strong&gt;既可以用于分类，也可以用于回归&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;回顾之前学习的 ID3 算法，它的做法是每次选取当前最佳的特征来分割数据，分割依据是该特征的所有取值。也就是说，如果这个特征有 $n$ 个取值，那么数据将立即被分割成 $n$ 分。一旦被切分之后，该特征在之后将不会再被考虑。这样有两个问题：一是切分过于迅速，如果 $n$ 很大，那么数据将被马上切分成大量的小份，影响后续切分的效果。二是，这样的决策树只能处理离散型的数值，如果特征的取值是连续型数值，则需要将其预处理转化成离散型，但这样就会人为地破坏了连续型变量的内在性质。&lt;/p&gt;
&lt;p&gt;CART 算法解决了上述问题。CART 设定决策树是&lt;strong&gt;二叉树&lt;/strong&gt;，每次切分数据只做二元切分，即把数据集切分成两份。对某个连续型的特征，设定一个切分值，大于此值的数据进入左子树，反之则进入右子树。然后递归地构建子树。&lt;/p&gt;
&lt;p&gt;一、CART 生成&lt;/p&gt;
&lt;p&gt;CART 决策树的生成就是递归地构建二叉决策树的过程。对回归树用&lt;strong&gt;平方误差最小化&lt;/strong&gt;准则，对分类树用&lt;strong&gt;基尼指数最小化&lt;/strong&gt;准则，进行特征选择。&lt;/p&gt;
&lt;p&gt;1、回归树的生成&lt;/p&gt;
&lt;p&gt;输入：训练数据集 $D$，特征集 $A$
输出：回归树 $T$&lt;/p&gt;
&lt;p&gt;(1)、寻找最佳的切分特征 $A_g$ 和对应的最佳切分值 $v$：遍历特征集中每一个特征，尝试以该特征的每一个取值作为切分值，对数据集执行二元切分，然后计算切分误差，如果当前误差小于记录的最小误差，那么更新最优切分特征、最优切分值、最小误差。遍历完成后，返回最优切分特征、最优切分值。&lt;/p&gt;
&lt;p&gt;其中误差一般使用目标变量的方差来计算，设数据集为 $D$，数据集中的目标变量为 $D.Y$，数据集在执行一次二元切分后被切分成 $D_{left}$ 和 $D_{right}$，则此次切分减小的混乱程度为&lt;/p&gt;
&lt;p&gt;$$g(D,A_g,v)=var(D.Y)- \left[ var(D_{left}.Y)+var(D_{right}.Y) \right]$$&lt;/p&gt;
&lt;p&gt;其中 $D_{left}={D \mid D.A_g&amp;gt;v}$，$D_{right}={D \mid D.A_g \leq v}$。&lt;/p&gt;
&lt;p&gt;(2)、如果该结点不能再分（左右两个子集方差之和比原数据集方差还大，或者大于给定的某个阈值等等），将该结点存为叶结点，把该结点上的数据集&lt;strong&gt;目标变量的平均值&lt;/strong&gt;作为该结点的输出值返回；否则执行二元切分，把数据集以 $v$ 为切分值，按特征 $A_g$ 切分成 $D_{left}$ 和 $D_{right}$ 两个子集，并对应地生成左右两个子树&lt;/p&gt;
&lt;p&gt;(3)、递归地对左右子树重复执行前面的步骤，直到满足停止条件&lt;/p&gt;
&lt;p&gt;构造决策树：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;def createTree(dataSet,tolN,tolS):
    # 寻找最优切分特征、最优切分值
    feat, value = chooseBestSplit(dataSet,tolN,tolS)
    
    # 切分特征为空，说明不能再分，直接返回value作为叶结点的输出值
    if feat is None:
        return value
        
    # 把最优切分特征、最优切分值记录到树中
    retTree = {}
    retTree[&amp;#39;spInd&amp;#39;] = feat
    retTree[&amp;#39;spVal&amp;#39;] = value

    # 执行二元切分，得到左右子树对应的两个数据集子集
    leftSet, rightSet = binSplitDataSet(dataSet, feat, value)
    
    # 在左右子树继续递归地调用自己，构造决策树
    retTree[&amp;#39;left&amp;#39;] = createTree(leftSet, leafType, errType, ops)
    retTree[&amp;#39;right&amp;#39;] = createTree(rightSet, leafType, errType, ops)
    
    return retTree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;选择最优切分特征、最优切分值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;def chooseBestSplit(dataSet,tolN,tolS):
    # 如果数据集的目标变量全部属于同一个值，则不用再切分
    # 此时返回空特征，并把数据集的目标变量（最后一列）的平均值作为返回值
    if len(set(dataSet[:, -1].T.tolist()[0])) == 1:
        return None, mean(dataSet[:, -1])
        
    # 求数据集的目标变量的总方差
    m, n = shape(dataSet)
    S = var(dataSet[:, -1]) * m

    # 初始化最小方差、最优特征、最优切分值
    bestS = inf
    bestIndex = 0
    bestValue = 0
    
    # 遍历每个特征的每个取值
    for featIndex in range(n - 1):
        for splitVal in set((dataSet[:, featIndex].T.A.tolist())[0]):
            
            # 执行一次二元切分尝试
            mat0, mat1 = binSplitDataSet(dataSet, featIndex, splitVal)

            # 计算两个子集的方差之和
            newS = var(mat0[:, -1]) * shape(mat0)[0] + var(mat1[:, -1]) * shape(mat1)[0]
            
            # 如果误差小于当前记录的最小误差，则记录这次切分
            if newS &amp;lt; bestS:
                bestIndex = featIndex
                bestValue = splitVal
                bestS = newS

    # 如果误差减小不大，小于给定的阈值 tolS，则不再切分
    if S - bestS &amp;lt; tolS:
        return None, mean(dataSet[:, -1])

    # 如果切分的两个子集的大小小于给定的阈值 tolN，则不再切分
    mat0, mat1 = binSplitDataSet(dataSet, bestIndex, bestValue)
    if shape(mat0)[0] &amp;lt; tolN or shape(mat1)[1] &amp;lt; tolN:
        return None, mean(dataSet[:, -1])

    # 返回最优切分特征和最优切分值
    return bestIndex, bestValue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行一次二元切分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;def binSplitDataSet(dataSet, feature, value):
    mat0 = dataSet[nonzero(dataSet[:, feature] &amp;gt; value)[0], :]  # [0]
    mat1 = dataSet[nonzero(dataSet[:, feature] &amp;lt;= value)[0], :]  # [0]
    return mat0, mat1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、分类树的生成&lt;/p&gt;
&lt;p&gt;分类树用基尼指数选择最优特征，同时决定该特征的最优切分值。&lt;/p&gt;
&lt;p&gt;基尼指数：分类问题中，假设有 $K$ 个类，样本点属于第 $k$ 类的概率为 $p_k$ ，则概率分布的基尼指数为：&lt;/p&gt;
&lt;p&gt;$$Gini(p)=\sum_{k=1}^{K}p_k(1-p_k)=1-\sum_{k=1}^{K}p_{k}^{2}$$&lt;/p&gt;
&lt;p&gt;对于给定的样本集合 $D$，其基尼指数为：&lt;/p&gt;
&lt;p&gt;$$Gini(D)=1-\sum_{k=1}^{K} \left( \frac{|C_k|}{|D|} \right)^2$$&lt;/p&gt;
&lt;p&gt;这里，$C_k$ 是 $D$ 中属于第 $k$ 类的样本子集，$K$ 是类的个数。&lt;/p&gt;
&lt;p&gt;设集合 $D$ 被特征 $A_g$ 的某个取值 $v$ 二元切分，得到两个子集 $D_{left}$ 和 $D_{right}$，则在特征 $A_g$ 和切分值 $v$ 的条件下，集合 $D$ 的基尼指数定义为&lt;/p&gt;
&lt;p&gt;$$
Gini(D,A_g,v)=
\frac{|D_{left}|}{|D|}Gini(D_{left})+
\frac{|D_{right}|}{|D|}Gini(D_{right})
$$&lt;/p&gt;
&lt;p&gt;其中 $D_{left}={D \mid D.A_g&amp;gt;v}$，$D_{right}={D \mid D.A_g \leq v}$。&lt;/p&gt;
&lt;p&gt;基尼指数 $Gini(D)$ 表示集合 $D$ 的不确定性，基尼指数 $Gini(D,A_g,v)$ 表示按特征 $A_g$ 的值 $v$ 二元切分后的不确定性。基尼指数越大，样本集合的不确定性越大，这一点和熵类似。&lt;/p&gt;
&lt;p&gt;输入：训练数据集 $D$，停止计算的条件
输出：CART 决策树&lt;/p&gt;
&lt;p&gt;根据训练数据集，从根节点开始，递归地对每个结点进行一下操作：&lt;/p&gt;
&lt;p&gt;(1)、设结点的数据集为 $D$，计算 $Gini(D)$。然后遍历每一个特征的每一个取值，尝试二元切分，并计算 $Gini(D,A_g,v)$，找出基尼指数最小的特征及其对应的切分值，作为最优切分特征和最优切分值。&lt;/p&gt;
&lt;p&gt;(2)、把数据集 $D$ 按照最优切分特征和最优切分值进行二元切分，得到两个子集，并对应地从本结点生成两个子结点，将两个子集分配到对应的结点中去。&lt;/p&gt;
&lt;p&gt;(3)、对左右子树递归地调用前面步骤，直至满足停止条件。算法的停止条件是结点中的样本个数小于预定阈值，或样本集的基尼指数小于预定阈值，或者没有更多特征。这里需要注意，分类树的叶子结点不是像回归树那样取叶子结点所对应的数据集的目标变量的均值，而是像 ID3 算法那个，选择叶子结点对应的数据集中实例数最大的那个类别作为叶子结点的类别返回。&lt;/p&gt;
&lt;p&gt;二、CART 剪枝&lt;/p&gt;
&lt;p&gt;如果一棵决策树的结点过多，表明该模型可能对数据进行了“过拟合”。要分析是否确实发生了过拟合，可以使用交叉验证来判断。另一方面，可以在构造决策树的时候采取一些措施来防止发生过拟合，降低决策树模型的复杂度，此称为决策树的剪枝（pruning）。决策树的剪枝有两种方式，一种是预剪枝（prepruning），另一种是后剪枝（postpruning）。&lt;/p&gt;
&lt;p&gt;1、预剪枝&lt;/p&gt;
&lt;p&gt;预剪枝实际上就是在决策树构建过程中加入算法的停止条件。具体来说，就是前面所述的例子中，在选择最优特征最优切分点的函数 $chooseBestSplit()$ 中加入的停止条件： $tolS$ 和 $tolN$ 两个参数。这两个参数所表达的意义是，对某个结点的数据集，如果二元切分之后的两个子集总误差比原数据集误差下降很小，或者子集的大小太小，那么不对这个结点进行切分，直接把它当作一个叶子结点返回，这样就阻止了决策树在这个结点上的过分生长，简化了决策树。实验证明，决策树生成算法对这两个参数非常敏感。但是这样也会有一个缺点，需要不断的人为地调整这两个参数来达到好的结果，这并不是一个好的办法。&lt;/p&gt;
&lt;p&gt;2、后剪枝&lt;/p&gt;
&lt;p&gt;后剪枝方法需要将数据分成测试集和训练集。首先用训练集生成长一棵足够大足够复杂的决策树，然后从上而下找到叶子结点，用测试集来判断将这些叶子结点合并是否能降低测试误差。如果是就合并。剪枝算法相关代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;# 从叶子结点到根结点坍塌树，把每棵子树根结点替换成左右子树的均值
def getMean(tree):
    if isTree(tree[&amp;#39;right&amp;#39;]):
        tree[&amp;#39;right&amp;#39;] = getMean(tree[&amp;#39;right&amp;#39;])
    if isTree(tree[&amp;#39;left&amp;#39;]):
        tree[&amp;#39;left&amp;#39;] = getMean(tree[&amp;#39;left&amp;#39;])
    return (tree[&amp;#39;left&amp;#39;] + tree[&amp;#39;right&amp;#39;]) / 2

# 剪枝算法
def prune(tree, testData):
    # 若测试集大小为0，对本子树进行坍塌，收缩到一个值返回
    if shape(testData)[0] == 0:
        return getMean(tree)

    # 若本结点有左右子树，则把测试集按本结点进行二元划分得到左右子集
    if isTree(tree[&amp;#39;right&amp;#39;]) or isTree(tree[&amp;#39;left&amp;#39;]):
        leftSet, rightSet = binSplitDataSet(testData, tree[&amp;#39;spInd&amp;#39;], tree[&amp;#39;spVal&amp;#39;])

    # 如果本结点有左子树，用测试集的左子集对该子树剪枝
    if isTree(tree[&amp;#39;left&amp;#39;]):
        tree[&amp;#39;left&amp;#39;] = prune(tree[&amp;#39;left&amp;#39;], leftSet)
    
    # 如果本结点有右子树，用测试集的右子集对该子树剪枝
    if isTree(tree[&amp;#39;right&amp;#39;]):
        tree[&amp;#39;right&amp;#39;] = prune(tree[&amp;#39;right&amp;#39;], rightSet)

    # 若本结点既无左子树，也无右子树
    # 仍然按本结点把测试集进行二元划分
    if not isTree(tree[&amp;#39;left&amp;#39;]) and not isTree(tree[&amp;#39;right&amp;#39;]):
        leftSet, rightSet = binSplitDataSet(testData, tree[&amp;#39;spInd&amp;#39;], tree[&amp;#39;spVal&amp;#39;])
        
        # 分别计算不合并和合并的误差
        errorNoMerge = sum(power(leftSet[:, -1] - tree[&amp;#39;left&amp;#39;], 2)) + sum(power(rightSet[:, -1] - tree[&amp;#39;right&amp;#39;], 2))
        treeMean = (tree[&amp;#39;left&amp;#39;] + tree[&amp;#39;right&amp;#39;]) / 2.0
        errorMerge = sum(power(testData[:, -1] - treeMean, 2))
        
        # 确定是否合并
        if errorMerge &amp;lt; errorNoMerge:
            print &amp;#34;merging&amp;#34;
            return treeMean
        else:
            return tree
    else:
        return tree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ID3算法与C4.5算法</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-11-15-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-id3%E7%AE%97%E6%B3%95%E4%B8%8Ec4.5%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 15 Nov 2017 16:34:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-11-15-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-id3%E7%AE%97%E6%B3%95%E4%B8%8Ec4.5%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;一、ID3算法&lt;/p&gt;
&lt;p&gt;ID3算法的核心是在决策树各个结点上应用“信息增益”准则选择特征，递归地构建决策树。具体方法：从根结点开始，对结点计算所有可能的特征的信息增益，选择信息增益最大的特征作为结点的特征，由该特征的不同取值建立子结点；再对子结点递归地调用以上方法，构建决策树，直到所有特征的信息增益均很小或没有特征可以选择为止。&lt;/p&gt;
&lt;p&gt;输入：训练数据集 $D$，特征集 $A$，阈值 $\varepsilon$
输出：决策树 $T$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若 $D$ 中所有实例属于同一类 $C_k$，则 $T$ 为单结点树，并将 $C_k$ 作为该结点的类标记，返回 $T$；&lt;/li&gt;
&lt;li&gt;若 $A=\emptyset$ ，则 $T$ 为单结点树，将 $D$ 中实例数最大的类 $C_k$ 作为该结点的类标记，返回 $T$；&lt;/li&gt;
&lt;li&gt;遍历 $A$ 中每一个特征，&lt;a href=&#34;https://yushengwxxx.github.io/2017/11/11/2017-11-11-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A/&#34;&gt;计算信息增益&lt;/a&gt; $g(D,A)=H(D)-\sum_{i=1}^{n}\frac{|D_i|}{|D|}H(D_i)$，选择信息增益最大特征 $A_g$。如果 $A_g$ 的信息增益小于阈值 $\varepsilon$，则置 $T$ 为单结点树，并将 $D$ 中实例数最大的类 $C_k$ 作为该结点的类标记，返回 $T$；否则，对 $A_g$ 的每一个可能值 $a_i$，按照 $A_g=a_i$ 将 $D$ 分割为若干非空子集 $D_i$，对每个子集 $D_i$，将其实例数中最大的类作为标记，构建子结点，由结点及其子结点构成树 $T$，返回 $T$；&lt;/li&gt;
&lt;li&gt;对第 $i$ 个子结点，以 $D_i$ 为训练集，以 $A- { A_g }$ 为特征集，递归地调用前3步，得到子树 $T_i$，返回 $T_i$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是部分关键代码，参考《机器学习实战》第三章。这里忽略了上述算法的“信息增益阈值 $\varepsilon$ 这一条件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;def createTree(dataSet, labels):
    
    # 1、若所有实例属于同一类，返回该类
    classList = [example[-1] for example in dataSet]
    if classList.count(classList[0]) == len(classList):
        return classList[0]
    
    # 2、若特征值集合为空集，则返回样本类别中最多的那个类别
    if len(dataSet[0]) == 1:
        return majorityCnt(classList)
        
    # 3、遍历特征值集合中的每一个特征，找出信息增益最大的特征
    bestFeat = chooseBestFeatureToSplit(dataSet)
    bestFeatLabel = labels[bestFeat]
    
    # 4、以该特征的label建立结点，并从特征集合中删去该特征
    myTree = {bestFeatLabel: {}}
    del (labels[bestFeat])
    
    # 5、收集该特征的所有值，去掉重复值
    featValues = [example[bestFeat] for example in dataSet]
    uniqueVals = set(featValues)
    
    # 6、对每一种取值，递归调用本函数进行决策树的构建
    for value in uniqueVals:
        subLabels = labels[:]
        myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value), subLabels)
    
    return myTree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二、C4.5算法&lt;/p&gt;
&lt;p&gt;C4.5算法与ID3算法基本相同，唯一不同的地方只是在生成决策树的过程中，使用“信息增益比”而不是直接使用“信息增益”来选择特征。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>信息增益</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-11-11-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A/</link>
      <pubDate>Sat, 11 Nov 2017 23:59:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-11-11-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A/</guid>
      <description>&lt;p&gt;一、熵（entropy）&lt;/p&gt;
&lt;p&gt;熵是表示随机变量不确定性的度量。熵越大，随机变量的不确定性越大。设 $X$ 是一个取值为有限个的离散型随机变量，其概率分布为：&lt;/p&gt;
&lt;p&gt;$$P(X=x_i)=p_i \text{ , } i=1,2,\cdots,n$$&lt;/p&gt;
&lt;p&gt;则随机变量 $X$ 的熵定义为&lt;/p&gt;
&lt;p&gt;$$H(X)=-\sum_{i=1}^{n}p_i\log(p_i)$$&lt;/p&gt;
&lt;p&gt;当式中对数以 $2$ 为底时，熵的单位为比特（bit）；以自然对数 $e$ 为底时，熵的单位为纳特（nat）。&lt;/p&gt;
&lt;p&gt;二、条件熵（conditional entropy）&lt;/p&gt;
&lt;p&gt;条件熵 $H(Y \mid X)$ 表示已知随机变量 $X$ 的条件下，随机变量 $Y$ 的不确定性。&lt;/p&gt;
&lt;p&gt;设有随机变量 $(X,Y)$，联合分布概率为&lt;/p&gt;
&lt;p&gt;$$P(X=x_i,Y=y_i)=p_{ij} \text{ , } i=1,2,\cdots,n \text{ ; }j=1,2,\cdots,m$$&lt;/p&gt;
&lt;p&gt;则随机变量 $X$ 给定条件下，随机变量 $Y$ 的条件熵为&lt;/p&gt;
&lt;p&gt;$$H(Y \mid X)=\sum_{i=1}^{n} p_i H(Y \mid X=x_i)$$&lt;/p&gt;
&lt;p&gt;这里 $p_i=P(X=x_i) \text{ , } i=1,2,\cdots,n$。&lt;/p&gt;
&lt;p&gt;当熵和条件熵的概率有数据估计得到时，所对应的熵与条件熵称为经验熵（empirical entropy）和经验条件熵（empirical conditional entropy）。&lt;/p&gt;
&lt;p&gt;三、信息增益（information gain）&lt;/p&gt;
&lt;p&gt;信息增益表示得知特征 $X$ 的信息而使得类 $Y$ 的信息的不确定性减少的程度。&lt;/p&gt;
&lt;p&gt;特征 $A$ 对训练数据集 $D$ 的信息增益 $g(D,A)$ 定义为集合 $D$ 的经验熵 $H(D)$ 与特征 $A$ 给定条件下 $D$ 的经验条件熵 $H(D \mid A)$ 之差&lt;/p&gt;
&lt;p&gt;$$g(D,A)=H(D)-H(D \mid A)$$&lt;/p&gt;
&lt;p&gt;进一步，如果 $A$ 的取值把 $D$ 划分成 $D_1,D_2,\cdots,D_n$ 这 $n$ 个子集，那么&lt;/p&gt;
&lt;p&gt;$$H(D \mid A)=\sum_{i=1}^{n}\frac{|D_i|}{|D|}H(D_i)$$&lt;/p&gt;
&lt;p&gt;因此&lt;/p&gt;
&lt;p&gt;$$g(D,A)=H(D)-\sum_{i=1}^{n}\frac{|D_i|}{|D|}H(D_i)$$&lt;/p&gt;
&lt;p&gt;上述公式可以理解为，选择特征 $A$ 带来的信息增益为：原数据集的熵（混乱程度，也可以理解为不确定性），减去被特征 $A$ 划分成 $n$ 个子集后这 $n$ 个子集的熵的期望，而得到的差值。&lt;/p&gt;
&lt;p&gt;我们在构建决策树时的目标是：使每次被划分数据集的不确定性尽可能小。由于原数据集的熵已经确定，那么，如果选择某个特征划分数据集后，整个数据集的不确定性减小最多（即信息增益最大），那么该特征就是当前最优的分类特征。&lt;/p&gt;
&lt;p&gt;找到最优特征后，取该特征下的每一个值构建一个子结点，把数据集划分成 $n$ 个子集合。例如，假设当前最优特征为“年龄”，该特征下一共有“青年”、“中年”、“老年”三种取值，那么在决策树的当前结点下面新建对应的三个孩子结点，把数据集按这三种取值划分为三个子集，传递到对应的三个孩子结点。&lt;/p&gt;
&lt;p&gt;四、信息增益比（information gain ratio）&lt;/p&gt;
&lt;p&gt;以信息增益作为划分训练数据集的特征，存在偏向于选择取值较多的特征的问题。用信息增益比可以对这一问题校正。&lt;/p&gt;
&lt;p&gt;特征 $A$ 对训练数据集 $D$ 的信息增益比 $g_R(D,A)$ 定义为其信息增益 $g(D,A)$ 与训练数据集 $D$ 关于特征 $A$ 的值的熵 $H_A(D)$ 之比，即&lt;/p&gt;
&lt;p&gt;$$g_R(D,A)=\frac{g(D,A)}{H_A(D)}$$&lt;/p&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;p&gt;$$H_A(D)=-\sum_{i=1}^{n}\frac{|D_i|}{|D|}\log_2\frac{|D_i|}{|D|}$$&lt;/p&gt;
&lt;p&gt;$n$ 是特征 $A$ 取值的个数。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>二叉堆建堆时间复杂度</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-11-08-%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E5%A0%86%E5%BB%BA%E5%A0%86%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Wed, 08 Nov 2017 16:07:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-11-08-%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E5%A0%86%E5%BB%BA%E5%A0%86%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>&lt;p&gt;一、二叉堆建堆过程&lt;/p&gt;
&lt;p&gt;二叉堆的定义、父子结点的相对位置计算公式，还有建堆过程在 &lt;a href=&#34;https://yushengwxxx.github.io/2017/11/04/2017-11-04-%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/&#34;&gt;排序算法（一）&lt;/a&gt; 中已经说明。这里稍微温习一下建堆的过程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从数组的中间位置开始，往左边扫描每个元素，并调用 $sink()$ 方法往下不断调整父子结点的相对位置，如果此堆是最大堆，那么 $sink()$ 方法会使小的结点下沉，大的结点上浮。当扫描完成，则可以保证每个子堆都是父结点大于两个孩子结点，此时堆有序，建堆完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从树的角度来理解，建堆的总时间成本，就是对于下标小于 $\frac{n}{2}$ 的所有结点，也即所有的非叶子结点（二叉堆是完全二叉树），从原位置下沉到正确的位置的总成本。最好的情况是所有非叶子结点都比它的孩子结点大，即数组本来就是堆有序的。最坏的情况是所有非叶子结点都要从原位置一直向下被交换到叶子结点。现在我们来考虑最坏情况的时间复杂度。&lt;/p&gt;
&lt;p&gt;在此之前，需要先得到推导过程中会用到的两个小结论。&lt;/p&gt;
&lt;p&gt;二、含有 $n$ 个元素的二叉堆的高度为 $\lfloor \log_2{n} \rfloor$&lt;/p&gt;
&lt;p&gt;《算法导论》中给出的关于堆的高度的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;堆中一个结点的高度为该结点到叶子结点最长简单路径上边的数目；一个堆的高度即为根结点的高度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;换句通俗的话说，就是从下往上数，以最深的叶子结点为第一层，高度为 $0$（注意这是《算法导论》给出的堆的高度定义，好像和树的高度的定义不太一样，网上有些博客对于树的高度好像是把最深叶子结点的高度算作 $1$ 而不是 $0$）；它的父结点所在的层为第二层，高度为 $1$，依此类推。因此，一个堆的高度（即根结点的高度）在数值上就等于该堆的总层数减一。这样就可转化成求含 $n$ 个元素的二叉树的总层数的简单问题：&lt;/p&gt;
&lt;p&gt;对于一棵完全二叉树，结点总数为 $n$，设一共有 $x$ 层。根据完全二叉树的定义和性质，它的前 $x-1$ 层是一棵满二叉树。这棵满二叉树的总结点个数可以轻松求出：从根节点往下数，第一层共 $2^0$ 个结点，第二层共 $2^1$ 个结点，第 $k$ 层共 $2^{k-1}$ 个结点，因此满二叉树结点总数为：&lt;/p&gt;
&lt;p&gt;$$2^0+2^1+\cdots+2^{(x-1)-1}=2^{x-1}-1$$&lt;/p&gt;
&lt;p&gt;考虑最后一层，可能是满的也可能不是满的，我们无法确定，但是可以确定这一层必定多于或等于 $1$ 个结点，少于或等于 $2^{x-1}$ 个结点。因此&lt;/p&gt;
&lt;p&gt;$$2^{x-1}-1+1 \leq n \leq 2^{x-1}-1+2^{x-1}$$&lt;/p&gt;
&lt;p&gt;$$2^{x-1} \leq n \leq 2^x-1$$&lt;/p&gt;
&lt;p&gt;$$x-1 \leq \log_{2}n \leq \log_2(2^x-1) &amp;lt; \log_{2}2^x = x$$&lt;/p&gt;
&lt;p&gt;$$x-1 \leq \log_{2}n &amp;lt; x$$&lt;/p&gt;
&lt;p&gt;$$\log_2{n} &amp;lt; x \leq \log_{2}n+1$$&lt;/p&gt;
&lt;p&gt;因为 $x$ 是堆的层数，必定为整数，而 $\log_2n$ 可能是小数，例如 $2.3 &amp;lt; x \leq 3.3$，那么此时 $x$ 应该为 $2.3-0.3+1$，即向下取整加 $1$，因此解出 $x=\lfloor \log_2n \rfloor +1$。回到高度的定义，则该堆的高度为 $x-1=\lfloor \log_2n \rfloor$&lt;/p&gt;
&lt;p&gt;三、含有 $n$ 个元素的二叉堆，高度为 $h$ 的结点最多有 $\lceil \frac{n}{2^{h+1}} \rceil$ 个&lt;/p&gt;
&lt;p&gt;对高度为 $h$ 的结点，由定义知，它们位于从最深叶子结点往上数的第 $h+1$ 层。只要我们可以确定它们位于从根节点往下数是第几层，那么该层结点数就可以由上面的公式：“第 $k$ 层共 $2^{k-1}$ 个结点”直接求出。&lt;/p&gt;
&lt;p&gt;那么如何确定从上往下数，高度为 $h$ 的结点位于第几层？非常简单，用总层数减去从下往上数的层数再加一即可得出。由上面的推导我们知道含 $n$ 个元素的二叉堆的高度（总层数）为 $\lfloor \log_2n \rfloor +1$，因此高度为 $h$ 的结点的位于从上往下数第 $\lfloor \log_2n \rfloor -(h+1)+1=\lfloor \log_2n \rfloor -h$ 层，所以该层最多共有 $2^{(\lfloor \log_2n \rfloor -h)-1}=2^{\lfloor \log_2n \rfloor} \cdot 2^{-(h+1)}=\lceil \frac{n}{2^{h+1}} \rceil$ 个结点。最后一步推导如下：&lt;/p&gt;
&lt;p&gt;$$x &amp;lt; \lfloor x \rfloor +1 \leq x+1$$&lt;/p&gt;
&lt;p&gt;$$\log_2n &amp;lt; \lfloor \log_2n \rfloor +1 \leq \log_2n+1$$&lt;/p&gt;
&lt;p&gt;$$\log_2n-1 &amp;lt; \lfloor \log_2n \rfloor \leq \log_2n$$&lt;/p&gt;
&lt;p&gt;$$\frac{2^{\log_2n-1}}{2^{h+1}} &amp;lt; \frac{2^{\lfloor \log_2n \rfloor}}{2^{h+1}} \leq \frac{2^{\log_2n}}{2^{h+1}}$$&lt;/p&gt;
&lt;p&gt;$$\frac{0.5n}{2^{h+1}} &amp;lt; \frac{2^{\lfloor \log_2n \rfloor}}{2^{h+1}} \leq \frac{n}{2^{h+1}}$$&lt;/p&gt;
&lt;p&gt;因为 $\frac{2^{\lfloor \log_2n \rfloor}}{2^{h+1}}$ 是结点个数，必为整数，因此对区间右端向上取整即可，即 $\lceil \frac{n}{2^{h+1}} \rceil$。&lt;/p&gt;
&lt;p&gt;四、二叉堆建堆的时间复杂度为 $O(n)$&lt;/p&gt;
&lt;p&gt;在一个高度为 $h$ 的结点上调用 $sink()$ 方法一直往下调整到叶子结点的最大代价是 $O(h)$。结合上面两个结论，建堆的总代价为:&lt;/p&gt;
&lt;p&gt;$$O(h) \cdot \sum_{h=0}^{\lfloor \log_2n \rfloor} \lceil \frac{n}{2^{h+1}} \rceil= O(n \cdot \sum_{h=0}^{\lfloor \log_2n \rfloor} \frac{h}{2^h})$$&lt;/p&gt;
&lt;p&gt;在这里引用级数公式：&lt;/p&gt;
&lt;p&gt;$$\sum_{k=0}^{\infty} k \cdot x^k=\frac{x}{(1-x)^2}$$&lt;/p&gt;
&lt;p&gt;把 $x=\frac{1}{2}$ 代入公式，$k$ 换成 $h$ 得&lt;/p&gt;
&lt;p&gt;$$\sum_{h=0}^{\infty} \frac{h}{2^h}=\frac{0.5}{(1-0.5)^2}=2$$&lt;/p&gt;
&lt;p&gt;因此建堆总代价为 $O(n \cdot 2)=O(n)$。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-11-04-%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 04 Nov 2017 16:49:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-11-04-%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;一、选择排序&lt;/p&gt;
&lt;p&gt;输入长度为 $n$ 的数组，依次选择数组第 $i$ 小的元素，交换到数组第 $i$ 个位置。使用内外两个循环，外循环负责定位到数组第 $i$ 个位置，内循环负责从数组第 $i+1$ 个位置 遍历到数组末端，记录最小的元素，交换到数组第 $i$ 个位置上。&lt;/p&gt;
&lt;p&gt;无论输入数组元素的初始序列如何，内循环都需要迭代 $n-i$ 次，所以选择排序的总比较次数始终为 $(n-1)+(n-2)+ \cdots +2+1=\frac{n(n-1)}{2} \approx \frac{n^2}{2}$ ，时间复杂度为 $O(n^2)$。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public class SortSelection extends Sort {
    public static void sort(Comparable[] a) {
        for (int i = 0; i &amp;lt; a.length; i++) {
            int minIndex = i;
            for (int j = i + 1; j &amp;lt; a.length; j++) {
                if (less(a[j], a[minIndex])) {
                    minIndex = j;
                }
            }
            exchange(a, i, minIndex);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二、插入排序&lt;/p&gt;
&lt;p&gt;模仿扑克卡牌等的整理过程，从最左边开始，将元素逐个插入到左边有序元素序列中适当的位置。同样使用两层循环，外循环负责定位到第 $i$ 个位置，内循环负责从第 $i-1$ 到第 $1$ 个位置找到能让第 $i$ 个元素插入的合适位置（找到第一个比它小的元素时停止内循环，该元素后一个位置即为适合插入的位置）并进行插入。外循环每层迭代结束时，都保证数组从左边第 $1$ 到第 $i$ 个位置是有序的。&lt;/p&gt;
&lt;p&gt;与选择排序不同，插入排序的总比较次数与输入的初始序列有关，这取决于插入排序内循环的比较次数。最好的情况就是输入的数组直接就是有序的，那么每次内循环都只需要比较一次就结束，因为合适的位置就是本身。考虑到外循环迭代 $n$ 次，因此总比较次数为 $(n-1) \cdot 1=n-1$ 次，即最好情况下时间复杂度为 $O(n)$。相反地，最坏的情况就是输入的数组是刚好逆序的，此时每次内循环都需要从第 $i-1$ 位一直比较到数组最左端的第 $1$ 位，需比较 $i-1$ 次。考虑外循环，此时总比较次数为 $0+1+\cdots+(n-1)=\frac{n(n-1)}{2} \approx \frac{n^2}{2}$，即最坏情况下时间复杂度为 $O(n^2)$。因此对局部或者全部有序的输入数组，插入排序要比选择排序快。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public class SortInsertion extends Sort {
    public static void sort(Comparable[] a) {
        for (int i = 0; i &amp;lt; a.length; i++) {
            for (int j = i; j &amp;gt; 0 &amp;amp;&amp;amp; less(a[j], a[j - 1]); j--) {
                exchange(a, j, (j - 1));
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三、希尔排序&lt;/p&gt;
&lt;p&gt;希尔排序是基于插入排序的一种改进版本。由上面分析知道，对于大规模乱序的数组，插入排序的效率是平方级别的，非常低，因为它只能一点一点地把元素从数组右边移动到左边。例如，如果最小的元素正好在数组尽头，那么将它插入正确位置就需要移动 $n-1$ 次，从数组最右边移到最左端。希尔排序为了加快速度，选择跨若干个元素交换的方式而不是相邻元素交换的方式。例如，跨 $h$ 个元素进行交互，那么一遍下来就可以保证任意间隔为 $h$ 的子数组是有序的。这样的数组被称为 $h$ 有序数组。当这些数组都有序后，开始减小 $h$，直至 $h=1$，这样整个数组便有序了。&lt;/p&gt;
&lt;p&gt;至于复杂度分析，根据《算法（第四版）》一书所描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;透彻理解希尔排序性能至今仍然是一项挑战，也是唯一无法准确描述其对于乱序数组的性能特征的排序方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但作者通过一些简单的实验，给出了一些结论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;希尔排序比插入排序和选择排序要快得多，并且数组越大，优势越大。目前最重要的结论是它的运行时间达不到平方级别。已知的最坏的情况下的比较次数和 $N^{3/2}$ 成正比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于选择递增序列 $h$：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何选择递增序列？要回答这个问题并不简单。算法的性能不仅取决于 $h$，还取决于 $h$ 之间的数学性质，例如它们的公因子等。有很多论文研究了各种不同的递增序列，但都无法证明某个序列是“最优”的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;书中样例代码使用的 $h$ 序列为 $3h+1$，如：1，4，13，40，&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public class SortShell extends Sort {
    public static void sort(Comparable[] a) {
        int len = a.length;
        int h = 1;
        while (h &amp;lt; len / 3) 
            h = 3 * h + 1;
        while (h &amp;gt;= 1) {
            for (int i = h; i &amp;lt; len; i++) {
                for (int j = i; j &amp;gt;= h &amp;amp;&amp;amp; less(a[j], a[j - h]); j -= h) {
                    exchange(a, j, (j - h));
                }
            }
            h = h / 3;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;四、归并排序&lt;/p&gt;
&lt;p&gt;将两个已经有序的数组，合并成一个有序数组。&lt;/p&gt;
&lt;p&gt;1、归并（原地）&lt;/p&gt;
&lt;p&gt;我们假设输入是一个数组 $a$，该数组的第 $lo$ 位到第 $mid$ 位，第 $mid$ 位到第 $hi$ 位分别已经有序，现在需要将两部分合并，并使使其有序，返回原数组。思路非常简单，使用辅助数组先把这两部分复制出去，然后不断比较两个部分的队头元素，谁最小谁就出队回来原数组。如果忽略新建辅助数组并复制过去的操作，显然进行归并时每个元素都只需要扫描一次。因此时间复杂度是线性的，若需要归并的元素总个数为 $n$，则时间复杂度为 $O(n)$。（注意这里仅指归并两个子数组的复杂度，不是整个完整归并排序的复杂度）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// merge a[lo..mid] and a[mid+1..hi] to a[lo...hi]
public static void merge(Comparable[] a, int lo, int mid, int hi) {
    int i = lo, j = mid + 1;
    for (int k = lo; k &amp;lt;= hi; k++)//copy a[lo..hi] to aux[lo..hi]
        aux[k] = a[k];
    for (int k = lo; k &amp;lt;= hi; k++)//move items back
        if (i &amp;gt; mid)
            a[k] = aux[j++];
        else if (j &amp;gt; hi)
            a[k] = aux[i++];
        else if (less(aux[j], aux[i]))
            a[k] = aux[j++];
        else
            a[k] = aux[i++];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、排序&lt;/p&gt;
&lt;p&gt;有了归并操作的基础后，后面的排序就有两种选择方式：自顶向下，自底向上。&lt;/p&gt;
&lt;p&gt;(1)、自顶向下&lt;/p&gt;
&lt;p&gt;自顶向下的思路是，在每一层递归函数中，先把数组切分成左半边和右半边，然后把这两部分分别放给下一层递归来处理（直到切分到子数组只有一个元素为止，便返回上一层），当左右两部分都完成排序返回到本层递归时，归并这两部分，返回上一层递归。&lt;/p&gt;
&lt;p&gt;至于时间复杂度，我们可以把归并排序处理过程想象成一棵树，根节点是最顶层的递归函数，对应原数组 $a[0&amp;hellip;(n-1)]$ 的归并，这层需归并 $n$ 个元素；树的第二层是根节点的左右两个孩子，分别对应为原数组的左右两部分，左孩子处理 $a[0&amp;hellip;\frac{n-1}{2}]$ 的归并，右孩子处理 $a[\frac{n-1}{2}+1&amp;hellip;(n-1)]$ 的归并，因此该层也是一共需要归并 $n$ 个元素；如此一直到最底层叶节点，数组被切分成长度为2的 $\frac{n}{2}$ 个子数组：$a[0&amp;hellip;1]，a[2..3],\cdots,a[(n-2)&amp;hellip;(n-1)]$，该层同样共需处理 $n$ 个元素的归并。由于每层递归都是把对应子数组再分成两个子数组，因此该树是棵二叉树，树的高度为 $log_2(n)$。由上面分析知道每一层需归并处理的元素都是 $n$ 个，因此整棵树的处理代价，也即自顶向下归并排序的时间复杂度为 $O(n \cdot log_2(n))$。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public class SortMerge extends Sort {

    private static Comparable[] aux;

    public static void sort(Comparable[] a) {
        aux = new Comparable[a.length];
        recursiveSort(a, 0, a.length - 1);
    }

    public static void recursiveSort(Comparable[] a, int lo, int hi) {
        if (lo &amp;gt;= hi)
            return;
        int mid = lo + (hi - lo) / 2;
        recursiveSort(a, lo, mid);
        recursiveSort(a, (mid + 1), hi);
        merge(a, lo, mid, hi);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2)、自底向上&lt;/p&gt;
&lt;p&gt;自底向上的思路是，使用迭代而不是递归的方式，对数组进行两两归并，四四归并，八八归并，一直到整个数组被归并。使用两层循环，外循环迭代地改变子数组的大小：1，2，4，8，依次类推；内循环对子数组执行归并排序。&lt;/p&gt;
&lt;p&gt;显然外循环共执行 $log_2(n)$ 次；对外循环的每一层，内循环需要对所有子数组总共 $n$ 个元素进行归并排序，因此自底向上归并排序的时间复杂度也是 $O(n \cdot log_2(n))$。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public class SortMergeBU extends Sort {

    private static Comparable[] aux;

    public static void sort(Comparable[] a) {
        aux = new Comparable[a.length];
        for (int subsize = 1; subsize &amp;lt; a.length; subsize += subsize) {
            for (int lo = 0; lo &amp;lt; a.length - subsize; lo += subsize + subsize)
                merge(a, lo, (lo + subsize - 1), Math.min(lo + subsize + subsize - 1, a.length - 1));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;五、快速排序&lt;/p&gt;
&lt;p&gt;快速排序是应用最广泛的排序算法，因为它实现简单，并且是原地排序，几乎不需要额外空间，同时也能做到时间复杂度为 $O(n \cdot log_2(n))$，在一般应用中，快速排序比其他排序算法都要快得多。&lt;/p&gt;
&lt;p&gt;快速排序的基本思路是分治法。从输入数组中，随机地（或者有目的地）挑选某个元素，并以该元素为分界点，使用两个指针同时从数组左右两端往中间扫描，不断交换左右两边的元素，使小于分界点的元素被交换到左边，大于分界点的元素被交换到右边，直到两个指针在分界点相遇，则此一轮交换结束。此时，分界点左边的元素全部小于分界点，右边的元素全部大于分界点。接着分别对左边的数组，右边的数组重复执行如上操作，直到子数组不可再切分（子数组长度为1），此时原数组排序完成。在算法实现上非常简单，使用递归方式即可：先选择某个元素把数组切分成左右两部分，左边部分小于切分点，右边部分大于切分点。然后递归调用自己分别处理左边部分子数组和右边部分子数组（和归并排序刚好相反，归并排序是先排序好左边部分和右边部分，然后再合并两部分）。&lt;/p&gt;
&lt;p&gt;快速排序对输入数据敏感，它的效率依赖于切分数组的效果，即依赖于切分元素的选择。快速排序的最好情况是每次都正好能将数组对半分，此时比较次数正好满足分治递归公式：$C_n=2 \cdot C_{n/2}+n$，其中 $2 \cdot C_{n/2}$ 表示将左右两个子数组排序的成本，$n$ 表示本层递归切分元素和所有元素比较的成本。由此公式可以推出，最好情况下快速排序的时间复杂度为 $O(n \cdot log_2(n))$（可以类比上面归并排序的树来帮助思考）。相反地，最坏情况呢？最坏情况就是每次选择的分界点元素，都是子数组最小或者最大的元素，此时把长度为 $n$ 的数组切分成长度为 $1$ 和长度为 $n-1$ 的两个子数组。此时虽然每一层递归中，切分元素和所有元素的比较次数仍然为 $n$ 次，但是递归的层数（切分次数）增加到了 $n$ 层，而不是 $log_2(n)$ 层。因此，最坏情况下快速排序的时间复杂度为 $O(n^2)$。**为了避免这种情况，一般会对输入数组进行一些预处理，例如随机打乱数组等等**。&lt;/p&gt;
&lt;p&gt;可以利用树的结构来分析：设根节点大小为 $n$， 如果左右孩子结点大小均分得父结点的一半，那么这棵树将向左右同时平衡生长，最终为一棵完美平衡的二叉树，高度为 $log_2(n)$；如果左孩子只分得 $1$，右孩子分得剩余的全部，那么这棵树会一直沿着右子树生长，高度为 $n$。&lt;/p&gt;
&lt;p&gt;为了简便表达基本思想，《算法（第四版）》书中给出的快速排序的代码不考虑输入数组乱序等预处理，并且每次切分只简单地选取子数组第一个元素作为切分点。作者在后面讨论了一些快速排序的高级改进，例如三取样切分等，还没时间仔细研究，等后面有空再回来补。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public class SortQuick extends Sort {

    public static void sort(Comparable[] a) {
        //StdRandom.shuffle(a);
        sort(a, 0, (a.length - 1));
    }

    private static void sort(Comparable[] a, int lo, int hi) {
        if (hi &amp;lt;= lo) return;
        int j = partition(a, lo, hi);
        sort(a, lo, (j - 1));
        sort(a, (j + 1), hi);
    }

    private static int partition(Comparable[] a, int lo, int hi) {
        int i = lo, j = hi + 1;
        Comparable v = a[lo];
        while (true) {
            while (less(a[++i], v)) if (i == hi) break;
            while (less(v, a[--j])) if (j == lo) break;
            if (i &amp;gt;= j) break;
            exchange(a, i, j);
        }
        exchange(a, lo, j);
        return j;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;六、（二叉）堆排序&lt;/p&gt;
&lt;p&gt;堆的定义：堆是一个数组，它可以被看成一个近似的完全二叉树，树上每个结点对应数组中的一个元素。当这棵树的每个结点都大于等于（或小于等于）它的两个孩子结点时，它被称为堆有序。父结点大于等于孩子借点时的堆称为最大堆，反之则称为最小堆。因为一个有序堆是一棵完全二叉树，因此堆中位置（即数组下标）为 $k$ 的结点，我们可以直接计算得知它的父结点位置为 $\frac{k}{2}$，它的两个孩子结点的位置为 $2k$ 和 $2k+1$。&lt;/p&gt;
&lt;p&gt;建堆：输入长度为 $n$ 的数组，就是最初始的无序的堆。为了方便计算，我们先预处理输入的数组：把输入数组复制到一个新建数组 $aux[n+1]$，从 $aux[1]$ 开始放入元素，这样就不用考虑下标为 $0$ 的情况，便于利用上面的父子结点位置公式。然后，从数组的中间位置开始，往左边扫描每个元素，并调用 $sink()$ 方法往下不断调整父子结点的相对位置，如果此堆是最大堆，那么 $sink()$ 方法会使小的结点下沉，大的结点上浮。当扫描完成，则可以保证每个子堆都是父结点大于两个孩子结点，此时堆有序，建堆完成。&lt;/p&gt;
&lt;p&gt;下沉排序：堆有序后，堆顶点那个元素即为数组最大元素。利用这个性质，只要在取出堆顶点后调整修复堆使其有序，然后不断重复取出堆顶点直到堆空，就可以得到有序的数组，即排序完成。那么如何取出顶点并修复堆呢？《算法（第四版）》给出的方案是，让堆顶点和堆的最后一个元素交换（其实就是取出顶点之后，用堆的最后一个元素补上，再修复），此时堆的大小减一，然后对新的顶点调用 $sink()$ 方法来修复堆的有序即可。如此这般，一直操作到堆的大小为0，则排序完成。如果该堆是最大堆，则排序的结果是升序，因为最先取出的顶点最大，放在数组最后面。&lt;/p&gt;
&lt;p&gt;建堆的时间复杂度为 $O(n)$（详细推导另写一篇博客）；对于排序，每次取堆顶的时间复杂度为 $O(1)$，把最后一个元素放到堆顶并从上到下修复堆的时间复杂度为 $O(log_2(n))$，由于完成排序共需取 $n$ 次堆顶，因此排序的时间复杂度为 $O(n \cdot log_2(n))$。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public class SortHeap extends Sort {

    public static Comparable[] sort(Comparable[] a) {

        int N = a.length;

        Comparable[] aux = new Comparable[N + 1];// let index start from 1
        for (int i = 0; i &amp;lt; N; i++) {
            aux[i + 1] = a[i];
        }

        for (int k = N / 2; k &amp;gt;= 1; k--)
            sink(aux, k, N);
        while (N &amp;gt; 1) {
            exchange(aux, 1, N--);
            sink(aux, 1, N);
        }

        return aux;
    }

    private static void sink(Comparable[] a, int k, int N) {
        while (k * 2 &amp;lt;= N) {
            int j = k * 2;
            if (j &amp;lt; N &amp;amp;&amp;amp; less(a[j], a[j + 1]))
                j++;
            if (!less(a[k], a[j]))
                break;
            exchange(a, k, j);
            k = j;
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;七、基于比较的排序算法的下界&lt;/p&gt;
&lt;p&gt;上面总结的选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序都是基于元素两两比较决定相对位置的排序方式。这种基于比较的排序，最好的时间复杂度为 $O(n \cdot log_2(n))$。凡是基于比较的排序都不可能有比这更小的时间复杂度。理论证明参见《算法导论》第八章第一节：排序算法的下界。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>java位运算符优先级</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-10-26-%E7%AE%97%E6%B3%95-java%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 26 Oct 2017 14:31:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-10-26-%E7%AE%97%E6%B3%95-java%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;一、问题&lt;/p&gt;
&lt;p&gt;leetcode第190题，逆序所输入的整数的32位bit，构成一个新的整数并输出：&lt;a href=&#34;https://leetcode.com/problems/reverse-bits/description/&#34;&gt;190. Reverse Bits&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二、解决&lt;/p&gt;
&lt;p&gt;思路不难，对输入的整数$n$，不断右移（带符号）并取其最低位（与上1），加到返回的整数上；返回的整数每次接收$n$的1位后，左移1位腾出最低位给下一次接收。如此循环32次即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public class Solution {
    public int reverseBits(int n) {
        int result=0;
        for(int i=0;i&amp;lt;32;i++){
            result=result&amp;lt;&amp;lt;1;
            result=result+(n&amp;amp;1);
            n=n&amp;gt;&amp;gt;&amp;gt;1;
        }
        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我一开始没有注意四则运算符和位运算符的优先级，默认了位运算是高于加减乘除的，所以上面第6行处我一开始写成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;result = result + n&amp;amp;1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后一直AC失败。我反复检查了我的思路也找不到出错的原因。无奈之下查看了discuss，发现我的思路和高票答案是一模一样的。不过别人的写法是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;result += n&amp;amp;1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时我才醒悟难道是运算符优先级的问题？我立马尝试加上括号，发现AC成功。后来查了资料才知道加减运算符的优先级是比按位与运算符的优先级高的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;int a = 2;
int b = 0;
int c = a + b &amp;amp; 1;
int d = a + (b &amp;amp; 1);
System.out.print(&amp;#34;c=&amp;#34; + c + &amp;#34; , &amp;#34; + &amp;#34;d=&amp;#34; + d);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果为：c=0，d=2&lt;/p&gt;
&lt;p&gt;这件事充分说明了学习基础不扎实，需要深刻反省引以为戒，因此写到博客里记录一下。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最大子数组和</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-10-18-%E7%AE%97%E6%B3%95-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</link>
      <pubDate>Wed, 18 Oct 2017 00:37:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-10-18-%E7%AE%97%E6%B3%95-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</guid>
      <description>&lt;p&gt;一、问题&lt;/p&gt;
&lt;p&gt;给定一个整型数组，求其最大的子数组和。例如，给定数组：[-2,1,-3,4,-1,2,1,-5,4]，和最大的子数组为：[4,-1,2,1]，和为6。&lt;/p&gt;
&lt;p&gt;二、递推式&lt;/p&gt;
&lt;p&gt;设给定的数组为 $A$，用 $dp[i]$ 表示以 $A[i]$ 结尾的最大子数组之和。那么 $dp[i-1]$ 和 $dp[i]$ 有怎样的关系？由于给定的数组为整型，有正数也有负数，因此我们可以从子数组和的正负来考虑。显然，要使 $dp[i]$ 是最大的和，那么 以 $A[i-1]$ 结尾的子数组最大和 $dp[i-1]$ 如果是负数，则以 $A[i]$ 结尾的子数组的最大和 $dp[i]$ 应该去掉前面部分的负数，只取 $A[i]$  作为最大和，因为如果加上前面部分的和只会比 $A[i]$  更小；如果是正数，那么应该取 $A[i]$ 加上前面部分的 $dp[i-1]$ 作为最大和。形式化描述为：&lt;/p&gt;
&lt;p&gt;$$
dp[i]=A[i]+(dp[i-1]&amp;gt;0?dp[i-1]:0)
$$&lt;/p&gt;
&lt;p&gt;最终的最大子数组和就是数组 $dp[n]$ 的最大值。为了避免重复扫描该数组我们可以在计算该数组的时候维护一个当前最大值 $max$。&lt;/p&gt;
&lt;p&gt;三、代码实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static int maxSubArray(int[] A) {
    int n = A.length;
    int[] dp = new int[n];//dp[i] means the maximum subarray ending with A[i];
    dp[0] = A[0];
    int max = dp[0];
    
    for(int i = 1; i &amp;lt; n; i++){
        dp[i] = A[i] + (dp[i - 1] &amp;gt; 0 ? dp[i - 1] : 0);
        max = Math.max(max, dp[i]);
    }
    
    return max;
}

public static void main(String[] args) {
    int[] A = {-2,1,-3,4,-1,2,1,-5,4};
    System.out.println(maxSubArray(A));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;时间和空间复杂度都为 $O(n)$。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最长递增子序列</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-09-26-%E7%AE%97%E6%B3%95-%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Tue, 26 Sep 2017 01:37:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-09-26-%E7%AE%97%E6%B3%95-%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>&lt;p&gt;一、问题&lt;/p&gt;
&lt;p&gt;给定一个长度为 $N$ 的数组，找出一个最长的单调自增子序列的长度。例如：给定一个长度为 6 的数组 $A=&amp;lt; 5，6，7，1，2，8 &amp;gt;$，则其最长的单调递增子序列为 $&amp;lt; 5，6，7，8 &amp;gt;$，长度为4。&lt;/p&gt;
&lt;p&gt;二、寻找最优子结构，导出递推式&lt;/p&gt;
&lt;p&gt;设前 $i$ 个元素的最长递增子序列长度（即第 $i$ 个子问题最优解）表示为 $dp(i)$。那么第 $i$ 个子问题的最优解 $dp(i)$ 与前面 $i-1$ 个子问题各自的最优解 $dp(k)$ $(1 \leq k \leq i-1)$ 有着怎么样的递推关系？&lt;/p&gt;
&lt;p&gt;考察前 $i-1$ 个子问题中第 $k$ $(1 \leq k \leq i-1)$ 个子问题对应的最长递增子序列。如果原序列第 $i$ 个元素 $A[i]$ 大于等于该序列的最后一个元素（设为 $last[k]$），则 $A[i]$ 可以追加到此递增子序列的末尾。此时有 $dp(i)=dp(k)+1$；反之如果 $A[i]$ 小于该序列的最后一个元素 $last[k]$，则 $A[i]$ 不能追加到此递增子序列的末尾，此时 $dp(i)=dp(k)$。由于 $1 \leq k \leq i-1$，因此我们只要遍历前 $i-1$ 个元素对应的 $i-1$ 个最长子序列，并考察第 $i$ 个元素追加（或者不追加）到这些子序列末尾后得到的 $i-1$ 个 $dp(i)$，其中最大一个的即为第 $i$ 个问题的最优解。形式化描述为：&lt;/p&gt;
&lt;p&gt;$$
dp(i)=
\begin{cases}
1, &amp;amp; \text{if $i=1$} \&lt;br&gt;
max_{1 \leq k \leq i-1} { dp(k) } , &amp;amp; \text{if $i&amp;gt;1,A[i] &amp;lt; last[k]$} \&lt;br&gt;
max_{1 \leq k \leq i-1} { dp(k)+1 }, &amp;amp; \text{if $i&amp;gt;1,A[i] \geq last[k]$} \&lt;br&gt;
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;三、代码实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static int longestIncreasingSubsequence(int[] A) {
    int n = A.length - 1;
    int[] dp = new int[n + 1];
    int[] last = new int[n + 1];
    for (int i = 1; i &amp;lt;= n; i++) {
        if (i == 1) {
            dp[i] = 1;
            last[i] = A[1];
        } else {
            dp[i] = Integer.MIN_VALUE;
            for (int k = 1; k &amp;lt;= i - 1; k++) {
                if (A[i] &amp;gt;= last[k] &amp;amp;&amp;amp; dp[k] + 1 &amp;gt; dp[i]) {
                    dp[i] = dp[k] + 1;
                    last[i] = A[i];
                } else if (dp[k] &amp;gt; dp[i]) {
                    dp[i] = dp[k];
                    last[i] = last[k];
                }
            }
        }
    }
    return dp[n];
}

public static void main(String[] args) {
    // 第一个元素从下标1开始
    int[] A = {0, 9, 6, 7, 1, 9, 10};
    System.out.println(longestIncrementSubsequence(A));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 $last[k]$ 来记录前 $k$ 个元素的最长递增子序列的最后一个元素。算法使用了两层 $for$ 循环，外层取值范围 $1$ 到 $n$，内层 $1$ 到 $i-1$，因此时间复杂度为 $O(n^2)$。另外由于使用了长度为 $n$ 的一维数组，因此空间复杂度为 $O(n)$。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>硬币找零</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-09-24-%E7%AE%97%E6%B3%95-%E7%A1%AC%E5%B8%81%E6%89%BE%E9%9B%B6/</link>
      <pubDate>Sun, 24 Sep 2017 23:20:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-09-24-%E7%AE%97%E6%B3%95-%E7%A1%AC%E5%B8%81%E6%89%BE%E9%9B%B6/</guid>
      <description>&lt;p&gt;一、问题&lt;/p&gt;
&lt;p&gt;假设有几种硬币，如1、3、5、10，并且数量无限。请找出能够组成某个数目的找零所使用最少的硬币数&lt;/p&gt;
&lt;p&gt;形式化定义：设需要找零的总额为 $V$ ，一共有 $n$ 种硬币可以选择，其中第 $i$ 种硬币面值为 $c_i$，对应的使用数量为 $y_i$。则问题表述为：&lt;/p&gt;
&lt;p&gt;$$min \quad \sum_{i=1}^{n}y_i , \quad y_i \in N \text{（自然数集）} $$&lt;/p&gt;
&lt;p&gt;$$s.t. \quad \sum_{i=1}^{n} c_i \cdot y_i = V$$&lt;/p&gt;
&lt;p&gt;二、划分子问题，导出递推式&lt;/p&gt;
&lt;p&gt;今天查了一些资料，对动态规划有了新的理解。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/23995189/answer/35324479&#34;&gt;有博主说&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;动态规划的本质是对问题状态的定义，和对状态转移方程的定义。动态规划是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。如何拆分问题，才是动态规划的核心，而拆分问题，靠的就是状态的定义和状态转移方程的定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/23995189/answer/35429905&#34;&gt;也有博主说&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机的本质是一个状态机，内存里存储的所有数据构成了当前的状态，CPU只能利用当前的状态计算出下一个状态（不要纠结硬盘之类的外部存储，就算考虑他们也只是扩大了状态的存储容量而已，并不能改变下一个状态只能从当前状态计算出来这一条铁律）当你企图使用计算机解决一个问题是，其实就是在思考如何将这个问题表达成状态（用哪些变量存储哪些数据）以及如何在状态中转移（怎样根据一些变量计算出另一些变量）。所以所谓的空间复杂度就是为了支持你的计算所必需存储的状态最多有多少，所谓时间复杂度就是从初始状态到达最终状态中间需要多少步！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回到我们的问题，要定义这个问题的状态和状态转移方程，首先需要分析这个问题的解的构建过程。那么找零的过程是怎么样的？很简单，每次可以拿起 $n$ 种硬币中，面值小于找零总额的任意一个。然后把找零总额减去拿起的硬币的面值，进入下一次选择。不断如此重复，直至拿起的硬币的总值等于找零的总额。（到这里，子问题的定义就显而易见了，这个问题的子问题就是每一次进行的硬币的选择，本次的选择只与之前的选择有关，因为每一次选择后剩余的找零总额会相应减小）&lt;/p&gt;
&lt;p&gt;但是这样并不能保证硬币数是最小的。为了找到最优解，我们需要假设某个子问题已经得到了最优解，然后推出与它的子问题的最优解的关系，也就是最优解的递推关系式。设 $dp(i)$ 表示组合总价值为 $i$ 的零钱所需要的最小硬币数。因此每次可以选择 $n$ 种硬币中的一种，设本次选择的硬币为第 $j$ $(1 \leq j \leq n)$ 种，对应的面值为 $c[j]$，则在拿起该硬币之前的子问题即为：组合面值为 $dp(i-c[j])$ 的总额需要的最小硬币数。同样可以用“剪贴粘贴”的反正法证明其最优解为 $dp(i-c[j])-1$。形式化描述为：&lt;/p&gt;
&lt;p&gt;$$
dp(i)=
\begin{cases}
0, &amp;amp; \text{if $i=0 $} \&lt;br&gt;
min_{1 \leq j \leq n}(dp(i-c[j])+1), &amp;amp; \text{if $i &amp;gt;0 , , , c[j] \leq i$} \&lt;br&gt;
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;三、算法实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static int coin(int[] c, int v) {
    int[] dp = new int[v + 1];
    for (int i = 0; i &amp;lt;= v; i++) {
        if (i == 0) dp[i] = 0;
        else {
            dp[i] = Integer.MAX_VALUE;
            for (int j = 1; c[j] &amp;lt;= i &amp;amp;&amp;amp; j &amp;lt; c.length; j++) {
                int temp = dp[i - c[j]] + 1;
                if (temp &amp;lt; dp[i]) dp[i] = temp;
            }
        }
    }
    return dp[v];
}

public static void main(String[] args) {
    //从下标1开始表示第1种硬币
    int[] c = {0, 1, 3, 5, 10};
    System.out.println(coin(c, 3));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;外层的 $for$ 循环取值范围为 $0$ 到 $V$，内层的 $for$ 循环的取值范围为 $0$ 到 $n$，因此时间复杂度为 $O(V \cdot n)$    。空间复杂度为 $O(V)$。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>0-1 背包问题</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-09-22-%E7%AE%97%E6%B3%95-01%E8%83%8C%E5%8C%85/</link>
      <pubDate>Fri, 22 Sep 2017 20:36:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-09-22-%E7%AE%97%E6%B3%95-01%E8%83%8C%E5%8C%85/</guid>
      <description>&lt;p&gt;一、问题&lt;/p&gt;
&lt;p&gt;有 $n$ 个物品，其中第 $i$ 个物品的重量为 $w[i]$，价值为 $p[i]$，我们规定所有物品的重量和价格均非负。现有一个可以承受最大重量为 $W$ 的背包，对每个物品，只能选择装 0 个或者 1 个入背包。问选择哪些物品装入背包可以使背包中的总价值最大。&lt;/p&gt;
&lt;p&gt;形式化定义：&lt;/p&gt;
&lt;p&gt;$$max \quad \sum_{i=1}^{n} p[i] \cdot x_i$$&lt;/p&gt;
&lt;p&gt;$$s.t. \quad \sum_{i=1}^{n} w[i] \cdot x_i \leq W , \quad x_i \in { 0,1 }$$&lt;/p&gt;
&lt;p&gt;二、划分子问题，导出递推式&lt;/p&gt;
&lt;p&gt;如何从 $n$ 个物品中选择出若干个装入背包并使总价值最大？我们需要寻找一个有规律的装包过程，这样才能划分出子问题。&lt;/p&gt;
&lt;p&gt;假设我们已经知道了选择哪几个物品是最优的，那么一个很直接的想法就是从左往右扫描这 $n$ 个物品，依次对每个物品做出选择：装入这个物品，或者放弃这个物品。当扫描完成，那么装包过程结束。&lt;/p&gt;
&lt;p&gt;现在我们来分析每一步并试图划分出子问题。假设我们扫描了前 $i$ 个物品，并得到了当前的最大总价值，设为 $P_i$。那么倒回去看，这一步的最优解是怎么得到的？因为对每个物品，只能选择装入0个或者1个，因此这一步的最优解就是：在扫描并处理了前 $i-1$ 个物品后，选择装入第 $i$ 个物品后得到的最大总价值，或者放弃第 $i$ 个物品后的最大总价值。如果是通过选择物品 $i$ 而得到这一步的最优解 $P_i$，那么前 $i-1$ 个物品的最大总价值为 $P_i-p[i]$；如果是通过放弃物品 $i$ 而得到这一步的最优解，那么前 $i-1$ 个物品的最大总价值仍为 $P_i$。&lt;/p&gt;
&lt;p&gt;考虑最优解的对应的背包容量的递推关系。设前 $i$ 物品恰好能装入容量为 $W_i$ 的背包得到最大总价值。如果是通过选择物品 $i$ 而得到的最优解，那么前 $i-1$ 个物品恰好能装入的背包的容量为 $W_i-w[i]$；反之，则前 $i-1$ 个物品恰好能装入的背包的容量为 $W_i$。&lt;/p&gt;
&lt;p&gt;设 $dp(i,j)$ 表示前 $i$ 个物品装入容量为 $j$ 的背包的最大总价值。那么上述推导可以形式化描述为：&lt;/p&gt;
&lt;p&gt;$$
dp(i,j)=
\begin{cases}
0, &amp;amp; \text{if $i=0 , or , j=0$} \&lt;br&gt;
dp(i-1,j), &amp;amp; \text{if $w[i]&amp;gt;j$} \&lt;br&gt;
max {, dp(i-1,j-w[i])+p[i], , dp(i-1,j) ,} , &amp;amp; \text{if $w[i] \leq j$} \&lt;br&gt;
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;三、算法实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static int zeroOnePackage(int[] p, int[] w, int n, int W) {
    int[][] dp = new int[n + 1][W + 1];
    for (int i = 0; i &amp;lt;= n; i++) {
        for (int j = 0; j &amp;lt;= W; j++) {
            if (i == 0 || j == 0) dp[i][j] = 0;
            else if (w[i] &amp;gt; j) dp[i][j] = dp[i - 1][j];
            else dp[i][j] = Math.max(dp[i - 1][j - w[i]] + p[i], dp[i - 1][j]);
        }
    }
    return dp[n][W];
}

public static void main(String[] args) {
    int[] p = {0, 6, 3, 5, 4, 6}; //从下标1开始表示第1个物品
    int[] w = {0, 2, 2, 6, 5, 4}; //同上
    System.out.println(zeroOnePackage(p, w, 5, 10));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;外层的 $for$ 循环取值范围为 $0$ 到 $n$，内层的 $for$ 循环的取值范围为 $0$ 到 $W$，因此时间复杂度为 $O(W \cdot n)$；因为使用了二维数组 $dp[0&amp;hellip;n][0&amp;hellip;W]$， 因此空间复杂度为 $O(W \cdot n)$。&lt;/p&gt;
&lt;p&gt;其实空间复杂度还有可以优化的地方：如果仔细分析，可以发现 $dp[i][&amp;hellip;]$ 只与 $dp[i-1][&amp;hellip;]$ 有关。因此可以只存储 $dp[i-1][&amp;hellip;]$，即只使用一个一维数组，具体后续再讨论。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>推荐系统相关学术会议</title>
      <link>https://utopizza.github.io/posts/thesis/2017-09-21-%E8%AE%BA%E6%96%87-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%AD%A6%E6%9C%AF%E4%BC%9A%E8%AE%AE/</link>
      <pubDate>Thu, 21 Sep 2017 18:45:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/thesis/2017-09-21-%E8%AE%BA%E6%96%87-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%AD%A6%E6%9C%AF%E4%BC%9A%E8%AE%AE/</guid>
      <description>&lt;p&gt;一、学术会议&lt;/p&gt;
&lt;p&gt;1、SIGKDD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCF评级：A类&lt;/li&gt;
&lt;li&gt;全称：Special Interest Group on Knowledge Discovery and Data Mining&lt;/li&gt;
&lt;li&gt;出版社：ACM&lt;/li&gt;
&lt;li&gt;网址：http://www.kdd.org/&lt;/li&gt;
&lt;li&gt;DBLP：http://dblp.uni-trier.de/db/conf/kdd/&lt;/li&gt;
&lt;li&gt;时间：每年8月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、SIGIR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCF评级：A类&lt;/li&gt;
&lt;li&gt;全称：Special Interest Group on Information Retrieval&lt;/li&gt;
&lt;li&gt;出版社：ACM&lt;/li&gt;
&lt;li&gt;网址：http://sigir.org/&lt;/li&gt;
&lt;li&gt;DBLP：http://dblp.uni-trier.de/db/conf/sigir/&lt;/li&gt;
&lt;li&gt;时间：每年7月至8月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、ICDE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCF评级：A类&lt;/li&gt;
&lt;li&gt;全称：International Conference on Data Engineering&lt;/li&gt;
&lt;li&gt;出版社：IEEE&lt;/li&gt;
&lt;li&gt;网址：https://www.icde.org/&lt;/li&gt;
&lt;li&gt;DBLP：http://dblp.uni-trier.de/db/conf/icde/&lt;/li&gt;
&lt;li&gt;时间：每年4月至5月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、AAAI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCF评级：A类&lt;/li&gt;
&lt;li&gt;全称：Association for the Advancement of Artificial Intelligence&lt;/li&gt;
&lt;li&gt;出版社：AAAI&lt;/li&gt;
&lt;li&gt;网址：https://www.aaai.org/&lt;/li&gt;
&lt;li&gt;DBLP：http://dblp.uni-trier.de/db/conf/aaai/&lt;/li&gt;
&lt;li&gt;时间：2014年之前每年7月到8月，2015年开始改到了每年1月到2月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5、TKDE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCF评级：A类&lt;/li&gt;
&lt;li&gt;全称：IEEE Transactions on Knowledge and Data Engineering&lt;/li&gt;
&lt;li&gt;出版社：IEEE&lt;/li&gt;
&lt;li&gt;网址：https://www.computer.org/web/tkde&lt;/li&gt;
&lt;li&gt;DBLP：http://dblp.uni-trier.de/db/journals/tkde/&lt;/li&gt;
&lt;li&gt;时间：每年1月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6、WWW&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCF评级：A类&lt;/li&gt;
&lt;li&gt;全称：International World Wide Web Conferences&lt;/li&gt;
&lt;li&gt;出版社：ACM&lt;/li&gt;
&lt;li&gt;网址：http://www.iw3c2.org/&lt;/li&gt;
&lt;li&gt;DBLP：http://dblp.uni-trier.de/db/conf/www/&lt;/li&gt;
&lt;li&gt;时间：每年4月到5月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;7、CIKM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCF评级：B类&lt;/li&gt;
&lt;li&gt;全称：International Conference on Information and Knowledge Management&lt;/li&gt;
&lt;li&gt;出版社：ACM&lt;/li&gt;
&lt;li&gt;网址：http://www.cikmconference.org/&lt;/li&gt;
&lt;li&gt;DBLP：http://dblp.uni-trier.de/db/conf/cikm/&lt;/li&gt;
&lt;li&gt;时间：每年10月至11月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;8、ICDM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCF评级：B类&lt;/li&gt;
&lt;li&gt;全称：IEEE International Conference on Data Mining&lt;/li&gt;
&lt;li&gt;出版社：IEEE&lt;/li&gt;
&lt;li&gt;网址：http://www.cs.uvm.edu/~icdm/&lt;/li&gt;
&lt;li&gt;DBLP：http://dblp.uni-trier.de/db/conf/icdm/&lt;/li&gt;
&lt;li&gt;时间：每年11月至12月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;9、WSDN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCF评级：B类&lt;/li&gt;
&lt;li&gt;全称：ACM International Conference on Web Search and Data Mining&lt;/li&gt;
&lt;li&gt;出版社：ACM&lt;/li&gt;
&lt;li&gt;网址：http://www.wsdm-conference.org/&lt;/li&gt;
&lt;li&gt;DBLP：http://dblp.uni-trier.de/db/conf/wsdm/&lt;/li&gt;
&lt;li&gt;时间：每年2月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10、RecSys&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCF评级：无&lt;/li&gt;
&lt;li&gt;全称：ACM Conference on Recommender Systems&lt;/li&gt;
&lt;li&gt;出版社：ACM&lt;/li&gt;
&lt;li&gt;网址：https://recsys.acm.org/&lt;/li&gt;
&lt;li&gt;DBLP：http://dblp.uni-trier.de/db/conf/recsys/&lt;/li&gt;
&lt;li&gt;时间：每年8月到9月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二、相关链接&lt;/p&gt;
&lt;p&gt;1、中国计算机学会推荐国际学术会议和期刊目录：http://www.ccf.org.cn/xspj/gyml/&lt;/p&gt;
&lt;p&gt;2、数据挖掘领域顶级会议期刊及其分析：http://blog.csdn.net/yaoyepeng/article/details/6533745&lt;/p&gt;
&lt;p&gt;3、人工智能与数据挖掘顶级会议：http://blog.csdn.net/zongzhiyuan/article/details/49964813&lt;/p&gt;
&lt;p&gt;4、学术会议搜索：http://www.searchconf.net/&lt;/p&gt;
&lt;p&gt;5、Grouplens小组：https://grouplens.org/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最优二叉搜索树</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-09-20-%E7%AE%97%E6%B3%95-%E6%9C%80%E4%BC%98%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Wed, 20 Sep 2017 11:52:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-09-20-%E7%AE%97%E6%B3%95-%E6%9C%80%E4%BC%98%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>&lt;p&gt;一、问题&lt;/p&gt;
&lt;p&gt;给定一个包含 $n$ 个不同关键字的已经排序的序列 $K=&amp;lt; k_1,k_2, \cdots , k_n&amp;gt;$ $(k_1 &amp;lt; k_2 &amp;lt; \cdots &amp;lt; k_n)$，我们希望用这些关键字构造一颗二叉搜索树。&lt;/p&gt;
&lt;p&gt;对每个关键字 $k_i$，都有一个概率 $p_i$ 表示其搜索频率。有些要搜索的值可能不在 $K$ 中，因此我们还有 $n+1$ 个“伪关键字”：$&amp;lt; d_0,d_1,d_2,\cdots,d_n &amp;gt;$ 表示不在 $K$ 中的值。其中，$d_0$ 表示所有小于 $k_1$ 的值，$d_n$ 表示所有大于 $k_n$ 的值，对 $i=1,2,\cdots,n-1$，伪关键字 $d_i$ 表示所有在 $k_i$ 和 $k_{i+1}$ 之间的值。对每个伪关键字 $d_i$，也都有一个概率 $q_i$ 表示对应的搜索频率。&lt;/p&gt;
&lt;p&gt;由这 $n$ 个关键字和 $n+1$ 个 伪关键字构成的二叉搜索树，每个关键字 $k_i$ $(1 \leq i \leq n)$ 是一个内部结点，而每个伪关键字 $d_i$ $(0 \leq i \leq n)$ 是一个叶结点。&lt;/p&gt;
&lt;p&gt;由于每次搜索要么成功（找到某个关键字 $k_i$）要么失败（找到某个伪关键字 $d_i$），因此这棵树所有结点的概率之和为1：&lt;/p&gt;
&lt;p&gt;$$\sum_{i=1}^{n}p_i + \sum_{i=0}^{n}q_i = 1$$&lt;/p&gt;
&lt;p&gt;因为我们知道了每个关键字和伪关键字的搜索概率，所以我们可以求出在这给定的二叉搜索树 $T$ 中进行一次搜索的期望代价 $E(T)$ 。假定一次搜索的代价等于访问的结点数，即搜索到的结点在 $T$ 中的深度再加 1（深度不算根结点，要从根节点算起就要加 1） ，那么在 $T$ 中进行一次搜索的期望代价为如下公式所示，其中 $D_{T}(k_l)$ 表示结点 $k_l$ 在树 $T$ 中的深度：&lt;/p&gt;
&lt;p&gt;$$E(T)=
\sum_{l=1}^{n} (D_{T}(k_l)+1) \cdot p_l +
\sum_{l=0}^{n} (D_{T}(d_l)+1) \cdot q_l
$$&lt;/p&gt;
&lt;p&gt;现假设有一个 $n=5$ 的关键字序列，及如下的搜索概率：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;i&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;0&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;pi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;qi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.05&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;问如何构造一棵搜索期望代价 $E(T)$ 最小的二叉搜索树（即最优二叉搜索树）？&lt;/p&gt;
&lt;p&gt;二、划分子问题，导出递推式&lt;/p&gt;
&lt;p&gt;考虑一棵二叉搜索树的任意子树 $T$，它包含了关键字 $&amp;lt; k_i,\cdots,k_j &amp;gt;$（$1 \leq i \leq j \leq n$），其叶结点是伪关键字 $&amp;lt; d_{i-1},\cdots,d_n &amp;gt;$。由上一节的公式可以直接计算它的搜索期望 $E(T)$。现在我们来考察其子问题，并尝试推导该二叉搜索树的搜索期望和其子问题的搜索期望的递推关系式。&lt;/p&gt;
&lt;p&gt;如何根据关键字序列 $&amp;lt; k_i,\cdots,k_j &amp;gt;$ 构造一棵搜索二叉树？考虑到该序列是已经排好序的，而二叉搜索树遵循：&lt;code&gt;左子树 &amp;lt; 根结点 &amp;lt; 右子树&lt;/code&gt; 的规则，因此用这些关键字构造二叉搜索树时，它们在树中的左右相对顺序与原序列一致。那么现在我们只需要确定用哪个结点来作为该树的根结点，把序列划分成左右两部分，左边作为左子树，右边作为右子树。假设选择第 $r$ $(i \leq r \leq j)$ 个关键字 $k_r$ 作为根结点，则左子树为 $&amp;lt; k_i,\cdots,k_{r-1} &amp;gt;$，右子树为 $&amp;lt; k_{r+1},\cdots,k_j &amp;gt;$ 。递归地对左子树和右子树进行这样的操作直到不可再分为止，即可构造出二叉搜索树。&lt;/p&gt;
&lt;p&gt;这里还有一个要注意的细节——“空子树”。假定对于 $&amp;lt; k_i,\cdots,k_j &amp;gt;$ 的子问题，我们选定了序列第一个关键字 $k_i$ 作为根结点，即 $r=i$。那么根据上面的推导，它的左子树为 $&amp;lt; k_i,\cdots,k_{i-1} &amp;gt;$，我们将这样的序列解释：为不包含任何关键字的序列。但实际上由定义可知，它的作子树仍包含伪关键字 $d_{i-1}$（$d_{i-1} &amp;lt; k_i $），其对应的搜索概率为 $q_{i-1}$。对称地，如果选择序列最后一个关键字作为根结点，那么它的右子树不包含任何关键字，但包含伪关键字 $d_j$，对应搜索概率为 $q_j$。&lt;/p&gt;
&lt;p&gt;这样，构造一棵子树的两个递归的子问题是：构造其左子树和右子树。设子树 $T$ 的左子树为 $T_{L}$，右子树为 $T_{R}$。现在我们来推导 $E(T)$ 和 $E(T_{L})$、$E(T_{R})$ 的关系。&lt;/p&gt;
&lt;p&gt;注意到，当 $T_{L}$ 和 $T_{R}$ 合并成一棵树 $T$ 的时候，结点的深度加1，即：&lt;/p&gt;
&lt;p&gt;$$D_{T}(k_l)=D_{T_{L}}(k_l)+1$$&lt;/p&gt;
&lt;p&gt;对前面的公式，我们把作为根结点的关键字 $k_r$ $(D_{T}(k_r)=0)$ 提出来，并把分割后的左右两部分写成子树的形式：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
E(T)
&amp;amp;=
\sum_{l=i}^{j} (D_{T}(k_l)+1) \cdot p_l +
\sum_{l=i-1}^{j} (D_{T}(d_l)+1) \cdot q_l \&lt;br&gt;
&amp;amp; =
\sum_{l=i}^{r-1} (D_{T}(k_l)+1) \cdot p_l +
\sum_{l=i-1}^{r-1} (D_{T}(d_l)+1) \cdot q_l&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(D_{T}(k_r)+1) \cdot p_r +
\sum_{l=r+1}^{j} (D_{T}(k_l)+1) \cdot p_l +
\sum_{l=r+1-1}^{j} (D_{T}(d_l)+1) \cdot q_l \&lt;br&gt;
&amp;amp; =
\sum_{l=i}^{r-1} (D_{T_{L}}(k_l)+1+1) \cdot p_l +
\sum_{l=i-1}^{r-1} (D_{T_{L}}(d_l)+1+1) \cdot q_l&lt;/li&gt;
&lt;li&gt;p_r +
\sum_{l=r+1}^{j} (D_{T_{R}}(k_l)+1)+1) \cdot p_l +
\sum_{l=r+1-1}^{j} (D_{T_{R}}(d_l)+1)+1) \cdot q_l \&lt;br&gt;
&amp;amp; =
E(T_{L}) + (\sum_{l=i}^{r-1} p_l + \sum_{l=i-1}^{r-1} q_l)&lt;/li&gt;
&lt;li&gt;p_r +
E(T_{R}) + (\sum_{l=r+1}^{j} p_l + \sum_{l=r+1-1}^{j} q_l)
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为简便表达，对于包含关键字序列 $&amp;lt; k_i,\cdots,k_j &amp;gt;$ 的子树，我们记所有结点的概率和为：&lt;/p&gt;
&lt;p&gt;$$w(i,j)=\sum_{l=i}^{j} p_l + \sum_{l=i-1}^{j} q_l$$&lt;/p&gt;
&lt;p&gt;则上面推导结果进一步表示为：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
E(T)
&amp;amp; = E(T_{left}) + w(i,r-1) + p_r + E(T_{right}) + w(r+1,j) \&lt;br&gt;
&amp;amp; = E(T_{left}) + E(T_{right}) + w(i,r-1) + p_r + w(r+1,j) \&lt;br&gt;
&amp;amp; = E(T_{left}) + E(T_{right}) + w(i,j)
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;其中 $T_{L}$ 对应关键字序列 $&amp;lt; k_i,\cdots,k_{r-1} &amp;gt;$， $T_{R}$ 对应关键字序列 $&amp;lt; k_{r+1},\cdots,k_j &amp;gt;$。现在我们分别用 $e[i,r-1]$ 和 $e[r+1,j]$ 表示它们对应的期望代价。&lt;/p&gt;
&lt;p&gt;类似于钢条切割和矩阵连乘，序列 $&amp;lt; k_i,\cdots,k_j &amp;gt;$ 有 $r=j-i+1$ 个关键字可以作为根结点 $k_r$ $(i \leq r \leq j)$ 把序列划分成左子树和右子树。我们遍历这段序列中每一个可能的关键字来尝试构造二叉搜索树，然后取期望代价最小的那个方案作为最优解（同钢条切割和矩阵连乘，可以用“剪切-粘贴”反证法证明：如果 $E(T)$ 如果是最优解，那么 $E(T_{L})$ 和 $E(T_{R})$ 一定分别是左子树和右子树的最优解）并存储起来。因此我们可以得到最终递推公式：&lt;/p&gt;
&lt;p&gt;$$
e[i,j] =
\begin{cases}
q_{i-1}，&amp;amp; \text{if $j=i-1$} \&lt;br&gt;
min_{i \leq r \leq j} { e[i,r-1]+e[r+1,j]+w(i,j) } &amp;amp; \text{if $i \leq j$}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;四、实现&lt;/p&gt;
&lt;p&gt;为降低算法复杂度，我们使用自底向上带备忘的动态规划法而不是递归求解。&lt;/p&gt;
&lt;p&gt;我们使用一个二维数组 $e[1&amp;hellip;n+1][0&amp;hellip;n]$ 来保存 $e[i,j]$ 的值。第一维下标上界为 $n+1$ 而不是 $n$，原因在于对于只包含伪关键字 $d_n$ 的子树，我们需要计算并保存 $e[n+1,n]$。第二维下标下界为 $0$，是因为对于只包含伪关键字 $d_0$ 的子树，我们需要计算并保存 $e[1,0]$。我们实际上只使用满足 $j \geq i-1$ 的表项 $e[i][j]$。&lt;/p&gt;
&lt;p&gt;对于 $w(i,j)$，为了避免在每次计算 $e[i,j]$ 时都要重新计算 $w(i,j)$，我们使用一个二维数组 $w[1&amp;hellip;n+1][0&amp;hellip;n]$ 来保存它。当子树为空即只包含伪关键字的情况（$j=i-1$），有 $w[i][i-1]=q_{i-1}$；对其他一般情况（$j \geq i$），有 $w[i][j]=w[i][j-1]+p_j+q_j$。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static double OptimalBST(double[] p, double[] q, int n) {
    
    double[][] e = new double[n + 2][n + 1];
    double[][] w = new double[n + 2][n + 1];
    
    for (int i = 1; i &amp;lt;= n + 1; i++) {
        e[i][i - 1] = q[i - 1];
        w[i][i - 1] = q[i - 1];
    }
    
    for (int length = 1; length &amp;lt;= n; length++) {
        for (int i = 1; i &amp;lt;= n - length + 1; i++) {
            int j = i + length - 1;
            e[i][j] = Double.MAX_VALUE;
            w[i][j] = w[i][j - 1] + p[j] + q[j];
            for (int r = i; r &amp;lt;= j; r++) {
                double temp = e[i][r - 1] + e[r + 1][j] + w[i][j];
                if (temp &amp;lt; e[i][j])
                    e[i][j] = temp;
            }
        }
    }
    
    return e[1][n];
}

public static void main(String[] args) {
    double[] p = {0, 0.15, 0.10, 0.05, 0.10, 0.20};
    double[] q = {0.05, 0.10, 0.05, 0.05, 0.05, 0.10};
    System.out.println(OptimalBST(p, q, 5));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为算法包含三个 $for$ 循环，每重循环的下标最多取 $n$ 个值，所以算法的时间复杂度是 $O(n^3)$。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最长公共子序列</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-09-18-%E7%AE%97%E6%B3%95-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Mon, 18 Sep 2017 15:50:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-09-18-%E7%AE%97%E6%B3%95-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>&lt;p&gt;一、问题：给定两个序列 $X=&amp;lt; x_1, x_2, \cdots, x_m &amp;gt;$ 和 $Y=&amp;lt; y_1, y_2, \cdots, y_n &amp;gt;$，求它们的最长公共子序列（longest-common-subsequence，LCS）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子序列定义：给定一个序列 $X=&amp;lt; x_1, x_2, \cdots , x_m &amp;gt;$，另一个序列 $Z=&amp;lt; z_1, z_2, \cdots, z_k &amp;gt;$ 满足如下条件时成为 $X$ 的子序列，即存在一个严格递增的 $X$ 的下标序列 $&amp;lt; i_1, i_2, \cdots, i_k &amp;gt;$，对所有的 $j=1, 2, \cdots, k$，满足 $x_{i_j}=z_j$。例如，$Z=&amp;lt; B,C,D,B &amp;gt;$ 是 $X=&amp;lt; A,B,C,B,D,A,B &amp;gt;$ 的子序列。&lt;/li&gt;
&lt;li&gt;公共子序列定义：给定两个序列 $X$ 和 $Y$，如果 $Z$ 是 $X$ 的子序列，也是 $Y$ 的子序列，则称它是 $X$ 和 $Y$ 的公共子序列。例如，如果 $X=&amp;lt; A,B,C,B,D,A,B &amp;gt;$，$Y=&amp;lt; B,D,C,A,B,A &amp;gt;$，则 $&amp;lt; B,C,A &amp;gt;$ 是它们的一个公共子序列，但不是最长公共子序列，$&amp;lt; B,C,B,A &amp;gt;$ 和 $&amp;lt; B,D,A,B &amp;gt;$ 才是最长公共子序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二、划分子问题，导出递推式&lt;/p&gt;
&lt;p&gt;LCS的最优子结构定理：给定两个序列 $X=&amp;lt; x_1, x_2, \cdots, x_m &amp;gt;$ 和 $Y=&amp;lt; y_1, y_2, \cdots, y_n &amp;gt;$，设 $Z=&amp;lt; z_1, z_2, \cdots, z_k &amp;gt;$ 为 $X$ 和 $Y$ 的任意 LCS。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、如果 $x_m=y_n$，则 $z_k=x_m=y_n$，且 $Z_{k-1}$ 是 $X_{m-1}$ 和 $Y_{n-1}$ 的一个 LCS&lt;/li&gt;
&lt;li&gt;2、如果 $x_m \neq y_n$，且 $z_k \neq x_m$ 意味着 $Z$ 是 $X_{m-1}$ 和 $Y$ 的一个 LCS&lt;/li&gt;
&lt;li&gt;3、如果 $x_m \neq y_n$，且 $z_k \neq y_n$ 意味着 $Z$ 是 $X$ 和 $Y_{n-1}$ 的一个 LCS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、已知 $x_m=y_n$，假设 $z_k \neq x_m$ 或 $z_k \neq y_n$，那么可以将 $x_m$ 或 $y_n$ 追加到 $Z$ 中，得到一个长度为 $k+1$ 的 LCS，与 $Z$ 是 LCS 矛盾。因此必然有 $z_k=x_m=y_n$ 。这样，前缀 $Z_{k-1}$ 是 $X_{m-1}$ 和 $Y_{n-1}$ 的一个 LCS。同样用反证法证明：假设存在 $X_{m-1}$ 和 $Y_{n-1}$ 的一个长度大于 $k-1$ 的公共子序列 $W$，那么如果将 $x_m=y_n$ 追加到 $W$ 的末尾会得到 $X$ 和 $Y$ 的一个长度大于 $k$ 的公共子序列，矛盾。&lt;/li&gt;
&lt;li&gt;2、已知 $z_k \neq x_m$，假设存在 $X_{m-1}$ 和 $Y$ 的一个长度大于 $k$ 的公共子序列 $W$，那么 $W$ 也是 $X_m$ 和 $Y$ 的一个长度大于 $k$ 的公共子序列，与 $Z$ 是 LCS 矛盾。&lt;/li&gt;
&lt;li&gt;3、与情况2对称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由上述定理可以推出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、如果 $x_m=y_n$，求 $X_{m-1}$ 和 $Y_{n-1}$ 的 LCS&lt;/li&gt;
&lt;li&gt;2、如果 $x_m \neq y_n$，求以下两个子问题的 LCS，取较长的那个作为最优解：&lt;/li&gt;
&lt;li&gt;若 $z_k \neq x_m$，求 $X_{m-1}$ 和 $Y$ 的 LCS&lt;/li&gt;
&lt;li&gt;若 $z_k \neq y_n$，求 $X$ 和 $Y_{n-1}$ 的 LCS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义 $c[i,j]$ 表示 $X_i$ 和 $Y_j$ 的LCS的长度，由上述得出递推式：&lt;/p&gt;
&lt;p&gt;$$
c[i,j]=
\begin{cases}
0，&amp;amp; \text{if $i=0$，或 $j=0$} \&lt;br&gt;
c[i-1,j-1]+1，&amp;amp; \text{if $i,j&amp;gt;0$ 且 $x_{i}=y_{j}$} \&lt;br&gt;
max(c[i-1,j],c[i,j-1])，&amp;amp; \text{if $i,j&amp;gt;0$ 且 $x_{i} \neq y_{j}$}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;三、实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static int LCSBottonUp(char[] X_0, char[] Y_0) {

    int x = X_0.length;
    char[] X = new char[x + 1];
    for (int i = 0; i &amp;lt; x; i++)
        X[i + 1] = X_0[i];

    int y = Y_0.length;
    char[] Y = new char[y + 1];
    for (int i = 0; i &amp;lt; y; i++)
        Y[i + 1] = Y_0[i];

    int[][] c = new int[x + 1][y + 1];

    for (int i = 0; i &amp;lt;= x; i++) {
        for (int j = 0; j &amp;lt;= y; j++) {
            if (i == 0 || j == 0) c[i][j] = 0;
            else {
                if (X[i] == Y[j]) c[i][j] = c[i - 1][j - 1] + 1;
                else c[i][j] = Math.max(c[i - 1][j], c[i][j - 1]);
            }
        }
    }

    return c[x][y];
}


public static void main(String[] args) {
    char[] X = {&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;};
    char[] Y = {&amp;#39;B&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;};
    System.out.println(LCSBottonUp(X, Y));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了方便理解，通过预处理，使输入的序列下标从 $1$ 开始使用，即 $X[i]$ 表示 $x_i$，$Y[j]$ 表示 $y_j$，$c[i][j]$ 表示 $X_i$ 和 $Y_j$ 的公共子序列长度。由于外层循环的执行次数为输入序列 $X$ 的长度 $m$，内存循环的执行次数为输入序列 $Y$ 的长度 $n$，因此算法的时间复杂度为 $O(mn)$。另外使用了大小为 $m \cdot n$ 的二维数组，因此空间复杂度为 $O(mn)$。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>矩阵连乘</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-09-17-%E7%AE%97%E6%B3%95-%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98/</link>
      <pubDate>Sun, 17 Sep 2017 15:02:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-09-17-%E7%AE%97%E6%B3%95-%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98/</guid>
      <description>&lt;p&gt;一、问题：给定 $n$ 个矩阵的链 $&amp;lt; A_1, A_2, \cdots , A_n &amp;gt;$，其中矩阵 $A_i$ $ (1 \leq i \leq n)$ 的规模为 $p_{i-1}  \cdot  p_i$，求完全括号化方案，使得计算乘积 $A_1A_2 \cdots\ A_n$ 所需标量乘法次数最少。&lt;/p&gt;
&lt;p&gt;二、举例&lt;/p&gt;
&lt;p&gt;以 $&amp;lt; A_1, A_2, A_3 &amp;gt;$ 相乘为例，假设三个矩阵的规模分别为 $10 \cdot 100，100 \cdot 5，5 \cdot 50$ 。&lt;/p&gt;
&lt;p&gt;如果按 $ ((A_1  \cdot  A_2)  \cdot  A_3) $ 的顺序计算，则需要做 $ 10 \cdot 100 \cdot 5+10 \cdot 5 \cdot 50=5000+2500=7500 $ 次标量乘法运算。&lt;/p&gt;
&lt;p&gt;如果按 $ (A_1  \cdot  (A_2  \cdot  A_3)) $ 的顺序计算，则需要做 $100 \cdot 5 \cdot 50+10 \cdot 100 \cdot 50=25000+50000=75000 $ 次标量乘法运算。&lt;/p&gt;
&lt;p&gt;可以看到，第二种括号化方案导致的运算量是第一种情况的10倍。采取适当的括号化方案，能够极大的提高矩阵相乘运算的速度。&lt;/p&gt;
&lt;p&gt;三、构造最优子结构，导出子问题递推式&lt;/p&gt;
&lt;p&gt;对于 $n$ 个矩阵相乘进行括号化，可以先把前 $i$ $(1 \leq i \leq n-1)$ 个矩阵和后 $n-i$ 个矩阵加括号，也就是把这条矩阵链分成长度为 $i$ 和 $n-i$ 的两条子矩阵链，再继续对各子链递归地进行括号化。这样，矩阵括号化问题就类似于“钢条切割”问题了，只是这里求的是矩阵相乘的最小总标量乘法次数，而不是“钢条段的最大总价格”。&lt;/p&gt;
&lt;p&gt;现在我们对某段矩阵链 $&amp;lt; A_i \cdots A_j &amp;gt;$ 进行一次括号化，我们选择在第 $k$ $(1 \leq k \leq j-1)$ 个矩阵处断开该链，使得该链分成两条子链 $&amp;lt; A_i \cdots A_k &amp;gt;$ 和 $&amp;lt; A_{k+1} \cdots A_j &amp;gt;$ 。&lt;/p&gt;
&lt;p&gt;设 $r[i,j]$ 表示链 $&amp;lt; A_i \cdots A_j &amp;gt;$ 的总标量乘法次数，则由矩阵相乘的规则得&lt;/p&gt;
&lt;p&gt;$$r[i,j]=r[i,k]+r[k+1,j]+p(i-1) \cdot p(k) \cdot p(j)$$&lt;/p&gt;
&lt;p&gt;式中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$r[i,k]$ 和 $r[k+1,j]$ 分别表示两条子链的各自的总标量乘法次数&lt;/li&gt;
&lt;li&gt;$ p(i-1) \cdot p(k) \cdot p(j) $ 表示两条子链合并时的标量乘法次数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对上面公式，同理于“钢条切割问题”，如果 $r[i,j]$ 是对链 $&amp;lt; A_i \cdots A_j &amp;gt;$ 括号化的所有方案中，总标量乘法次数最小（最优解），那么 $r[i,k]$ 和 $r[k+1,j]$ 一定是各自子链的最小总标量乘法次数（最优解）。&lt;/p&gt;
&lt;p&gt;（因为当选定某个 $k$ 后，合并子链的代价随之确定，即公式中 $p(i-1) \cdot p(k) \cdot p(j)$ 部分。假设 $r[i,k]$ 和 $r[k+1,j]$ 不是两条子链各自的最优解，那么如果用它们各自的最优解（更小的 $r[i,k]$ 和 $r[k+1,j]$）代换进上面公式，那么必然产生比 $r[i,j]$ 更小的值，与 $r[i,j]$ 是最优解的假设矛盾。）&lt;/p&gt;
&lt;p&gt;设 $m[i,j]$ 表示链 $&amp;lt; A_i \cdots A_j &amp;gt;$ 的最小总标量乘法次数（最优解），由上述思考过程可以得出最优解递推式：&lt;/p&gt;
&lt;p&gt;$$
m[i,j]=
\begin{cases}
0, &amp;amp; \text{if $i=j$} \&lt;br&gt;
min_{i \leq k \leq j-1} (m[i,k]+m[k+1,j]+p(i-1) \cdot p(k) \cdot p(j)), &amp;amp; \text{if $i &amp;lt; j$}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;四、动态规划法求解&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static int matrixChainBottonUp(int n, int[] s) {

    if (n &amp;lt; 2)
        return 0;
    int[] p = new int[s.length + 1];
    for (int i = 0; i &amp;lt; s.length; i++) {
        p[i + 1] = s[i];
    }

    int[][] m = new int[n + 1][n + 1];


    for (int length = 0; length &amp;lt;= n - 1; length++) {
        for (int i = 1; i + length &amp;lt;= n; i++) {
            int j = i + length;
            if (i == j) m[i][j] = 0;
            else {
                int min = Integer.MAX_VALUE;
                for (int k = i; k &amp;lt;= j - 1; k++) {
                    int temp = m[i][k] + m[k + 1][j] + p[2 * i - 1] * p[2 * k] * p[2 * j];
                    if (temp &amp;lt; min) min = temp;
                }
                m[i][j] = min;
            }
        }
    }

    return m[1][n];
}


public static void main(String[] args) {
    int n1 = 2;
    int[] p1 = {30, 35, 35, 15, 15, 5, 5, 10, 10, 20, 20, 25};
    int n2 = 3;
    int[] p2 = {10, 100, 100, 5, 5, 50};
    System.out.println(matrixChainBottonUp(n1, p1));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了便于理解，通过预处理使所有数组的下标从 $1$ 开始使用，这样第 $i$ 个矩阵的行和列就分别是 $p[2 \cdot i-1]$ 和 $p[2 \cdot i]$，二维 $m$ 数组的元素 $m[i][j]$ 表示矩阵链 $&amp;lt; A_i \cdots A_j &amp;gt;$ 的最优解。&lt;/p&gt;
&lt;p&gt;根据自底向上的思路，代码的计算过程为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m[1][1]，m[2][2]，m[3][3]，m[4][4]，m[5][5]，m[6][6]&lt;/li&gt;
&lt;li&gt;m[1][2]，m[2][3]，m[3][4]，m[4][5]，m[5][6]&lt;/li&gt;
&lt;li&gt;m[1][3]，m[2][4]，m[3][5]，m[4][6]&lt;/li&gt;
&lt;li&gt;m[1][4]，m[2][5]，m[3][6]&lt;/li&gt;
&lt;li&gt;m[1][5]，m[2][6]&lt;/li&gt;
&lt;li&gt;m[1][6]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，对 m[2][5]，算法会尝试在每一处$（2 \leq k &amp;lt; 5）$把链断开，然后求最优解：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
m[2][5] &amp;amp; = min
\begin{cases}
m[2][2]+m[3][5]+p[2 \cdot 2-1] \cdot p[2 \cdot 2] \cdot p[5 \cdot 2]=13000 \&lt;br&gt;
m[2][3]+m[4][5]+p[2 \cdot 2-1] \cdot p[3 \cdot 2] \cdot p[5 \cdot 2]=7125 \&lt;br&gt;
m[2][4]+m[4][5]+p[2 \cdot 2-1] \cdot p[4 \cdot 2] \cdot p[5 \cdot 2]=11375
\end{cases} \&lt;br&gt;
&amp;amp; = 7125
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;由于循环嵌套的深度为三层，每层的循环变量 $i,j,k$ 最多取 $n-1$ 个值，因此算法的运行时间为 $O(n^3)$。另外还需要大小为 $n*n$ 的二维数组来存放中间过程，因此算法的空间开销为 $O(n^2)$。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>钢条切割</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-09-15-%E7%AE%97%E6%B3%95-%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2/</link>
      <pubDate>Fri, 15 Sep 2017 19:54:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-09-15-%E7%AE%97%E6%B3%95-%E9%92%A2%E6%9D%A1%E5%88%87%E5%89%B2/</guid>
      <description>&lt;p&gt;一、问题：给定一段长度为 $n$ 的钢条和一个价格表 $p_i(i=1,2,&amp;hellip;,n)$ ，求切割钢条方案，使得切割后所有钢条的总价格最大。钢条长度 $i$ 均为正整数，对应的价格为 $p_i$ :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;长度 i&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;价格 pi&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;二、举例&lt;/p&gt;
&lt;p&gt;以下用 $n$ 表示钢条长度，用 $r_n$ 表示切割长度为 $n$ 的钢条的最大总价格。&lt;/p&gt;
&lt;p&gt;现在有一段长度为 3 的钢条，切割方案有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$n=3$，切割后总价：$r=8$&lt;/li&gt;
&lt;li&gt;$n=1+2$，切割后总价：$r=1+5=6$&lt;/li&gt;
&lt;li&gt;$n=1+1+1$，切割后总价：$r=1+1+1=3$&lt;/li&gt;
&lt;li&gt;$n=2+1$，切割后总价：$r=5+1=6$ （这种方法其实和上面第二种一样）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，最优的切割方案是 $n=3$，即不切割直接销售，此时 $r_3$=8&lt;/p&gt;
&lt;p&gt;三、划分子问题，导出递推式&lt;/p&gt;
&lt;p&gt;现在考虑每一步的切割：暂时先不考虑整条销售的情况，那么需要对钢条进行切割以取得最大销售总价格。&lt;/p&gt;
&lt;p&gt;我们规定，每一步切割只选择一个切割点进行一次切割，这次切割只把一段钢条一分为二，分成两条更小的钢条。&lt;/p&gt;
&lt;p&gt;对一段长度为 $n$ 的钢条，因为最小切割长度为 1（钢条长度被规定为正整数），所以对该段钢条一共有 $n-1$ 个可选择的切割点。&lt;/p&gt;
&lt;p&gt;对该钢条，假设在第 $i$（$1 \leq i \leq n-1$） 个切割点进行切割是最优的方案。该次切割后，把该段钢条分成更小的两段：$i$ 和 $n-i$ 。因此这次切割的总价格为：&lt;/p&gt;
&lt;p&gt;$$ r_n = r_i + r_{n-i} $$&lt;/p&gt;
&lt;p&gt;由这条公式显然可以推出，要使 $r_n$ 最大，$r_i$ 和 $r_{n-i}$ 也应该最大，因为 $r_n$ 是它们的和。&lt;/p&gt;
&lt;p&gt;换句话说，要使 $r_n$ 是本次切割的最大总价（最优解），那么 $r_i$ 和 $r_{n-i}$ 必须分别是：对长度为 $i$ 的钢条进行切割的最大价格，对长度为 $n-i$ 的钢条进行切割的最大价格。&lt;/p&gt;
&lt;p&gt;（反证法证明：假设本次切割的最大价格为 $r_n$，且 $ r_n = r^{&#39;}&lt;em&gt;i + r^{&#39;}&lt;/em&gt;{n-i} $，其中 $r^{&#39;}&lt;em&gt;i$ 和 $r^{&#39;}&lt;/em&gt;{n-i}$ 分别是切割长度为 $i$ 和 长度为 $n-i$ 的钢条的总价格，但它们并不是最大各自的最大价格。现在我们用它们的最优解 $r_i(&amp;gt; r^{&#39;}&lt;em&gt;i)$ 和 $r&lt;/em&gt;{n-i}(&amp;gt; r^{&#39;}&lt;em&gt;{n-i})$ 来替换公式中的 $r^{&#39;}&lt;em&gt;i$ 和 $r^{&#39;}&lt;/em&gt;{n-i}$，将得到：$r_i + r&lt;/em&gt;{n-i} &amp;gt; r^{&#39;}&lt;em&gt;i + r^{&#39;}&lt;/em&gt;{n-i} = r_n$，即存在比 $r_n$ 更大的总价格，与“ $r_n$是本次切割的最大价格 ”这一假设矛盾。因此如果 $r_n$ 是本次切割的最大价格，那么 $r_i$ 和 $r_{n-i}$ 必定也是切割各自钢条的所有方案中的最大价格，否则就会存在比 $r_n$ 更优的切割方案。）&lt;/p&gt;
&lt;p&gt;考虑到长度为 $n$ 的钢条一共有 $n-1$ 个切割点，以及不切割的方案，我们可以得到每一次切割的最优方案为：&lt;/p&gt;
&lt;p&gt;$$
r_n=
\begin{cases}
p_1, &amp;amp; \text{if $n=1$} \&lt;br&gt;
max ( p_n，r_1+r_{n-1}，\cdots，r_{n-1}+r_1 ), &amp;amp; \text{if $n&amp;gt;1$}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;四、递归方法求解&lt;/p&gt;
&lt;p&gt;按照上面的递推式，可以直接写出用递归求解的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static int cutSteelRecursive(int[] p, int n) {
    if (n == 1)
        return p[1];
    int max = -1;
    for (int i = 1; i &amp;lt;= n - 1; i++) {
        int temp = cutSteelRecursive(p, i) + cutSteelRecursive(p, n - i);
        if (temp &amp;gt; max) max = temp;
    }
    return Math.max(p[n], max);
}

public static void main(String[] args) {
    int[] p = {0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30};
    int result = cutSteelRecursive(p, n);
    System.out.println(result);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是用这样递归的方法会造成大量的重复计算，因为很多子问题都是重复的。如计算 $r_4$ 时，需要计算 $r_3$，$r_2$，$r_1$。其中计算 $r_3$ 时要先计算 $r_2$，$r_1$。计算好 $r_3$ 后返回最顶层，又要重新计算 $r_2$，$r_1$。&lt;/p&gt;
&lt;p&gt;另外，长度为 $n$ 的钢条一共有 $n-1$ 个切割点，在每个切割点上，我们都可以有选择“切割”和“不切割”两种方案，所以一共有 $2^{n-1}$ 种切割方案。显然，递归的方法搜索了每一段钢条的每一个切割点的切割方案，因此复杂度为 $O(2^{n})$。&lt;/p&gt;
&lt;p&gt;五、自底向上的动态规划&lt;/p&gt;
&lt;p&gt;为了避免如上面递归方法对子问题重复计算，我们使用“备忘录”方法，把计算过的子问题的最优解存放到一个数组中，并从最小的子问题开始求解，再求解基于这个子问题的上一层的子问题，因此称为自底向上求解。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public static int cutSteelBottonUp(int[] p, int n) {
    int[] r = new int[n + 1];
    for (int i = 1; i &amp;lt;= n; i++) {
        int max = -1;
        for (int j = 1; j &amp;lt; i; j++) {
            int temp = r[j] + r[i - j];
            if (temp &amp;gt; max) max = temp;
        }
        r[i] = Math.max(p[i], max);
    }
    return r[n];
}

public static void main(String[] args) {
    int[] p = {0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30};
    int result = cutSteelBottonUp(p, n);
    System.out.println(result);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用迭代的方法，从 $r_1$ 开始逐步计算 $r_2$，$r_3$ 直到 $r_n$，在每次计算出第 $i$ 个子问题的最优解后，立即存储到数组元素 $r[i]$ 中，供后续的求解利用：&lt;code&gt;int temp = r[j] + r[i - j];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对第 $i$ 个子问题 $r[i]$，内部循环一共执行 $i-1$ 次。当算法输入规模为 $n$ 时，总执行次数为： $0+1+2+\cdots+n-1=\frac{(n-1)^{2}}{2}$。因此对长度为 $n$ 的钢条，自底向上带备忘的迭代求解方法的复杂度为 $O(n^2)$ 。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>仅用递归逆序一个栈</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-09-13-%E7%AE%97%E6%B3%95-%E4%BB%85%E7%94%A8%E9%80%92%E5%BD%92%E9%80%86%E5%BA%8F%E4%B8%80%E4%B8%AA%E6%A0%88/</link>
      <pubDate>Wed, 13 Sep 2017 19:15:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-09-13-%E7%AE%97%E6%B3%95-%E4%BB%85%E7%94%A8%E9%80%92%E5%BD%92%E9%80%86%E5%BA%8F%E4%B8%80%E4%B8%AA%E6%A0%88/</guid>
      <description>&lt;p&gt;递归调用方法时，系统会把方法隐式地存到一个“系统栈”里面，即在方法即将进入下一层（即下一次调用自身）前，把本层内部的变量存储到系统的某些位置（我们不用关心），当递归调用从最底层开始回退，回退到本层的时候，方法会自动重新加载之前存储的数据。我们可以利用这一点来隐式地存储我们逆序目标栈过程中需要存储的数据。另外需要注意的是，在JAVA中按引用传参时，形参和实参指向同一个对象，此时方法内部对形参的操作实际上是对实参的操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import java.util.Stack;

public void stackReverse(Stack&amp;lt;Integer&amp;gt; stack){
    if(stack.isEmpty())
        return
    else{
        int botton=getAndRemoveBotton(stack);
        stackReverse(stack);
        stack.push(botton);
    }
}

public int getAndRemoveBotton(Stack&amp;lt;Integer&amp;gt; stack){
    int top=stack.pop();
    if(stack.isEmpty())
        return top;
    else{
        int t=getAndRemoveBotton(stack);
        stack.push(top);
        return t;
    }
}

public static void main(String[] args){
    Stack&amp;lt;Integer&amp;gt; stack=new Stack&amp;lt;Integer&amp;gt;();
    stack.push(1);
    stack.push(2);
    stack.push(3);
    stack.push(4);
    stack.push(5);
    
    stackReverse(stack);
    
    while(!stack.isEmpty()){
        System.out.println(stack.pop());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;stackReverse：依次取出栈底元素：1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5，存储在每一层的递归调用中（botton）。栈空后，方法开始回退，逐层执行push，（逆序地）把原栈底元素（botton）重新入栈：5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1。此时栈已逆序，算法完成。&lt;/li&gt;
&lt;li&gt;getAndRemoveBotton：取出栈底元素，使栈的高度减一，其余元素顺序不变。该方法在每一层调用时先取出栈顶元素，一直递归地往下取到栈空（利用“系统栈”来存储目标栈的元素）为止。当栈被取空，说明刚被取出的元素为栈底元素。此时开始回退递归，在每一层把pop出来的栈顶元素（top）又push回去，保持了栈的顺序不变，并把栈底元素一层层return上来（t）。如此即可在不改变栈顺序的情况下取出栈底元素。&lt;/li&gt;
&lt;li&gt;算法的关键是：巧妙利用方法递归调用、回退的顺序，和栈元素出栈、入栈的顺序的对应关系来实现操作过程中数据的存储。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>渐近记号</title>
      <link>https://utopizza.github.io/posts/algorithm/2017-09-06-%E7%AE%97%E6%B3%95-%E6%B8%90%E8%BF%91%E8%AE%B0%E5%8F%B7/</link>
      <pubDate>Wed, 06 Sep 2017 15:20:10 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/algorithm/2017-09-06-%E7%AE%97%E6%B3%95-%E6%B8%90%E8%BF%91%E8%AE%B0%E5%8F%B7/</guid>
      <description>&lt;p&gt;一、算法分析&lt;/p&gt;
&lt;p&gt;1、RAM 模型&lt;/p&gt;
&lt;p&gt;分析算法的结果意味着预测算法需要的资源。虽然有时候需要关心像内存、通信宽带或计算机硬件这类资源，但是对算法进行分析时，我们一般主要关注算法的计算时间。在能够分析一个算法之前，我们需要有一个实现技术的模型，在《算法导论》一书中，假定了一种通用的单处理器计算模型——随机访问机 (RAM) 来作为实现技术，算法可以用计算机程序来实现。在 RAM 模型中，指令一条一条地执行，没有并发操作。严格来说，我们应该精确定义 RAM 模型的指令以及代价。但是这样即乏味又对算法的设计与分析没有太多意义。因此，在 RAM 模型中，我们不对计算机的内层次如高速缓存、虚拟内存等进行建模，把精力集中于算法的数学上的复杂度分析。&lt;/p&gt;
&lt;p&gt;2、运行时间&lt;/p&gt;
&lt;p&gt;一个算法在特定输入上的&lt;strong&gt;运行时间&lt;/strong&gt;是指执行的基本操作数或者步数。我们认为计算机执行每一行代码需要的时间为常量（这个观点与 RAM 模型是一致的）。因此，我们核心关注的问题是：在给定&lt;strong&gt;输入规模 n&lt;/strong&gt; 条件下，算法代码执行完成并输出正确结果所需要的总步数（次数）。如插入排序算法在 n 个值的输入上的最坏运行时间为 $T(n)=an^2+bn+c$&lt;/p&gt;
&lt;p&gt;3、增长量级&lt;/p&gt;
&lt;p&gt;现在我们做出一种更简化的抽象：我们更感兴趣的是运行时间的增长率或增长量级。所以我们只考虑公式中最重要的项（例如，$an^2$），因为当 n 很大时，低阶项相对来说不太重要。同时我们也忽略最重要的项的系数，因为对大的输入，在确定计算效率时，常量因子不如增长率重要。在忽略了低阶项和最重要的项的系数后，只剩下最重要的项的因子。我们记某算法最坏情况下运行时间为 $\Theta(g(n))$，如插入排序的的最坏运行时间为 $\Theta(n^2)$。如果一个算法的最坏情况运行时间比另一个算法具有更低的增量级，那么我们认为前者比后者更有效。例如，一个 $\Theta(n^2)$ 的算法，在足够大的输入规模 n 下，比一个 $\Theta(n^3)$ 的算法要快。&lt;/p&gt;
&lt;p&gt;二、渐近记号&lt;/p&gt;
&lt;p&gt;1、$\Theta$ 记号&lt;/p&gt;
&lt;p&gt;对一个给定的函数 $g(n)$，用 $\Theta(g(n))$ 来表示以下函数的集合：
$\Theta(g(n))={ f(n):存在正常量c_1,c_2和n_0,对所有n \geq n_0,有 0  \leq c_1g(n) \leq f(n) \leq c_2g(n) } $&lt;/p&gt;
&lt;p&gt;字面上来说：若存在正常量 $c_1,c_2和n_0$，使得对足够大的 n ，函数 $f(n)$ 能被夹入 $c_1g(n)与c_2g(n)$ 之间，则 $f(n)$ 属于集合 $\Theta(g(n))$ 。我们记 $f(n)=\Theta(g(n))$ 以表示 $f(n)$ 是函数集合 $\Theta(g(n))$ 的成员。换句话说，对所有 $n \geq n_0$，函数 $f(n)$ 在一个常量因子内等于 $g(n)$ 。我们也称 $g(n)$ 是 $f(n)$ 的一个渐近确界。&lt;/p&gt;
&lt;p&gt;直觉上来说，我们可以通过忽略低阶项和最高阶项系数来直接求出 $\Theta(g(n))$ , 如 $\frac{1}{2}n^2 - 3n = \Theta(n^2)$。（只需证明存在正数 $c_1和c_2$ 使 $c_1n^2 \leq \frac{1}{2}n^2 - 3n \leq c_2n^2$ 即可。）&lt;/p&gt;
&lt;p&gt;2、$O$ 记号&lt;/p&gt;
&lt;p&gt;$\Theta$ 记号渐近地给出一个函数的上界和下界。对于给定函数 $f(n)$，当只有一个渐近上界时，使用 $O$ 记号，表示以下函数的集合：
$O(g(n))={ f(n):存在正常量c和n_0，使得对所有n \geq n_0，有0 \leq f(n) \leq cg(n) }$&lt;/p&gt;
&lt;p&gt;3、$\Omega$ 记号&lt;/p&gt;
&lt;p&gt;正如 $O$ 记号提供了一个函数的渐近上界，$\Omega$ 记号提供了渐近下界。对于给定函数 $f(n)$，用 $\Omega$ 表示以下函数的集合：
$\Omega(g(n))={ f(n):存在正常量c和n_0，使得对所有n \geq n_0，有0 \leq cg(n) \leq f(n) }$&lt;/p&gt;
&lt;p&gt;4、$o$ 记号&lt;/p&gt;
&lt;p&gt;由 $O$ 记号提供的渐近上界可能是也可能不是渐近紧确的。我们使用 $o$ 记号来表示一个非渐近紧确的上界：
$o(g(n))={ f(n):存在正常量c和n_0，使得对所有n \geq n_0，有0 \leq f(n) &amp;lt; cg(n) }$
例如，$2n^2=O(n^2)$，$2n=o(n^2)$，但 $2n^2 \neq o(n^2)$。&lt;/p&gt;
&lt;p&gt;5、$\omega$ 记号&lt;/p&gt;
&lt;p&gt;类似地，我们使用 $\omega$ 记号来表示一个非渐近紧确的下界：
$\omega(g(n))={ f(n):存在正常量c和n_0，使得对所有n \geq n_0，有0 \leq cg(n) &amp;lt; f(n) }$
例如，$\frac{n^2}{2}=\Omega(n^2)$，$\frac{n^2}{2}=\omega(n)$，但 $\frac{n^2}{2} \neq \Omega(n^2)$。&lt;/p&gt;
&lt;p&gt;三、类比总结&lt;/p&gt;
&lt;p&gt;$f(n)=O(g(n))$ 类似于 $a \leq b$
$f(n)=\Omega(g(n))$ 类似于 $a \geq b$
$f(n)=\Theta(g(n))$ 类似于 $a = b$
$f(n)=o(g(n))$ 类似于 $a &amp;lt; b$
$f(n)=\omega(g(n))$ 类似于 $a &amp;gt; b$&lt;/p&gt;
&lt;p&gt;另，实数的三分性不能携带到渐近记号。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>高斯混合模型的EM推导简单版</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-08-25-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E9%AB%98%E6%96%AF%E6%B7%B7%E5%90%88%E6%A8%A1%E5%9E%8B%E7%9A%84em%E6%8E%A8%E5%AF%BC%E7%AE%80%E5%8D%95%E7%89%88/</link>
      <pubDate>Fri, 25 Aug 2017 20:10:09 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-08-25-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E9%AB%98%E6%96%AF%E6%B7%B7%E5%90%88%E6%A8%A1%E5%9E%8B%E7%9A%84em%E6%8E%A8%E5%AF%BC%E7%AE%80%E5%8D%95%E7%89%88/</guid>
      <description>&lt;p&gt;一、高斯混合模型&lt;/p&gt;
&lt;p&gt;为简洁表达，以下把第 $k$ 个高斯模型 $\phi(y\mid\theta_k)$ 简记为 $\phi_k(y)$&lt;/p&gt;
&lt;p&gt;那么高斯混合模型为：&lt;/p&gt;
&lt;p&gt;$$
P(y\mid\theta)=\alpha_1\cdot\phi_1(y) + \alpha_2\cdot\phi_2(y) + \cdots + \alpha_K\cdot\phi_K(y)
$$&lt;/p&gt;
&lt;p&gt;二、高斯混合模型参数估计的EM算法&lt;/p&gt;
&lt;p&gt;输入：观测数据 ($y_1,y_2,\cdots,y_N$)，高斯混合模型
输出：高斯混合参数模型&lt;/p&gt;
&lt;p&gt;(1) 取参数的初始值开始迭代&lt;/p&gt;
&lt;p&gt;(2) E步：依据当前模型参数，计算每个分模型对每个观测数据的响应度&lt;/p&gt;
&lt;p&gt;以第一个高斯模型 $\phi_1$ 为例：&lt;/p&gt;
&lt;p&gt;对 $y_1$ 响应度：&lt;/p&gt;
&lt;p&gt;$$
\hat{\gamma}_{11}=
\frac
{\alpha_1\cdot\phi_1(y_1)}
{\alpha_1\cdot\phi_1(y_1) + \alpha_2\cdot\phi_2(y_1) + \cdots + \alpha_K\cdot\phi_K(y_1)}
$$&lt;/p&gt;
&lt;p&gt;对 $y_2$ 响应度：&lt;/p&gt;
&lt;p&gt;$$
\hat{\gamma}_{12}=
\frac
{\alpha_1\cdot\phi(y_2\mid\theta_1)}
{\alpha_1\cdot\phi_1(y_2) + \alpha_2\cdot\phi_2(y_2) + \cdots + \alpha_K\cdot\phi_K(y_2)}
$$&lt;/p&gt;
&lt;p&gt;$$\cdots$$&lt;/p&gt;
&lt;p&gt;对 $y_N$ 响应度：&lt;/p&gt;
&lt;p&gt;$$
\hat{\gamma}_{1N}=
\frac
{\alpha_1\cdot\phi(y_2\mid\theta_1)}
{\alpha_1\cdot\phi_1(y_N) + \alpha_2\cdot\phi_2(y_N) + \cdots + \alpha_K\cdot\phi_K(y_N)}
$$&lt;/p&gt;
&lt;p&gt;(3) M步：计算新一轮迭代的模型参数&lt;/p&gt;
&lt;p&gt;$$
\hat{\mu}&lt;em&gt;1=
\frac
{\hat{\gamma}&lt;/em&gt;{11} \cdot y_1 + \hat{\gamma}&lt;em&gt;{12} \cdot y_2 + \cdots + \hat{\gamma}&lt;/em&gt;{1N} \cdot y_N}
{\hat{\gamma}&lt;em&gt;{11} + \hat{\gamma}&lt;/em&gt;{12} + \cdots + \hat{\gamma}_{1N}}
$$&lt;/p&gt;
&lt;p&gt;$$
\hat{\sigma}&lt;em&gt;1^2=
\frac
{\hat{\gamma}&lt;/em&gt;{11} \cdot (y_1-\mu_1)^2 + \hat{\gamma}&lt;em&gt;{12} \cdot (y_2-\mu_1)^2 + \cdots + \hat{\gamma}&lt;/em&gt;{1N} \cdot (y_N-\mu_1)^2}
{\hat{\gamma}&lt;em&gt;{11} + \hat{\gamma}&lt;/em&gt;{12} + \cdots + \hat{\gamma}_{1N}}
$$&lt;/p&gt;
&lt;p&gt;$$
\hat{\alpha}&lt;em&gt;1=
\frac
{\hat{\gamma}&lt;/em&gt;{11} + \hat{\gamma}&lt;em&gt;{12} + \cdots + \hat{\gamma}&lt;/em&gt;{1N}}
{N}
$$&lt;/p&gt;
&lt;p&gt;对每个高斯模型都如此求出每一轮迭代的新参数 $(\hat{\alpha}_k，\hat{\mu}_k，\hat{\sigma}_k^2)$&lt;/p&gt;
&lt;p&gt;(4) 重复第(2)步和第(3)步，直到收敛。&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2017-08-25-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E9%AB%98%E6%96%AF%E6%B7%B7%E5%90%88%E6%A8%A1%E5%9E%8B%E7%9A%84EM%E6%8E%A8%E5%AF%BC%E7%AE%80%E5%8D%95%E7%89%88/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>机器学习入门资料汇总</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-08-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sun, 20 Aug 2017 21:57:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-08-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;p&gt;一、书&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《统计学习方法》 李航&lt;/li&gt;
&lt;li&gt;《机器学习》 周志华&lt;/li&gt;
&lt;li&gt;《机器学习实战》/《MachineLearning in Action》 Peter Harrington&lt;/li&gt;
&lt;li&gt;《集体编程智慧》/《Programming Collective Intelligence》 Toby Segaran&lt;/li&gt;
&lt;li&gt;《An Introduction to Optimization》 E. Chong, S. Zak&lt;/li&gt;
&lt;li&gt;《Convex Optimization》 Stephen Boyd, Lieven Vandenberghe&lt;/li&gt;
&lt;li&gt;《推荐系统实践》 项亮&lt;/li&gt;
&lt;li&gt;《MachineLearning》 Tom Mitchell(2008年出版，比较古老)&lt;/li&gt;
&lt;li&gt;《Neural Networks and Learning Machines》 Simon Haykin(偏数学理论)&lt;/li&gt;
&lt;li&gt;《The Elements of Statistical Learning》 Trevor Hastie，etc(看完这本就不用看其他机器学习的书了)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、视频(Coursera)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《机器学习基石》 台湾大学, 林轩田&lt;/li&gt;
&lt;li&gt;《MachineLearning》 Standford, Andrew Ng(吴恩达) &lt;a href=&#34;http://cs229.stanford.edu/materials.html&#34;&gt;讲义&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、博客&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/tornadomeet/tag/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/&#34;&gt;tornadomeet机器学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://machinelearningmastery.com/machine-learning-roadmap-your-self-study-guide-to-machine-learning/&#34;&gt;The Missing Roadmap to Self-Study Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://machinelearningmastery.com/a-tour-of-machine-learning-algorithms/&#34;&gt;A Tour of Machine Learning Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ml.memect.com/article/machine-learning-guide.html#%E6%9B%B4%E5%A4%9A%E6%94%BB%E7%95%A5&#34;&gt;Best Machine Learning Resources for Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/56256/&#34;&gt;机器学习的最佳入门学习资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ml.memect.com/article/machine-learning-guide.html#%E6%9B%B4%E5%A4%9A%E6%94%BB%E7%95%A5&#34;&gt;机器学习入门资源不完全汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/21714701&#34;&gt;机器学习，数据挖掘在研究生阶段大概要学些什么？-知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/37256015&#34;&gt;机器学习、数据挖掘 如何进阶成为大神？-知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25197792&#34;&gt;机器学习的数学基础-知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;四、实战&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;kaggle的练习和比赛&lt;/li&gt;
&lt;li&gt;自己实现算法的公式推导和core code&lt;/li&gt;
&lt;li&gt;python各种库如pandas等的熟练运用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;五、总结&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在学习理论的时候，多注意实践&lt;/li&gt;
&lt;li&gt;重点是你要学ML干什么：最快最方便的使用一个通用方法做一个分类器或者回归器(例如验证码识别,etc)；从理论上想改进某一种机器学习的学习算法或数据结构(模型)；更好的了解各种机器学习算法的特点，应对不同的问题，选择不同的方法；利用现在的硬件产品(显卡，集群)，更好的实现一套机器学习算法。&lt;/li&gt;
&lt;li&gt;如果想找这方面的工作，尤其是大企业的工作，主要看你发了哪些论文，开发了哪些系统，而不是看你用XX开源软件多熟练。你懂的，毕竟熟练使用一个软件并不是这个领域的关键问题。&lt;/li&gt;
&lt;li&gt;一个有用的用于建立知识点图谱的工具&lt;a href=&#34;https://metacademy.org/&#34;&gt;metacademy&lt;/a&gt;，帮助你快速掌握你所需要的知识点，而不用盲目搜索浪费时间。&lt;/li&gt;
&lt;li&gt;入门分两种级别，第一种是应用级，读几本书跟几门课程，多做实现和编程练习，就可以快速掌握用机器学习解决问题的能力。第二种是科研级，非常难，要做出成绩，需要找一个靠谱的导师。&lt;/li&gt;
&lt;li&gt;机器学习比较偏向数学问题的推导，所以在顶会上的很多paper更看重idea，不是很看重实验是否来源于真实数据。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>高斯混合模型的EM推导</title>
      <link>https://utopizza.github.io/posts/machinelearning/2017-08-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E9%AB%98%E6%96%AF%E6%B7%B7%E5%90%88%E6%A8%A1%E5%9E%8B%E7%9A%84em%E6%8E%A8%E5%AF%BC/</link>
      <pubDate>Sun, 20 Aug 2017 16:14:10 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/machinelearning/2017-08-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E9%AB%98%E6%96%AF%E6%B7%B7%E5%90%88%E6%A8%A1%E5%9E%8B%E7%9A%84em%E6%8E%A8%E5%AF%BC/</guid>
      <description>&lt;p&gt;一、高斯混合模型：&lt;/p&gt;
&lt;p&gt;$$P(y \mid \theta) = \sum_{k=1}^{K} \alpha_k \cdot \phi(y \mid \theta_k)$$&lt;/p&gt;
&lt;p&gt;其中，$\alpha_k \text{是系数，} \alpha_k \geq0 \text{，且 }
\sum_{k=1}^{K} \alpha_k=1 \text{；}$&lt;/p&gt;
&lt;p&gt;$\phi(y \mid \theta_k) = \frac{1}{\sqrt{2\pi}} exp (-\frac{(y-\mu_k)^2}{2\sigma_k^2}) \text{，}\theta_k = (\mu_k ,\sigma_k^2)\text{ 是第k个高斯模型。}$&lt;/p&gt;
&lt;p&gt;二、高斯混合模型参数估计的EM算法&lt;/p&gt;
&lt;p&gt;输入：观测数据 ($y_1,y_2,\cdots,y_N$)，高斯混合模型
输出：高斯混合参数模型&lt;/p&gt;
&lt;p&gt;(1) 取参数的初始值开始迭代
(2) E步：依据当前模型参数，计算分模型 k 对观测数据 $y_j$ 的响应度&lt;/p&gt;
&lt;p&gt;$$\hat{\gamma}&lt;em&gt;{jk} = \frac{\alpha_k \cdot \phi(y_j \mid \theta_k)}{\sum&lt;/em&gt;{k=1}^{K} \alpha_k \cdot \phi(y_j \mid\theta_k)}\text{，}j=1,2,\cdots,N;k=1,2,\cdots,K$$&lt;/p&gt;
&lt;p&gt;(3) M步：计算新一轮迭代的模型参数&lt;/p&gt;
&lt;p&gt;$$\hat{\mu}&lt;em&gt;k =\frac{\sum&lt;/em&gt;{j=1}^{N} \hat{\gamma}&lt;em&gt;{jk} \cdot y_j}{\sum&lt;/em&gt;{j=1}^{N} \hat{\gamma}_{jk}}\text{，}k=1,2,\cdots,K$$&lt;/p&gt;
&lt;p&gt;$$\hat{\sigma}&lt;em&gt;k^2 = \frac{\sum&lt;/em&gt;{j=1}^{N} \hat{\gamma}&lt;em&gt;{jk}\cdot (y_j - \mu_k)^2}{\sum&lt;/em&gt;{j=1}^{N} \hat{\gamma}_{jk}}\text{，}k=1,2,\cdots,K$$&lt;/p&gt;
&lt;p&gt;$$\hat{\alpha}&lt;em&gt;k =\frac{\sum&lt;/em&gt;{j=1}^{N} \hat{\gamma}_{jk}}{N}\text{，}k=1,2,\cdots,K$$&lt;/p&gt;
&lt;p&gt;(4) 重复第(2)步和第(3)步，直到收敛。&lt;/p&gt;
&lt;p&gt;三、上述算法基于似然估计进行推导：&lt;/p&gt;
&lt;p&gt;(1). 似然函数：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
P(y,\gamma \mid \theta) &amp;amp;=
\prod_{j=1}^{N} P(y_j, (\gamma_{j1},\cdots,\gamma_{jK}) \mid \theta) \&lt;br&gt;
&amp;amp;=\prod_{k=1}^{K} \prod_{j=1}^{N} [\alpha_k \cdot \phi(y_j \mid \theta_k)]^{\gamma_{jk}} \&lt;br&gt;
&amp;amp;=\prod_{k=1}^{K} \alpha_k \prod_{j=1}^{N} [\phi(y_j \mid \theta_k)]^{\gamma_{jk}} \&lt;br&gt;
&amp;amp;=\prod_{k=1}^{K} \alpha_k \prod_{j=1}^{N}
[\frac{1}{\sqrt{2\pi}} exp(- \frac{(y-\mu_k)^2}{2\sigma_k^2})]^{\gamma_{jk}} \&lt;br&gt;
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;式中，$n_k=\sum_{j=1}^{N} \gamma_{jk}$，$\sum_{k=1}^{K} n_k=N$。&lt;/p&gt;
&lt;p&gt;(2) 在 $E$ 步确定 $Q$ 函数：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
Q(\theta,\theta^{(i)}) &amp;amp;= E[logP(y,\gamma \mid \theta) \mid y, \theta^{(i)}] \&lt;br&gt;
&amp;amp;= \cdots \&lt;br&gt;
&amp;amp;= \sum_{k=1}^{K} { n_k \cdot log\alpha_k + \sum_{j=1}^{N} [log(\frac{1}{\sqrt{2\pi}}) - log(\sigma_k)- \frac{1}{2\sigma_k^2}(y_j-\mu_k)^2] }
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;(3) 在 $M$ 步中，求 $Q(\theta,\theta^{(i)})$ 对 $\theta$ 的极大值，即求新一轮迭代的模型参数：&lt;/p&gt;
&lt;p&gt;$$
\theta^{(i)} =
\underset{\theta}{\operatorname{argmax}} Q(\theta,\theta^{(i)})
$$&lt;/p&gt;
&lt;p&gt;求 $\hat{\mu}_k，\hat{\sigma}_k^2$ 只需将上式分别对 $\hat{\mu}_k，\hat{\sigma}_k^2$ 求导并令导数等于0即可，这是常规的求极值的方法。但是对于 $\hat{\alpha}&lt;em&gt;k$，因为存在着 $\sum&lt;/em&gt;{k=1}^{K} \alpha_k = 1$ 这个条件，所以这里要注意对有多个有关系的变量的求偏导问题。&lt;/p&gt;
&lt;p&gt;(4) 对 $\alpha_k$ 求偏导：&lt;/p&gt;
&lt;p&gt;$$
\frac{\partial Q}{\partial \alpha_k} =
\frac{\partial{\sum_{k=1}^{K} [ n_k \cdot log(\alpha_k) ]} }
{\partial \alpha_k} \&lt;br&gt;
s.t. \quad \sum_{k=1}^{K} \alpha_k = 1
$$&lt;/p&gt;
&lt;p&gt;由于存在和为1的这个条件，各个变量之间存在联系，所以不能简单的分别对各个 $\alpha_k$ 求偏导。如果忽略这个约束，那么每个概率都可以无限大，目标函数也无限大了。&lt;/p&gt;
&lt;p&gt;当对其中一个变量如 $\alpha_1$ 求偏导的时候，考虑到总和为1的约束条件，此时应该把剩下的 $K-1$ 个变量看作“另一个”变量(可取其中一个变量如 $\alpha_K$ 作为代表)：&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\frac{\partial Q}{\partial \alpha_1} &amp;amp;= \frac{\partial{ n_1 \cdot log(\alpha_1) + \sum_{k=2}^{K} n_k \cdot log(\alpha_k)}}
{\partial \alpha_1} \&lt;br&gt;
&amp;amp;= \frac{n_1}{\alpha_1} + \frac{n_K \cdot \partial log(\alpha_K)}{\alpha_1} \&lt;br&gt;
&amp;amp;= \frac{n_1}{\alpha_1} + \frac{n_K}{\alpha_K} \cdot \frac{\partial \alpha_K}{\alpha_1} \&lt;br&gt;
&amp;amp;= \frac{n_1}{\alpha_1} + \frac{n_K}{\alpha_K} \cdot \frac{\partial (1-\sum_{k=1}^{K-1} \alpha_k)}{\alpha_1} \&lt;br&gt;
&amp;amp;= \frac{n_1}{\alpha_1} + \frac{n_K}{\alpha_K} \cdot \frac{\partial (-\alpha_1)}{\partial \alpha_1} \&lt;br&gt;
&amp;amp;= \frac{n_1}{\alpha_1} - \frac{n_K}{\alpha_K}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;令
$$\frac{\partial Q}{\partial \alpha_1}=\frac{n_1}{\alpha_1} - \frac{n_K}{\alpha_K}=0$$&lt;/p&gt;
&lt;p&gt;得
$$\frac{n_1}{\alpha_1} = \frac{n_K}{\alpha_K}$$&lt;/p&gt;
&lt;p&gt;同理
$$\frac{n_1}{\alpha_1}
=\frac{n_2}{\alpha_2}
=\cdots
=\frac{n_{K-1}}{\alpha_{K-1}}
=\frac{n_K}{\alpha_K}$$&lt;/p&gt;
&lt;p&gt;因此
$$\frac{n_1}{\alpha_1}=\frac{n_1+\cdots+n_K}{\alpha_1+\cdots+\alpha_K}=\frac{N}{1}=N$$&lt;/p&gt;
&lt;p&gt;因此
$$\alpha_1=\frac{n_1}{N},\cdots,\alpha_K=\frac{n_K}{N}$$&lt;/p&gt;
&lt;p&gt;即
$$\alpha_k=\frac{n_k}{N},k=1,2,\cdots,K$$&lt;/p&gt;
&lt;p&gt;求解完毕。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>阶段总结(1)</title>
      <link>https://utopizza.github.io/posts/summary/2017-08-17-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%931/</link>
      <pubDate>Thu, 17 Aug 2017 20:28:10 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/summary/2017-08-17-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%931/</guid>
      <description>&lt;p&gt;从6月13日和导师说了因为公司加班要求变重，论文进度需要缓一缓，到今天8月17日，刚好过去两个月。这两个月里没有看论文，而是去看书，打基础。这两个月读完的书有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《算法》(第四版) Robert Sedgewick&lt;/li&gt;
&lt;li&gt;《统计方法学》 李航&lt;/li&gt;
&lt;li&gt;《机器学习》 周志华&lt;/li&gt;
&lt;li&gt;《机器学习实战》 Peter Harrington&lt;/li&gt;
&lt;li&gt;《推荐系统实践》 项亮&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中，我把《算法》中主要的代码都亲自写了一遍，算是温习了一遍快忘光了的基础算法。然后《统计方法学》、《机器学习》偏理论，《机器学习实战》偏实操，我便把这三本书结合起来一起看。也是亲自手写了一遍《机器学习实战》里面的Python代码，总的来说算是稍微入门了一些最基础的机器学习算法。&lt;/p&gt;
&lt;p&gt;至于《推荐系统实践》这本书，是之前做***“Point of Interest Recommendation”***的论文方向的时候，博士师兄推荐的书，这本书讲的比较全面但是也比较浅，也是一门介绍推荐系统入门的书。&lt;/p&gt;
&lt;p&gt;总的来说，这两个月做的事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;温习了一遍基础算法和数据结构&lt;/li&gt;
&lt;li&gt;初步学习并推导了一遍最基础的机器学习的核心公式&lt;/li&gt;
&lt;li&gt;初步学习了用Python来实现一些简单的机器学习算法，进行小规模的数据实验&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;接下来的计划：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看台湾大学林轩田教授的《机器学习基石》视频&lt;/li&gt;
&lt;li&gt;看Coursera上AndrewNg的《机器学习》，完成所有作业，最好能全部拿满分&lt;/li&gt;
&lt;li&gt;尝试参加kaggle的练习题&lt;/li&gt;
&lt;li&gt;读大量的论文，继续做之前的论文&lt;/li&gt;
&lt;li&gt;刷leetcode、牛客算法，保持对数据结构和算法的熟练度&lt;/li&gt;
&lt;li&gt;注意看看面经&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>从现在开始写博客</title>
      <link>https://utopizza.github.io/posts/summary/2017-01-26-%E6%80%BB%E7%BB%93-%E4%BB%8E%E7%8E%B0%E5%9C%A8%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 26 Jan 2017 00:29:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/summary/2017-01-26-%E6%80%BB%E7%BB%93-%E4%BB%8E%E7%8E%B0%E5%9C%A8%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;p&gt;研一上学期已经过去。在这学期里，我接触到了些非常厉害的同学。通过和他们的交流，我发现他们本科时候就到达的对计算机专业的见识和视野，还有技术水平和能力，让我感到震惊。&lt;/p&gt;
&lt;p&gt;就拿我的舍友S来说，他来自厦门大学软件学院，他从大一就加入了他们学校的ACM俱乐部，大一就开始注重算法的学习，经过俱乐部大牛师兄师姐的指导，和高强度的训练，还有本科四年的积累，他的算法水平非常高。另一方面，他的很多老师在学校外面有自己的公司，他经常利用寒暑假去他老师的公司实习，学到了很多工程性应用的技术，例如HTML、PHP、.net、Android等。到了大三大四，他还和他们学校的同学组队刷面试题，在leetcode、poj等各种oj系统刷算法，在牛客网刷面试题，参加各种大大小小公司的招聘笔试面试，最后华为、美团、花旗均给了offer，其中美团更是开出了年薪18万的高薪，对于一个本科生来说，只有非常优秀突出的学生才能有这样待遇。而且我们毕业这年，是互联网的寒潮，很多互联网企业缩招，包括BAT。后来他没有选择工作，而是选择了保研。他拿到了HUST和南京大学的保研offer，但因为南京大学给的offer比较迟，他等不及了就给了HUST确认。&lt;/p&gt;
&lt;p&gt;通过与其交谈，你会发现他的逻辑思维非常严密严谨，这得益于他读过很多讲逻辑思维，讲编程的书。我问他要了一个书单，他看过的基本都是非常著名的牛作，如《编程之美》、《数学之美》、《编程珠玑》、《暗时间》、《时间简史》、《算法导论》、《程序员面试宝典》等等。他还看了很多网易公开课上的、TED上的、coursera上的讲算法和数学的视频。他非常喜欢数学，喜欢思考，和他讨论问题，经常被他的严密论证所折服。&lt;/p&gt;
&lt;p&gt;相比之下，我就差太多了。本科四年，除了成绩还好、利用课余时间加入一个编程俱乐部dreamtech做过不少.net和android的项目，我基本没有意识到要注重过编程功底和算法、数学功底的修炼，没有系统的训练，没有规划，不知道自己要干什么，就是跟着大浪潮瞎学新技术，一会儿学.net，一会儿学android，一会儿做mvc，一会儿学点php，sqlserver，MySQL，html，JavaScript，一会儿又跑去搞数学建模，虽然拿了一点儿奖，看起来好像很厉害，什么都会，但其实都是浅尝则止，没有学通，更没有学精。&lt;/p&gt;
&lt;p&gt;这学期通过对身边的牛人（包括导师、同学，还有社区一些技术大牛）的观察，我深刻认识到，作为计算机专业的学生，最核心的竞争力就是算法功底和数学功底，还有最重要的逻辑思维能力。尤其是看了牛人刘未鹏先生的《暗时间》后，眼界大开，深深为之震撼。我终于明白，必须从现在开始恶补算法和数学功底，还要培养好逻辑思维能力。另外，还要开始记录和积累，养成写博客记录技术和心得的习惯。最后，希望这三年研究生，好好努力，让自己的技术水平和思维能力，有个质的飞跃。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spark完全分布式搭建与使用(6)</title>
      <link>https://utopizza.github.io/posts/spark/2016-07-05-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-6/</link>
      <pubDate>Tue, 05 Jul 2016 22:44:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/spark/2016-07-05-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-6/</guid>
      <description>&lt;p&gt;十二、运行Spark分布式程序&lt;/p&gt;
&lt;p&gt;按照前面博客设置好Library后，选择Modules，可以看到导入的包列表如图（注意，这里包的顺序是会对项目的编译造成影响的，好像要把spark的包放在scala的包之前，否则编译的时候会报一些找不到某些函数的错误，具体问题忘了记录了，这个可以自己慢慢试试，百度上也有解决方案）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-6/modules.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;到这里，就可以运行单机/本地模式的spark程序了。要跑本地程序，命令如下（scala）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;val conf=new SparkConf().setAppName(“XXXX”).setMaster(“local”)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是如果要运行集群模式的spark程序，必须还要将程序项目打包，并将这个程序分发到集群各个节点运行。要使程序分布式运行，命令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;val conf=new SparkConf().setAppName(“XXXX”).setMaster(“spark://master:8070”).setJars(List(“XXX”))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中的setMaster()里面的主机名和端口号需要根据你自己的实际配置进行设定，见第十节。而setJars()是本项目经过编译打包后的jar包的路径，要运行分布式程序必须添加这个包，否则会报错说workers找不到各种类&lt;/p&gt;
&lt;p&gt;项目打包步骤如下：&lt;/p&gt;
&lt;p&gt;(1) 进入 Artifacts-&amp;gt;JAR-&amp;gt;From modules with …&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-6/package-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(2) 填入所建立的scala class的名字&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-6/package-2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(3) 选择Build on make，并记下项目打包输出的位置（重要！！）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-6/package-3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;设置完后，编译本项目。第一次编译的时候先不要在源码使用.setJars()这个函数。让编译通过。编译通过后，打开控制台，通过刚才的目录找到生成的Jar包。修改源码，加入这个包。在这里可以删除 “output root” 下的scala和spark的包，因为这两个包的导出没有什么意义。&lt;/p&gt;
&lt;p&gt;(4) 根据路径找到与项目同名的JAR包：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-6/package-4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(5) 运行Spark的分布式程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-6/package-5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(6) 正确运行结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-6/package-6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意，如果程序运行一半，没有打印结果直接结束，有可能是内存不足导致程序直接死亡。这种情况下，可能不会报任何错误，在 WEB UI 上也只是显示 Finished 。我当时给master分配的内存从2G扩展到4G，才解决了这个问题，正确运行出结果。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/gaoxing/p/4414362.html&#34;&gt;使用IDEA开发SPARK提交remote cluster执行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/javastart/article/details/43372977&#34;&gt;Windows下IntelliJ IDEA中调试Spark Standalone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/shishanyuan/p/4721120.html&#34;&gt;Spark入门实战系列&amp;ndash;3.Spark编程模型（下）&amp;ndash;IDEA搭建及实战&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;十三、使用Spark的机器学习库MLlib&lt;/p&gt;
&lt;p&gt;我运行了其中的k-means算法，比较简单这里不再赘述，可参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/opensource/os-cn-spark-practice4/&#34;&gt;使用 Spark MLlib 做 K-means 聚类分析&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.scala-lang.org/api/current/#scala.collection.immutable.StringLike&#34;&gt;Scala Standard Library&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/yunlong34574/article/details/38635853&#34;&gt;Spark学习1： 基础函数功能解读&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Spark完全分布式搭建与使用(5)</title>
      <link>https://utopizza.github.io/posts/spark/2016-07-05-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-5/</link>
      <pubDate>Tue, 05 Jul 2016 16:36:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/spark/2016-07-05-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-5/</guid>
      <description>&lt;p&gt;十一、搭建Spark程序开发环境IDEA&lt;/p&gt;
&lt;p&gt;1、下载地址：&lt;a href=&#34;https://www.jetbrains.com/idea/#chooseYourEdition&#34;&gt;IDEA Download&lt;/a&gt;
2、解压并移动到路径：&lt;code&gt;/usr/local/idea-IC-145.597.3&lt;/code&gt;
3、安装，进入 &lt;code&gt;/usr/local/idea-IC-145.597.3/bin&lt;/code&gt;，运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# idea.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、在安装导向过程中，选择下载并安装SCALA插件。参考：&lt;a href=&#34;http://www.cnblogs.com/shishanyuan/p/4721120.html&#34;&gt;Spark入门实战系列&amp;ndash;3.Spark编程模型（下）&amp;ndash;IDEA搭建及实战&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、安装完成后，新建SCALA工程：&lt;code&gt;File-&amp;gt;New Project-&amp;gt;Scala-&amp;gt;Scala-&amp;gt;Next&lt;/code&gt;，然后填入Project的名字，选择项目目录、SDK、Scala SDK，一般默认即可。然选择Finish。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-5/idea-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;6、在src文件夹下直接新建一个scala类对象：右键 &lt;code&gt;src-&amp;gt;new-&amp;gt;scala class&lt;/code&gt;，命名，并填入代码。（这里要注意，在src文件下不要再建立嵌套的source类型的文件（像src这样的蓝色的文件夹），否则无法运行。关于这一点，上面的参考帖子里面是错的，也可能他那个是旧版本才支持的，这个问题具体我没有深入研究，我取消了中间嵌套的所有source文件夹就可以正常运行了）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-5/idea-2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;7、设置library，导入jar包。添加两个即可，一个是Scala SDK Library，这里选择scala-2.10.4版本。另一个是&lt;code&gt;$SPARK_HOME/lib/spark-assembly-1.1.0-hadoop2.2.0.jar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(1) 进入设置界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-5/library-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(2) 添加JAVA包&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-5/library-2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(3) 找到本地的Spark的安装目录下的lib，选择assembly包&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-5/library-3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(4) 添加Scala SDK&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-5/library-4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(5) 选择本地安装的scala-2.10.4&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-07-05-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-5/library-5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spark完全分布式搭建与使用(4)</title>
      <link>https://utopizza.github.io/posts/spark/2016-06-29-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-4/</link>
      <pubDate>Wed, 29 Jun 2016 21:46:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/spark/2016-06-29-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-4/</guid>
      <description>&lt;p&gt;十、SPARK WEB UI问题&lt;/p&gt;
&lt;p&gt;因为spark有本地模式Local、伪分布式Local-cluster、完全分布式Standalone（集群模式） 三种运行模式。如果不用集群模式去运行spark，在 master:8090 是看不到执行任务的记录的。只能在 master:4040 里面看得到。但是4040只能在任务执行过程中看到，任务执行完后该端口会自动关闭，任务记录被撤销。&lt;/p&gt;
&lt;p&gt;spark默认是运行本地模式，例如：$ spark-shell
要运行集群模式，使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# spark-shell  --master  spark://master:8070
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个端口号要按照8090页面顶头的提示来设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-06-29-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-4/master.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.aboutyun.com/thread-12294-1-1.html&#34;&gt;Spark on YARN两种运行模式介绍&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/happyanger6/article/details/47070223&#34;&gt;Spark运行模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.aboutyun.com/thread-8160-1-1.html&#34;&gt;spark 介绍及本地模式、集群模式安装&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Spark完全分布式搭建与使用(3)</title>
      <link>https://utopizza.github.io/posts/spark/2016-06-22-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-3/</link>
      <pubDate>Wed, 22 Jun 2016 15:19:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/spark/2016-06-22-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-3/</guid>
      <description>&lt;p&gt;九、安装Spark-1.6.1-bin-hadoop2.6&lt;/p&gt;
&lt;p&gt;1、下载：&lt;a href=&#34;http://spark.apache.org/downloads.html&#34;&gt;Download Apache Spark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-06-22-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-3/download.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、将安装包移动到到路径：&lt;code&gt;/usr/local/&lt;/code&gt;，并解压&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# cd  /usr/local/
[root@master ~]# tar  -xzvf  spark-1.6.1-bin-hadoop2.6.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、配置环境变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# vim  /etc/profile

export  SPARK_HOME=/usr/local/spark-1.6.1-bin-hadoop2.6
export  PATH=${SPARK_HOME}/bin: ${SPARK_HOME}/sbin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在可以将所有的PATH整合到一起：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export  JAVA_HOME=&amp;#34;/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.101.x86_64&amp;#34;
export  JRE_HOME=${JAVA_HOME}/jre
export  CLASS_PATH=.:${JAVA_HOME}/lib: ${JRE_HOME}/lib
export  SCALA_HOME=/usr/lib/scala-2.10.4
export  HADOOP_HOME=/usr/local/hadoop-2.7.2
export  SPARK_HOME=/usr/local/spark-1.6.1-bin-hadoop2.6
export  PATH=$PATH:${JAVA_HOME}/bin:${SCALA_HOME}/bin:${HADOOP_HOME}/bin:${HADOOP_HOME}/sbin:${SPARK_HOME}/bin: ${SPARK_HOME}/sbin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-06-22-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-3/path.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置完成后&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# source  /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同步到worker1和worker2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# scp  /etc/profile  root@worker1:/etc/profile
[root@master ~]# ssh  root@worker1
[root@worker1 ~]# source  /etc/profile
[root@worker1 ~]# exit

[root@master ~]# scp  /etc/profile  root@worker2:/etc/profile
[root@master ~]# ssh  root@worker1
[root@worker2 ~]# source  /etc/profile
[root@worker2 ~]# exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、配置Spark文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# cd  /usr/local/spark-1.6.1-bin-hadoop2.6/conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step 1：spark-env.sh&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# cp  spark-env.sh.template  spark-env.sh
[root@master ~]# vim  spark-env.sh

export  JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.101.x86_64
export  SCALA_HOME=/usr/lib/scala-2.10.4 
export  SPARK_HOME=/usr/local/spark-1.6.1-bin-hadoop2.6
export  SPARK_MASTER_IP=master
export  SPARK_MASTER_PORT=8070
export  SPARK_MASTER_WEBUI_PORT=8091
export  SPARK_WORKER_INSTANCES=2
export  SPARK_WORKER_MEMORY=1g
export  HADOOP_CONF_DIR=/usr/local/hadoop-2.7.2/etc/hadoop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step2：slaves.template&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# cp  slaves.template  slaves
[root@master ~]# vim  slaves

// 加入
worker1
worker2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step 3：复制spark到worker1和worker2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# scp  –r  /usr/local/spark-1.6.1-bin-hadoop2.6  root@worker1:/usr/local/spark-1.6.1-bin-hadoop2.6
[root@master ~]# scp  –r  /usr/local/spark-1.6.1-bin-hadoop2.6  root@worker2:/usr/local/spark-1.6.1-bin-hadoop2.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5、启动Spark集群&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# /usr/local/spark-1.6.1-bin-hadoop2.6/sbin/start-all.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用命令 &lt;code&gt;jps&lt;/code&gt; 查看，如果有master和worker进程说明启动成功。可以通过 &lt;code&gt;http://master:8091&lt;/code&gt; 查看集群情况和运行的applications。也可以在 &lt;code&gt;http://master:4040&lt;/code&gt; 查看application运行的job的具体信息&lt;/p&gt;
&lt;p&gt;6、用例测试，略。&lt;/p&gt;
&lt;p&gt;7、本文参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://my.oschina.net/132722/blog/196027?fromerr=UObz2ulL&#34;&gt;Spark安装启动 and 在程序中调用spark服务&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.open-open.com/lib/view/open1427935743396.html&#34;&gt;Spark 伪分布式 &amp;amp; 全分布式 安装指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.thebigdata.cn/Hadoop/28957.html&#34;&gt;Spark1.6.0 on Hadoop-2.6.3 安装配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.dataguru.cn/thread-530953-1-1.html&#34;&gt;Spark1.4.1完全分布集群hadoop2.6.0上部署&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Spark完全分布式搭建与使用(2)</title>
      <link>https://utopizza.github.io/posts/spark/2016-06-10-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-2/</link>
      <pubDate>Fri, 10 Jun 2016 16:11:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/spark/2016-06-10-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-2/</guid>
      <description>&lt;p&gt;八、安装Hadoop-2.7.2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;说明：如果是想用 “Spark on Standalon” 模式就不用安装Hadoop，如果想用 “Spark on Yarn” 或者需要去hdfs取数据则应先装Hadoop&lt;/li&gt;
&lt;li&gt;参见：
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/remote_roamer/article/details/50579874&#34;&gt;CentOS7 上安装Hadoop 2.7.2 的安装 和 初步使用&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dataguru.cn/thread-530951-1-1.html&#34;&gt;Hadoop2.6, Red hat Linux 6.6 x64集群完全分布式安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-open.com/lib/view/open1435761287778.html&#34;&gt;CentOS7安装Hadoop2.7完整流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、下载地址：&lt;a href=&#34;http://hadoop.apache.org/releases.html&#34;&gt;Apache Hadoop Releases Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里我选择binary文件进行下载，这种是已经编译好的源码，下载的文件名是hadoop-2.6.4.tar.gz；如果喜欢自己编译，可以选择source文件进行下载，下载的文件名是hadoop-2.7.2-src.tar.gz。（参考：&lt;a href=&#34;http://www.itpub.net/thread-1875856-1-1.html&#34;&gt;hadoop两个安装包分别是干啥的？&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-06-10-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-2/download.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、将安装包移动到到路径：&lt;code&gt;/usr/local/&lt;/code&gt;，并解压&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# cd  /usr/local
[root@master ~]# tar  -xzvf  hadoop-2.7.2.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、判断Hadoop版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# /usr/local/hadoop-2.7.2/bin/hadoop  version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、配置环境变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# vim  /etc/profile

export  HADOOP_HOME=/usr/local/hadoop-2.7.2
export  PATH=$PATH:{HADOOP_HOME}/bin:{HADOOP_HOME}/sbin

[root@master ~]# source  /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同步到worker1和worker2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# scp  /etc/profile  root@worker1:/etc/profile
[root@master ~]# ssh  root@worker1
[root@worker1 ~]# source  /etc/profile
[root@worker1 ~]# exit

[root@master ~]# scp  /etc/profile  root@worker2:/etc/profile
[root@master ~]# ssh  root@worker2
[root@worker2 ~]# source  /etc/profile
[root@worker2 ~]# exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5、配置Hadoop文件&lt;/p&gt;
&lt;p&gt;step 1：在master本地创建以下文件夹&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/home/Hadoop/name&lt;/li&gt;
&lt;li&gt;/home/hadoop/data&lt;/li&gt;
&lt;li&gt;/home/hadoop/temp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;step 2：进入目录 &lt;code&gt;/usr/local/hadoop-2.7.2/etc/hadoop/&lt;/code&gt; ，修改配置文件，共7个&lt;/p&gt;
&lt;p&gt;(1) hadoop-env.sh：修改 &lt;code&gt;JAVA_HOME&lt;/code&gt; 值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export  JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.101.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2) yarn-env.sh：修改 &lt;code&gt;JAVA_HOME&lt;/code&gt; 值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;export  JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.101.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(3) slaves：写入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;worker1
worker2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(4) core-site.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;configuration&amp;gt;
        &amp;lt;property&amp;gt;
                &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;
                &amp;lt;value&amp;gt;hdfs://master:9000&amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property&amp;gt;
                &amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;
                &amp;lt;value&amp;gt;file:/home/hadoop/temp&amp;lt;/value&amp;gt;
                &amp;lt;description&amp;gt;Abase for other temporary directories.&amp;lt;/description&amp;gt;
        &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(5) hdfs-site.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;configuration&amp;gt;
         &amp;lt;property&amp;gt;
               &amp;lt;name&amp;gt;dfs.namenode.secondary.http-address&amp;lt;/name&amp;gt;
               &amp;lt;value&amp;gt;master:9001&amp;lt;/value&amp;gt;
         &amp;lt;/property&amp;gt;
         &amp;lt;property&amp;gt;
                 &amp;lt;name&amp;gt;dfs.namenode.name.dir&amp;lt;/name&amp;gt;
                 &amp;lt;value&amp;gt;file:/home/hadoop/name&amp;lt;/value&amp;gt;
         &amp;lt;/property&amp;gt;
         &amp;lt;property&amp;gt;
                 &amp;lt;name&amp;gt;dfs.datanode.data.dir&amp;lt;/name&amp;gt;
                 &amp;lt;value&amp;gt;file:/home/hadoop/data&amp;lt;/value&amp;gt;
         &amp;lt;/property&amp;gt;
         &amp;lt;property&amp;gt;
                 &amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
                 &amp;lt;value&amp;gt;2&amp;lt;/value&amp;gt;
         &amp;lt;/property&amp;gt;
         &amp;lt;property&amp;gt;
                 &amp;lt;name&amp;gt;dfs.webhdfs.enabled&amp;lt;/name&amp;gt;
                 &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;
         &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(6) mapred-site.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;configuration&amp;gt;
                &amp;lt;property&amp;gt;
                         &amp;lt;name&amp;gt;mapreduce.framework.name&amp;lt;/name&amp;gt;
                         &amp;lt;value&amp;gt;yarn&amp;lt;/value&amp;gt;
                &amp;lt;/property&amp;gt;
                &amp;lt;property&amp;gt;
                         &amp;lt;name&amp;gt;mapreduce.jobhistory.address&amp;lt;/name&amp;gt;
                         &amp;lt;value&amp;gt;master:10020&amp;lt;/value&amp;gt;
                &amp;lt;/property&amp;gt;
                &amp;lt;property&amp;gt;
                         &amp;lt;name&amp;gt;mapreduce.jobhistory.webapp.address&amp;lt;/name&amp;gt;
                         &amp;lt;value&amp;gt; master:19888&amp;lt;/value&amp;gt;
                &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(7) yarn-site.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;configuration&amp;gt;
        &amp;lt;property&amp;gt;
               &amp;lt;name&amp;gt;yarn.nodemanager.aux-services&amp;lt;/name&amp;gt;
               &amp;lt;value&amp;gt;mapreduce_shuffle&amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property&amp;gt;
               &amp;lt;name&amp;gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&amp;lt;/name&amp;gt;
               &amp;lt;value&amp;gt;org.apache.hadoop.mapred.ShuffleHandler&amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property&amp;gt;
               &amp;lt;name&amp;gt;yarn.resourcemanager.address&amp;lt;/name&amp;gt;
               &amp;lt;value&amp;gt; master:8032&amp;lt;/value&amp;gt;
       &amp;lt;/property&amp;gt;
       &amp;lt;property&amp;gt;
               &amp;lt;name&amp;gt;yarn.resourcemanager.scheduler.address&amp;lt;/name&amp;gt;
               &amp;lt;value&amp;gt;master:8030&amp;lt;/value&amp;gt;
       &amp;lt;/property&amp;gt;
       &amp;lt;property&amp;gt;
               &amp;lt;name&amp;gt;yarn.resourcemanager.resource-tracker.address&amp;lt;/name&amp;gt;
               &amp;lt;value&amp;gt;master:8031&amp;lt;/value&amp;gt;
       &amp;lt;/property&amp;gt;
       &amp;lt;property&amp;gt;
               &amp;lt;name&amp;gt;yarn.resourcemanager.admin.address&amp;lt;/name&amp;gt;
               &amp;lt;value&amp;gt; master:8033&amp;lt;/value&amp;gt;
       &amp;lt;/property&amp;gt;
       &amp;lt;property&amp;gt;
               &amp;lt;name&amp;gt;yarn.resourcemanager.webapp.address&amp;lt;/name&amp;gt;
               &amp;lt;value&amp;gt; master:8088&amp;lt;/value&amp;gt;
       &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step 3：复制整个hadoop目录到worker1和worker2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# scp  –r  /usr/local/hadoop-2.7.2  root@worker1:/usr/local/hadoop-2.7.2
[root@master ~]# scp  –r  /usr/local/hadoop-2.7.2  root@worker2:/usr/local/hadoop-2.7.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;6、启动 hadoop&lt;/p&gt;
&lt;p&gt;step 1：进入安装目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# cd  /usr/local/hadoop-2.7.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step 2：格式化 namenode，成功的话会看到“successfully formatted”和“exitting with status 0”&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# ./bin/hdfs  namenode  -format
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，&lt;strong&gt;以后重新格式化可能导致datanode无法启动，需要手动更新集群ID&lt;/strong&gt;，参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/yeruby/article/details/21542465&#34;&gt;重新格式化HDFS的方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/HIJAY/blog/220816&#34;&gt;Hadoop中重新格式化namenode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;step 3：启动 hdfs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# ./sbin/start-dfs.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step 4：启动 yarn&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# ./sbin/start-yarn.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step 5：用 &lt;code&gt;jps&lt;/code&gt; 命令来查看是否启动成功，若成功会看到master上面有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;namenode&lt;/li&gt;
&lt;li&gt;secondarynamenode&lt;/li&gt;
&lt;li&gt;resourcemanager&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在worker1和worker2上面有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;datanode&lt;/li&gt;
&lt;li&gt;nodemanager&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;step 6：查看集群状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# ./sbin/hdfs  dfsadmin  -report
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者在浏览器打开：&lt;code&gt;http://master:50070&lt;/code&gt; 和 &lt;code&gt;http://master:8088&lt;/code&gt; 查看。注意 &lt;code&gt;live nodes&lt;/code&gt; 的个数&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-06-10-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-2/hadoop-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-06-10-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-2/hadoop-2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;7、HadoopH的其他操作，略。参考：&lt;a href=&#34;http://book.2cto.com/201401/39823.html&#34;&gt;Hadoop的启动与停止&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spark完全分布式搭建与使用(1)</title>
      <link>https://utopizza.github.io/posts/spark/2016-05-29-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-1/</link>
      <pubDate>Sun, 29 May 2016 13:44:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/spark/2016-05-29-spark-spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-1/</guid>
      <description>&lt;p&gt;一、实验环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;宿主机：winserver 2012 服务器一台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目标：在三台虚拟机上搭建Spark完全分布式集群，一台master，两台slaves&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二、安装虚拟机oracle virtualbox&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;Download VirtualBox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、安装 CentOS-6.7-x86_64.iso 镜像文件&lt;/p&gt;
&lt;p&gt;1、下载地址：&lt;a href=&#34;http://isoredirect.centos.org/centos/6/isos/x86_64/&#34;&gt;CentOS Mirror&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、导入到virtualbox中进行安装。（因为三台虚拟机将要进行差不多的软件安装，所以先在一台虚拟机上部署好了master，再将这个虚拟机完全复制两份作为slaves，然后再稍微修改配置文件，这样比较省事）&lt;/p&gt;
&lt;p&gt;3、配置：名称为CentOS6_Master，CPU为2个，内存为2G，硬盘等其他参数默认安装。在配置CPU的时候可能无法使用，因为win8 之后的微软操作系统默认安装了Hyper-V虚拟机独占了虚拟资源，可以在：控制面板-&amp;gt;程序和功能-&amp;gt;启用或关闭Windows功能-&amp;gt;启动“删除角色和功能”向导中进行禁用，问题解决。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-05-29-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-1/Hyper-V-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-05-29-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-1/Hyper-V-2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、安装好后从“存储”中删除CentOS镜像文件盘片，否则每次启动虚拟机都是进行镜像安装而不是进入虚拟机。另外，安装好后如果宿主机可以上网，那么虚拟机也是可以立即上网的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-05-29-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-1/deleteDisk.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;四、安装 java-1.7.0&lt;/p&gt;
&lt;p&gt;1、下载安装并验证，参考：&lt;a href=&#34;http://jingyan.baidu.com/article/4853e1e51d0c101909f72607.html&#34;&gt;在CentOS上安装Java环境&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、设置JAVA_HOME环境变量（使用 &lt;code&gt;ls  –lrt  /etc/alternatives/java&lt;/code&gt; 来定位jdk的安装路径，参考：&lt;a href=&#34;http://www.cnblogs.com/kerrycode/archive/2015/08/27/4762921.html&#34;&gt;Linux如何查看JDK的安装路径&lt;/a&gt;）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 使用vim编辑器进入配置文件
[root@master ~]# vim  /etc/profile

// 修改配置文件
export  JAVA_HOME=&amp;#34;/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.101.x86_64&amp;#34; （加入）
export  JRE_HOME=${JAVA_HOME}/jre
export  CLASS_PATH=.:${JAVA_HOME}/lib: ${JRE_HOME}/lib

// 保存并退出编辑器

// 在terminal中输入命令使其生效
[root@master ~]# source  /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（注意：我这里安装的是openjdk，与常见的sun jdk存放的位置目录不同，参见：&lt;a href=&#34;http://blog.csdn.net/wind520/article/details/9308809&#34;&gt;CentOS中JAVA_HOME的环境变量设置&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;3、测试是否安装成功&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# java -version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;五、安装 scala-2.10.4&lt;/p&gt;
&lt;p&gt;1、因为spark是1.6.1版本，对应scala要用2.10.x版本，否则无法兼容&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&#34;http://www.scala-lang.org/download/2.10.4.html&#34;&gt;SCALA 2.10.4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、解压到系统目录 /usr/lib/ 下&lt;/p&gt;
&lt;p&gt;3、配置环境变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# vim  /etc/profile

export  SCALA_HOME=/usr/lib/scala-2.10.4
export  PATH=$PATH:${SCALA_HOME}/bin

[root@master ~]# source  /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、测试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# scala  –version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;六、安装 SSH&lt;/p&gt;
&lt;p&gt;1、查看SSH是否已安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# rpm –qa | grep ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# yum  install  openssh-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3、启动/关闭/重启&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# service  sshd  start/stop/restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、验证：查看22端口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# netstat  –antp | grep sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5、设置开机自启/关闭&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# chkconfig  sshd  on/off
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;七、复制虚拟机并构建局域网&lt;/p&gt;
&lt;p&gt;1、virtualbox虚拟机的网络设置形式有四种（详情参考：&lt;a href=&#34;https://www.douban.com/group/topic/15558388/&#34;&gt;VirtualBox虚拟机网络设置（四种方式）&lt;/a&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NAT网络地址转换模式：安装后的默认模式，虚拟机可以访问主机，主机不能访问虚拟机，虚拟机之间不能相互访问。即虚拟机不真实存在于网络中，网络服务由主机单向提供。&lt;/li&gt;
&lt;li&gt;Bridged Adapter网桥模式：虚拟机能被分配到一个网络独立的IP，直接连接入网络中，真是存在于网络。因此虚拟机与主机、虚拟机与虚拟机之间都是可以相互访问的。&lt;/li&gt;
&lt;li&gt;Internal内部网络模式：虚拟机与外部网络完全断开，只实现虚拟机之间的内部网络模式。虚拟无法访问主机，也不能通过主机连接外部网络。&lt;/li&gt;
&lt;li&gt;Host-only Adapter完全主机模式：最复杂，虚拟出一张网卡供虚拟机使用，灵活性最高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、复制虚拟机，选择完全复制即可，修改名字为 CentOS6_Worker1 、 CentOS6_Worker2&lt;/p&gt;
&lt;p&gt;3、配置局域网，使三台虚拟机能相互ping通，并且能SSH免密码登录（因为本来想设置最好的Bridged Adapter网桥模式，但是尝试了几次都失败了，最后采用比较简单的Internal内部网络模式。如果你也选择该模式，请提前下载好Hadoop和Spark的安装包，因为部署好内部网络后将与外部网络断开无法上网下载）：&lt;/p&gt;
&lt;p&gt;(1)、先在宿主机（winServer）的cmd中启动vituralbox的dhcp服务，设置一个vituralbox内部网络（参考：&lt;a href=&#34;http://blog.csdn.net/fyifei0558/article/details/45506271&#34;&gt;Virtualbox下使用internal networking做一个小局域网&lt;/a&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;gt;C:\Program Files\Oracle\VirtualBox&amp;gt;VBoxManage.exe dhcpserver add
--netname  intnet 
--ip  192.168.1.1 
--netmask  255.255.255.0 
--lowerip  192.168.1.1 
--upperip  192.168.1.100 
--enable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2)、修改虚拟机-&amp;gt;设置-&amp;gt;网络&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-05-29-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-1/intnet.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(3)、启动三台虚拟机，分别添加新的网络连接配置“eth0”。其中，掩码都是255.255.255.0，网关都是192.168.1.1，各自IP如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Master：192.168.1.2&lt;/li&gt;
&lt;li&gt;Worker1：192.168.1.3&lt;/li&gt;
&lt;li&gt;Worker2：192.168.1.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-05-29-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-1/IP-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;设置完后，重启eth0端口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# ifdown  eth0
[root@master ~]# ifup  eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看网络设置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果下图所示就说明设置好了。（安装的无桌面版本CentOS的高手请忽略）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-05-29-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-1/IP-2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(4)、关闭三台虚拟机的防火墙，然后用ping分别进行测试（参考：&lt;a href=&#34;http://blog.163.com/cdma2368@126/blog/static/301742762014113103036962/&#34;&gt;centOS 6.5关闭防火墙步骤&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;(5)、设置每台虚拟机的网络主机名，这步只是为了方便配置，不用每次都写一堆那么长的IP地址。要先获得root权限才能进行如下操作（下面以master为例）：&lt;/p&gt;
&lt;p&gt;step 1：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# vim  /etc/hosts

// 进入该配置文件后，清掉原来的默认设置，然后加入：
127.0.0.1       localhost
192.168.1.2     Master
192.168.1.3     Worker1
192.168.1.4     Worker2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：这个配置文件很关键，&lt;strong&gt;一定要把原来默认的地址全部去掉，否则之后安装hadoop的网页UI会无法正常工作&lt;/strong&gt;。参见：&lt;a href=&#34;http://blog.csdn.net/shenlan211314/article/details/7414728&#34;&gt;Hadoop在master查看live nodes为0解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;step 2：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# vim  /etc/sysconfig/network
//将里面的HOSTNAME改为master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step 3：再使用hostname命令指定一次&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# hostname  master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step 4：
重新登录/重启一次，这时如果配置成功，就会看见命令提示字符串变成&amp;rdquo;[root@master ~]#&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(6)、以上，三台机器都设置好各自网络主机名后，再用ping测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2016-05-29-Spark-Spark%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-1/IP-3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(7)、设置master到两个worker虚拟机SSH免密码登录&lt;/p&gt;
&lt;p&gt;step 1：在master上面进入root的.ssh目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# cd  ~/.ssh
//如果没有该目录，就用mkdir  ~/.ssh建立并进入
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step 2：使用 &lt;code&gt;ssh-keygen  –t  rsa&lt;/code&gt; 来生成公钥和私钥，连续回车，不设置密码&lt;/p&gt;
&lt;p&gt;step 3：把公钥文件复制到要其他机器的root用户目录下的.ssh目录（如果不是root用户，需要在前面加/home/）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# scp  ~/.ssh/id_rsa.pub  root@master:/root/.ssh/authorized_keys
[root@master ~]# scp  ~/.ssh/id_rsa.pub  root@worker1:/root/.ssh/authorized_keys
[root@master ~]# scp  ~/.ssh/id_rsa.pub  root@worker2:/root/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step 4：检测master是否可以不需要密码登录到worker1和worker2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[root@master ~]# ssh  master
[root@master ~]# ssh  root@worker1
[root@master ~]# ssh  root@worker2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此，所有准备步骤基本完成，下一步可以开始正式安装hadoop、spark&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>技术笔记(10)-CentOS7部署</title>
      <link>https://utopizza.github.io/posts/technique/2015-10-14-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B010/</link>
      <pubDate>Wed, 14 Oct 2015 20:47:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/technique/2015-10-14-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B010/</guid>
      <description>&lt;p&gt;0、准备：centos7镜像文件刻录成U盘系统盘&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.centos.org/download/&#34;&gt;Download CentOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1、服务器是PowerEdge R720，安装系统前要做radis磁盘阵列&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/wgp13x/p/3750957.html&#34;&gt;Dell R720上的系统安装问题的解决办法（关于RAID建立磁盘阵列的技术）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、服务器插上U盘，重启，进入BIOS设置U盘启动，安装centos7(尽量安装英文版否则路径是中文会出现乱码，可以选择安装GNOME桌面版，适用于新手)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://jingyan.baidu.com/article/a3aad71aa180e7b1fa009676.html&#34;&gt;centos7.0安装教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、配置IP,DNS,GATEWAY,NETMASK,成功之后可以上网&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jb51.net/os/RedHat/189963.html&#34;&gt;centos下网络配置方法(网关、dns、ip地址配置)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、下载并安装LAMP(apache2/httpd，mysql/mariadb，PHP以及PHP相关组件一堆)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.howtoforge.com/apache_php_mysql_on_centos_7_lamp&#34;&gt;Install Apache, PHP And MySQL On CentOS 7 (LAMP)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、部署web网站，记得要从防火墙firewall或者iptables开放网站端口，还要留意SELinux这个东西，有可能在阻止你的网站写缓存文件，导致网站故障&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.linuxidc.com/Linux/2015-03/114749.htm&#34;&gt;CentOS 7 开放端口&lt;/a&gt;
&lt;a href=&#34;http://blog.csdn.net/yudar1024/article/details/42341041&#34;&gt;redhat7 centos7 关闭SELinux和防火墙的办法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、部署ftp网站，如果想用浏览器访问的话，需要设置允许被动模式，并且开发3000-4000端口，否则只能用ftp命令访问&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/lightnear/archive/2012/10/07/2713539.html&#34;&gt;CentOS配置VSFTP服务器&lt;/a&gt;
&lt;a href=&#34;http://www.cnblogs.com/qytan36/archive/2010/05/15/1736270.html&#34;&gt;为何客户端软件可以而浏览器则不能连接FTP服务器&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>全国大学生节能减排社会实践与科技竞赛</title>
      <link>https://utopizza.github.io/posts/projects/2015-08-27-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%8A%82%E8%83%BD%E5%87%8F%E6%8E%92%E7%A4%BE%E4%BC%9A%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%A7%91%E6%8A%80%E7%AB%9E%E8%B5%9B/</link>
      <pubDate>Thu, 27 Aug 2015 09:15:33 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/projects/2015-08-27-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%8A%82%E8%83%BD%E5%87%8F%E6%8E%92%E7%A4%BE%E4%BC%9A%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%A7%91%E6%8A%80%E7%AB%9E%E8%B5%9B/</guid>
      <description>&lt;p&gt;一、简介&lt;/p&gt;
&lt;p&gt;参赛作品是《面向物联网的无线无源风速仪》，设计一种面向物联网的无线无源小型三杯式风速仪，其工作原理是：
(1) 无源：在有风时通过一个内置的小型发电装置，捕获风能，转化为电能供应自身工作，在无风时使用后备电源。为节省电源，大部分时间处于休眠状态，除非被上位机唤醒进行数据交互；
(2) 无线：使用zigbee无线通讯模块，与上位机进行通信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-08-27-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%8A%82%E8%83%BD%E5%87%8F%E6%8E%92%E7%A4%BE%E4%BC%9A%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%A7%91%E6%8A%80%E7%AB%9E%E8%B5%9B/%E8%A3%85%E7%BD%AE%E5%AE%9E%E7%89%A9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中我实现的部分是上位机软件，主要功能：定时向串口发送数据采集命令，然后从串口读取风速仪返回的风速值，显示到屏幕上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-08-27-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%8A%82%E8%83%BD%E5%87%8F%E6%8E%92%E7%A4%BE%E4%BC%9A%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%A7%91%E6%8A%80%E7%AB%9E%E8%B5%9B/%E4%B8%8A%E4%BD%8D%E6%9C%BA%E9%87%87%E9%9B%86%E9%A3%8E%E9%80%9F%E5%80%BC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-08-27-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%8A%82%E8%83%BD%E5%87%8F%E6%8E%92%E7%A4%BE%E4%BC%9A%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%A7%91%E6%8A%80%E7%AB%9E%E8%B5%9B/%E4%B8%8A%E4%BD%8D%E6%9C%BA%E8%BD%AF%E4%BB%B6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;二、上位机软件的实现&lt;/p&gt;
&lt;p&gt;我用 WinForm + MS.Chart 的方式来实现，用 WinForm 来制作窗体，用 MS.Chart 来实现风速值的实时显示。上位机的采集数据的过程包括：定时、读写串口、CRC校验、字符串和十六进制等的数值转换、更新图形界面、监控报警最大风速值等。关键代码：&lt;/p&gt;
&lt;p&gt;初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;//用于更新图形化界面的事件委托
delegate void UpdateTextEventHandler_experimental(List&amp;lt;double&amp;gt; experimentalWSList);
UpdateTextEventHandler_experimental updateTextEventHandler_experimental;
delegate void UpdateChartEventHandler_experimental(string experimentalWSstr);
UpdateChartEventHandler_experimental updateChartEventHandler_experimental;

//初始化串口
public void InitCOM_experimental(string PortName)
{
    experimentalPort = new SerialPort(PortName);
    experimentalPort.BaudRate = 9600;//波特率
    experimentalPort.Parity = Parity.None;//无奇偶校验位
    experimentalPort.StopBits = StopBits.One;//一个停止位
    experimentalPort.DataBits = 8;//8位数据位
    experimentalPort.DataReceived += experimentalPort_DataReceived;//接收返回数据时触发的事件
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接收数据，更新图形化界面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;//串口接收到风速仪返回数据时触发的事件
private void experimentalPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
{
    //读取缓冲区的数据，这里应该先处理读取的数据
    int[] buffer = new int[7];
    for (int i = 0; i &amp;lt; buffer.Length; i++)
    {
        buffer[i] = experimentalPort.ReadByte();
    }
    double newWindSpeed = Convert.ToDouble(DataHandler_ExperimentalMachine(buffer));
    speedWarnTest(newWindSpeed);
    experimentalWSList.Add(newWindSpeed);

    //更新Textbox
    updateTextEventHandler_experimental = new UpdateTextEventHandler_experimental(UpdateTextBox_experimental);
    this.Invoke(updateTextEventHandler_experimental, new List&amp;lt;double&amp;gt;[] { experimentalWSList });

    //更新Chart
    updateChartEventHandler_experimental = new UpdateChartEventHandler_experimental(UpdateChart_experimental);
    this.Invoke(updateChartEventHandler_experimental, new string[] { newWindSpeed.ToString() });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发送数据采集命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;//用于发送采集命令的定时器
private void SendCommand_Timer()
{
    myTimer = new System.Timers.Timer();
    myTimer.Elapsed += new ElapsedEventHandler(SendCommand_TimedEvent);
    myTimer.AutoReset = true;
    myTimer.Enabled = true;
    myTimer.Interval = 1000;
}

//发送采集命令事件
private void SendCommand_TimedEvent(object sender, System.Timers.ElapsedEventArgs e)
{
    SendCommand_ExperimentalMachine();
}

//发送采集命令具体操作：写数据到串口
private void SendCommand_ExperimentalMachine()
{
    //ID 03 00 00 00 01 CR0 CR1；十六进制，ID为设备地址，CR0，CR1为CRC校验位，其他固定
    byte[] commandByte = { 0x01, 0x03, 0x00, 0x00, 0x00, 0x01 }; //01 03 00 00 00 01 0A 84
    byte[] commandByteCRC = CRC(commandByte, commandByte.Length);
    experimentalPort.Write(commandByteCRC, 0, commandByteCRC.Length);
}

//实验机型CRC校验算法
private byte[] CRC(byte[] byteArray, int datalen)
{
    byte CRC16Lo, CRC16Hi, CL, CH, SaveHi, SaveLo;
    int i, Flag;
    CRC16Lo = 0xFF;
    CRC16Hi = 0xFF;
    CL = 0x01;
    CH = 0xA0;
    for (i = 0; i &amp;lt; datalen; i++)
    {
        CRC16Lo ^= byteArray[i];
        for (Flag = 0; Flag &amp;lt; 8; Flag++)
        {
            SaveHi = CRC16Hi;
            SaveLo = CRC16Lo;
            CRC16Hi &amp;gt;&amp;gt;= 1;
            CRC16Lo &amp;gt;&amp;gt;= 1;
            if ((SaveHi &amp;amp; 0x01) == 0x01)
            {
                CRC16Lo |= 0x80;
            }
            if ((SaveLo &amp;amp; 0x01) == 0x01)
            {
                CRC16Hi ^= CH;
                CRC16Lo ^= CL;
            }
        }
    }

    byte[] newByteArray = new byte[datalen + 2];
    for (int j = 0; j &amp;lt; datalen; j++)
    {
        newByteArray[j] = byteArray[j];
    }
    newByteArray[datalen] = CRC16Lo;
    newByteArray[datalen + 1] = CRC16Hi;
    //return (CRC16Hi &amp;lt;&amp;lt; 8) | CRC16Lo;
    return newByteArray;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三、调试&lt;/p&gt;
&lt;p&gt;1 先使用虚拟串口，让COM1和COM2连接&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-08-27-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%8A%82%E8%83%BD%E5%87%8F%E6%8E%92%E7%A4%BE%E4%BC%9A%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%A7%91%E6%8A%80%E7%AB%9E%E8%B5%9B/%E8%B0%83%E8%AF%95-%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2 打开串口助手，连接COM1，模拟风速仪&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-08-27-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%8A%82%E8%83%BD%E5%87%8F%E6%8E%92%E7%A4%BE%E4%BC%9A%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%A7%91%E6%8A%80%E7%AB%9E%E8%B5%9B/%E8%B0%83%E8%AF%95-%E4%B8%B2%E5%8F%A3%E5%8A%A9%E6%89%8B.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;3 启动上位机软件，连接COM2，测试数据采集命令的发送、风速值的采集和显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-08-27-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%8A%82%E8%83%BD%E5%87%8F%E6%8E%92%E7%A4%BE%E4%BC%9A%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%A7%91%E6%8A%80%E7%AB%9E%E8%B5%9B/%E8%B0%83%E8%AF%95-%E4%B8%8A%E4%BD%8D%E6%9C%BA%E8%BD%AF%E4%BB%B6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>挑战杯河北省大学生课外学术科技作品竞赛</title>
      <link>https://utopizza.github.io/posts/projects/2015-05-28-%E9%A1%B9%E7%9B%AE-%E6%8C%91%E6%88%98%E6%9D%AF%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%AF%BE%E5%A4%96%E5%AD%A6%E6%9C%AF%E7%A7%91%E6%8A%80%E4%BD%9C%E5%93%81%E7%AB%9E%E8%B5%9B/</link>
      <pubDate>Thu, 28 May 2015 16:50:35 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/projects/2015-05-28-%E9%A1%B9%E7%9B%AE-%E6%8C%91%E6%88%98%E6%9D%AF%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%AF%BE%E5%A4%96%E5%AD%A6%E6%9C%AF%E7%A7%91%E6%8A%80%E4%BD%9C%E5%93%81%E7%AB%9E%E8%B5%9B/</guid>
      <description>&lt;p&gt;一、简介&lt;/p&gt;
&lt;p&gt;参赛作品是《基于四旋翼无人机的输电线路智能巡检系统》，用无人机代替人工对高压电线塔进行智能巡检。其智能体现于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据高压电线塔的地理坐标自动计算出高压线塔检测点的位置&lt;/li&gt;
&lt;li&gt;根据两塔之间的距离和气温、风速、覆冰等气象条件计算两塔之间高压电线的应力弧垂&lt;/li&gt;
&lt;li&gt;自动制定飞行计划，实现无人控制，自动巡检&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无人机硬件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-05-28-%E9%A1%B9%E7%9B%AE-%E6%8C%91%E6%88%98%E6%9D%AF%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%AF%BE%E5%A4%96%E5%AD%A6%E6%9C%AF%E7%A7%91%E6%8A%80%E4%BD%9C%E5%93%81%E7%AB%9E%E8%B5%9B/%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%A1%AC%E4%BB%B6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中我负责的部分是无人机飞控系统的开发：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-05-28-%E9%A1%B9%E7%9B%AE-%E6%8C%91%E6%88%98%E6%9D%AF%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%AF%BE%E5%A4%96%E5%AD%A6%E6%9C%AF%E7%A7%91%E6%8A%80%E4%BD%9C%E5%93%81%E7%AB%9E%E8%B5%9B/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%A3%9E%E6%8E%A7%E7%B3%BB%E7%BB%9F.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;二、飞控系统的开发&lt;/p&gt;
&lt;p&gt;该系统基于一个开源的飞控地面站系统——MissionPlanner进行改造。我所做的工作有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;清理多余的面板和插件，只留下我们需要的功能，使软件更加简洁好用。&lt;/li&gt;
&lt;li&gt;加入一些新的小功能，如从文件读入高压输电塔的经纬度、在地图上选取高压输电塔的坐标点并且将其转换成经纬度显示在面板上等等。&lt;/li&gt;
&lt;li&gt;加入自动生成巡检点的算法。该算法根据用户在地图上选取的点，或者从文件中读入的高压输电塔的经纬度，自动计算出关键巡检点，并生成飞行计划。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-05-28-%E9%A1%B9%E7%9B%AE-%E6%8C%91%E6%88%98%E6%9D%AF%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%AF%BE%E5%A4%96%E5%AD%A6%E6%9C%AF%E7%A7%91%E6%8A%80%E4%BD%9C%E5%93%81%E7%AB%9E%E8%B5%9B/%E5%85%B3%E9%94%AE%E5%B7%A1%E6%A3%80%E7%82%B9.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;该软件是基于WinForm实现的，因此前面两点都不难实现，只是引用的插件和使用的控件比较多，理清各个层次的引用关系略复杂。此处不再赘述。&lt;/p&gt;
&lt;p&gt;现在来分析第3点的算法。在用户添加一个航点(高压输电塔)的时候，我们能获取的数据只有塔的经度、纬度、海拔，那怎么计算出它周围对应的12个航点呢？这个问题的关键是要求出两个塔之间的电线的走向。我的思路是，地球的经纬度相当于地面的坐标轴，考虑到我们的监测范围是一个面积很小的范围，而且电线塔与电线塔之间的距离也不大，我们可以把地图的经纬度近似作为一个直角坐标系，经度作为X轴，纬度作为Y轴，于是地图上的每个航点就抽象成了一个包含坐标的点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-05-28-%E9%A1%B9%E7%9B%AE-%E6%8C%91%E6%88%98%E6%9D%AF%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%AF%BE%E5%A4%96%E5%AD%A6%E6%9C%AF%E7%A7%91%E6%8A%80%E4%BD%9C%E5%93%81%E7%AB%9E%E8%B5%9B/%E5%9D%90%E6%A0%87.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;有了这个坐标，我们就可以把本航点和上一个航点连起来，而这条线段就是两个电线塔之间的电线。因为有了坐标轴，于是现在我们可以把电线塔的“走向”进行量化——斜率。这样，每两个塔之间的电线走向就可以轻易得到：&lt;/p&gt;
&lt;p&gt;$$k=\frac{y_0-y_1}{x_0-x_1}$$&lt;/p&gt;
&lt;p&gt;有了斜率之后，我们就可以给每个塔的周围的对应的12个监测航点进行定位了，如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-05-28-%E9%A1%B9%E7%9B%AE-%E6%8C%91%E6%88%98%E6%9D%AF%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%AF%BE%E5%A4%96%E5%AD%A6%E6%9C%AF%E7%A7%91%E6%8A%80%E4%BD%9C%E5%93%81%E7%AB%9E%E8%B5%9B/%E5%9D%90%E6%A0%872.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(说明：图中的 $(x&amp;rsquo;,y&amp;rsquo;)$ 是前一个航点，$(x_0,y_0)$ 是要计算的本行航点。图中下方的1、2、3、4分别就是四个位置的监测航点的坐标位置了。而每个位置均有3个监测航点，只是高度不同而已，可以通过代码进行设置)&lt;/p&gt;
&lt;p&gt;核心代码:&lt;/p&gt;
&lt;p&gt;{% codeblock lang:csharp %}
//添加一个塔，自动计算出12个航点
private void AddTower_Click(object sender, EventArgs e)
{
double towerlat = Convert.ToDouble(TXT_towerlat.Text.ToString().Trim());
double towerlong = Convert.ToDouble(TXT_towerlng.Text.ToString().Trim());&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//先往地图中加入塔点
AddWPToMap(towerlat, towerlong, 0);

//根据塔点自动生成的航点

//上一个塔点
PointLatLngAlt wp_last = pointlist[pointlist.Count - 2];

//该塔点
PointLatLngAlt wp_this = pointlist[pointlist.Count - 1];

//通过两点的斜率k求夹角a(PI)
double k = (wp_last.Lat - wp_this.Lat) / (wp_last.Lng - wp_this.Lng);
double a = Math.Atan(k);

//监测半径r
double r = 0.0001;

//添加4*4=16个监视航点

//第一角度4个航点
double Lat1 = (float)(wp_this.Lat + r * Math.Cos(0.25 * Math.PI - a));
double Lng1 = (float)(wp_this.Lng - r * Math.Sin(0.25 * Math.PI - a));
int Alt1 = 100;
AddWPToMap(Lat1, Lng1, Alt1);
AddWPToMap(Lat1, Lng1, Alt1 - 5);
AddWPToMap(Lat1, Lng1, Alt1 - 8);
AddWPToMap(Lat1, Lng1, Alt1);

//第二角度4个航点
double Lat2 = (float)(wp_this.Lat + r * Math.Sin(0.25 * Math.PI - a));
double Lng2 = (float)(wp_this.Lng + r * Math.Cos(0.25 * Math.PI - a));
int Alt2 = 100;
AddWPToMap(Lat2, Lng2, Alt2);
AddWPToMap(Lat2, Lng2, Alt2 - 5);
AddWPToMap(Lat2, Lng2, Alt2 - 8);
AddWPToMap(Lat2, Lng2, Alt2);

//第三角度4个航点
double Lat3 = (float)(wp_this.Lat - r * Math.Cos(0.25 * Math.PI - a));
double Lng3 = (float)(wp_this.Lng + r * Math.Sin(0.25 * Math.PI - a));
int Alt3 = 100;
AddWPToMap(Lat3, Lng3, Alt3);
AddWPToMap(Lat3, Lng3, Alt3 - 5);
AddWPToMap(Lat3, Lng3, Alt3 - 8);
AddWPToMap(Lat3, Lng3, Alt3);

//第四角度3个航点
double Lat4 = (float)(wp_this.Lat - r * Math.Sin(0.25 * Math.PI - a));
double Lng4 = (float)(wp_this.Lng - r * Math.Cos(0.25 * Math.PI - a));
int Alt4 = 100;
AddWPToMap(Lat4, Lng4, Alt4);
AddWPToMap(Lat4, Lng4, Alt4 - 5);
AddWPToMap(Lat4, Lng4, Alt4 - 8);
AddWPToMap(Lat4, Lng4, Alt4);

//再次加入该塔点，让飞机飞回塔顶
AddWPToMap(towerlat, towerlong, 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
{% endcodeblock %}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>美国大学生数学建模竞赛</title>
      <link>https://utopizza.github.io/posts/projects/2015-04-20-%E9%A1%B9%E7%9B%AE-%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B/</link>
      <pubDate>Wed, 20 May 2015 22:35:40 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/projects/2015-04-20-%E9%A1%B9%E7%9B%AE-%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B/</guid>
      <description>&lt;p&gt;一、简介&lt;/p&gt;
&lt;p&gt;我们参加的是2015年2月6日到10日的美赛，组队的时候已经接近学期末。而且我们三人中，只有一人参加过国赛，没有拿奖。其余两人包括我是完全没有比赛经验的。我们三人正式开始准备的时候，已经是2015年1月中下旬了吧，具体记得不太清楚了，貌似是大三上学期结束，已经放寒假了我们才有时间开始准备比赛。相比他们那些参加过各种培训的校队选手，有的甚至整个大二暑假都在学校做模拟训练，我们这样的业余队伍几乎是没有优势的。&lt;/p&gt;
&lt;p&gt;在放假之后比赛之前，我们做了一些小训练，拿了往年的题目做，有：连环杀人案侦破、葡萄酒评价、树叶分类、碎纸片复原等等。因为时间太紧，只有通过直接上手实战来快速学习。我觉得这样的学习方式有好的地方也有不好的地方，好的地方在于效率高速度快能够体验成就感，形成良好的反馈机制，而不好的地方在于这样学习不系统不全面，知识体系松散，难以打好扎实的基础，或者说“功底”。&lt;/p&gt;
&lt;p&gt;6日早上八点拿到赛题，我们讨论一小会儿，就确定了选择 MCM 的 A 题，对抗埃博拉病毒：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PROBLEM A: Eradicating Ebola
The world medical association has announced that their new medication could stop Ebola and cure patients whose disease is not advanced. Build a realistic, sensible, and useful model that considers not only the spread of the disease, the quantity of the medicine needed, possible feasible delivery systems, locations of delivery, speed of manufacturing of the vaccine or drug, but also any other critical factors your team considers necessary as part of the model to optimize the eradication of Ebola, or at least its current strain. In addition to your modeling approach for the contest, prepare a 1-2 page non-technical letter for the world medical association to use in their announcement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二、思路&lt;/p&gt;
&lt;p&gt;确定题目后，经过短暂的讨论，主题思路很快就清晰了：如何“对抗”埃博拉病毒？自然就是通过隔离病人、控制疫情、注射药物。具体怎么用数学模型去做？显然分三部：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立埃博拉病毒的传播模型。有了这个模型，我们就可以预测病毒传播的发展情况，根据它的发展规律定制相应的疫情控制措施，这是整篇论文根基。&lt;/li&gt;
&lt;li&gt;有了传播模型后，用该模型来预测至少需要多少的药物才能把疫情控制在可控的范围内。&lt;/li&gt;
&lt;li&gt;确定好疫苗需求量后，最后一个问题就是，如何建立生产、运输、分配疫苗的整个体系？（很自然会联想到线性规划问题）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、Modeling&lt;/p&gt;
&lt;p&gt;1、建立埃博拉传播模型。我们先用传统的 S.I.R 模型对实际数据进行拟合，发现效果很差，因为这个模型是一个不考虑外界条件干扰的模型，例如政府的介入、世界卫生组织的先进医疗器械援助等，而且每种病毒由于感染期、潜伏期、患病期、致死期的时间都不一样。因此我们放弃了这个理想化的传播模型，而采用元胞自动机模型。我们通过调整参数来拟合实际数据。模型按实际情况分为两部分，一部分是传染病爆发后紧接着的一段时间内，政府和医疗机构还未采取有效的遏制措施，患病人数接近于自然增长；另一部分则是较长的一段时间后，政府和医疗机构采取了较为有效的防范和隔离措施，患病人数得到控制，在波动中减少。模型测试的效果比较好，因为我们在元胞自动机模型里面考虑了很多有实际意义的参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-04-20-%E9%A1%B9%E7%9B%AE-%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B/%E4%BC%A0%E6%92%AD%E6%A8%A1%E5%9E%8B.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-04-20-%E9%A1%B9%E7%9B%AE-%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B/%E5%85%83%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、预测药物需求量。分别计算三个疫情国家 Guinea、Liberia 和 Sierra Leone 的药物需求量。药量的计算为当前药物的需求量与半年内增加患者的药物需求量和药物的储存量三部分之和。其中储存量的多少根据每周增加患者人数最多的一段时间的病人总量来确定，也就是考虑最严重的情况。对于疫苗量的计算我们首先估计一个合适免疫覆盖率，用模型一的改进模型中每人每天传染人数的改变（蒙特卡罗算法加以实现）来表示免疫覆盖率，然后根据患病者人数的变化来确定合适的免疫覆盖率。最后用相关公式计算出疫苗的需求量。&lt;/p&gt;
&lt;p&gt;3、确定具体的药品和疫苗的配送方案。模型分为两部分，一部分为国际之间药物的配送，一部分为国内药物的配送。我们首先根据相关设施的发展水平给定四个出产国的产量。通过药物和疫苗总量的限制，不同国家的总成本应该相近等条件对其进行规划，从而得到具体的配送方案。国内的配送首先将发病地点用模糊-C聚类分析的方法分类，然后在每一类中产生最小生成树，也就是总代价最少。不同的类用不同的车运送药品，同一类中的地点用同一辆车按照最小生成树的路线运送。&lt;/p&gt;
&lt;p&gt;(1). 国际运送：用线性规划确定从药物生产国到每个灾情国的配给量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-04-20-%E9%A1%B9%E7%9B%AE-%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B/%E5%9B%BD%E9%99%85%E8%BF%90%E9%80%81.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-04-20-%E9%A1%B9%E7%9B%AE-%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B/%E5%9B%BD%E9%99%85%E8%BF%90%E9%80%812.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;国内运送（以 Sierra Leone）为例：先对灾点进行聚类，再使用最小生成树找出投递药物的最小总路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-04-20-%E9%A1%B9%E7%9B%AE-%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B/%E6%A8%A1%E7%B3%8A%E8%81%9A%E7%B1%BB.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-04-20-%E9%A1%B9%E7%9B%AE-%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;四、总结（关于编程方面）&lt;/p&gt;
&lt;p&gt;1、工具：熟练使用matlab，稍微熟悉使用spss等等其他工具。没必要花太多时间在研究工具上面，熟练使用matlab基本就足够。&lt;/p&gt;
&lt;p&gt;2、算法：最好有一定的编程功底，了解面向对象和面向过程编程，这样写起程序来会快很多。一些基本的数学方法，例如线性规划、插值、拟合等等要在比赛之前能够自己写出来。进一步，有时间的话，最好能拓展一下一些智能算法，例如模拟退火、遗传算法、蒙特卡洛法、神经网络、自动元胞机等等。因为基本的数学模型大家都会，所以想要让自己的论文出彩，就要用一些一般人想不到的或者实现不了的方法，因为美赛要求的不是结果的准确性，而是解法的新颖性，思路的发散性。&lt;/p&gt;
&lt;p&gt;3、技巧：编程说难也不难，说不难也难。如果你不是那种天才型的编程玩家，那就唯有多练，不断地动手实践，调试，改错，总结，一步步提高自己，这确实是一个很费时间和精力的学习任务，以我个人来看，看一个算法10遍，不如自己动手写一遍的印象来得深刻。&lt;/p&gt;
&lt;p&gt;4、最后谈一点感受，虽然参加美赛时间仓促，但是我们三人都拿出了最大的努力，比赛这四天，基本每天都只睡不到3个小时。真的很累，比赛结束交了论文的那天，在坐火车回家的路上，站着都能睡着，整个人都感觉有点飘忽或者说精神有点恍惚。但是，那种和朋友们一起拼命为同一个目标奋斗的感觉真的很棒，很开心，也觉得很充实。每每回想起那些日子，我都认为，那就是我本科阶段，最珍贵最开心的时光了。至于论文，第一部分使用了元胞自动机模型，知道这个东西的人应该挺少吧，可以算是论文的一大亮点，对美赛的风格来说。第二部分的预测药物量不太好，模型有点过于简单。第三部分的药物运送分为国际和国内两部分处理，考虑了成本，时间，地理各种因素，我觉得也是一个可以加分的部分。最后拿了一等奖，遗憾也不是很大了，毕竟我们准备的时间真的太少，又没什么经验，我们只是临时组成的队伍。现在两位队友都走上了各自想走的路，但我仍然希望，日后还有一起努力奋斗的机会。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>全国高校物联网应用创新大赛</title>
      <link>https://utopizza.github.io/posts/projects/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/</link>
      <pubDate>Tue, 20 Jan 2015 22:14:40 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/projects/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/</guid>
      <description>&lt;p&gt;一、简介&lt;/p&gt;
&lt;p&gt;参赛作品是“基于物联网的车辆事故智能报警系统”，它对车辆运行情况进行实时监控。一旦发生车辆事故导致安全气囊打开时，系统便会检测到这一状态，并立即获取事故的定位信息、人员信息并进行自动报警。当交警服务中心接收到报警电话和相关信息后，就会立即通知离事故发生地最近的医院前往救援。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/%E7%B3%BB%E7%BB%9F%E6%B5%81%E7%A8%8B%E5%9B%BE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/%E7%B3%BB%E7%BB%9F%E6%B5%81%E7%A8%8B%E5%9B%BE2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;系统工作流程：&lt;/p&gt;
&lt;p&gt;1、 当车载客户端监测到安全气囊打开后，它先从 OBD 系统中读取出车辆故障码等车辆信息，记录到单片机内存中，然后启动蓝牙模块，把车辆信息发送到手机客户端；&lt;/p&gt;
&lt;p&gt;2、当手机客户端收到车辆故障码后，
(1)、启动第一重自动报警：从手机内存卡读出驾车人员信息，启动 GPS 对车辆进行定位读出车辆经纬度，然后把车辆信息、人员信息、定位信息一并通过 GPRS 发送到交警信息中心服务器；
(2)、启动第二重自动报警：调用手机的拨号功能，自动拨打 110 报警电话；
(3)、当手机报警功能被触发后， 手机开始倒计时 15 秒。用户可以在 15 秒内点击取消按钮中断报警， 否则在计时结束后执行报警任务。&lt;/p&gt;
&lt;p&gt;3、当交警信息中心服务器收到手机发送过来的报警信息后，会马上把报警信息显示在屏幕上，并响起警铃，通知交警人员，前往事故现在进行处理。&lt;/p&gt;
&lt;p&gt;二、实现&lt;/p&gt;
&lt;p&gt;我负责开发的部分是 Server 端的“交警信息中心”网站，和 Client 端的“EmergencyCall”安卓 App。&lt;/p&gt;
&lt;p&gt;1、Server 端&lt;/p&gt;
&lt;p&gt;基于 .NET 的 WebService 框架，采用 Model -&amp;gt; DAL -&amp;gt; BLL 三层架构。Server 端的主要功能是：提供 WebService 方法给安卓 客户端调用，接收其发送过来的数据，经过处理后插入数据库，最后显示到网页上。&lt;/p&gt;
&lt;p&gt;Server 端主要的两个文件是：网站主页 TICSystemDefault.aspx 和 WebService 接口 TICSystemWebService.asmx。网站主页每3秒自动刷新一次，把所有数据即时地显示到网页上。WebService 接口负责和安卓端数据交互。其他文件分别实现解析Json字符串并转化成Model、操作数据库、绑定数据到网页等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/Server%E7%AB%AF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中提供给安卓端调用的 WebService 方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// webservice方法
[WebMethod]
public int AddAccidentInfo(string JasonAccidentInfo)
{
    AccidentInfoModel AccidentInfo = ModelJsonChange&amp;lt;AccidentInfoModel&amp;gt;.JsonToModel(JasonAccidentInfo);
    return accidentDal.AddAccidentInfo(AccidentInfo);
}

//Helper类，实现Json和Model的互转
public class ModelJsonChange&amp;lt;T&amp;gt;
{
    //Model转换为Json
    public static string ModelToJson(T model)
    {
        JavaScriptSerializer js = new JavaScriptSerializer();
        return js.Serialize(model);
    }

    //Json转换为Model
    public static T JsonToModel(string json)
    {
        JavaScriptSerializer js = new JavaScriptSerializer();
        return js.Deserialize&amp;lt;T&amp;gt;(json);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、Client 端&lt;/p&gt;
&lt;p&gt;Client 端的安卓 App 名为“EmergencyCall”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/MainActivity.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中分为五大功能模块：&lt;/p&gt;
&lt;p&gt;(1). SaveActivity：保存、修改用户的个人信息。我使用了SharedPreferences来保存这些数据。SharedPreferences是Android平台上一个轻量级的存储类，用来保存应用的一些常用配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/SaveActivity.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;关键代码（为节省篇幅，以下均省略 OnCreate、setContentView、addActivity、findViewById 等基本的常用代码，只显示实现某功能的关键代码）：&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
// 声明
private EditText EditText_userName;// 姓名
private EditText EditText_userPhone;// 电话
private EditText EditText_userCar;// 车牌
private SharedPreferences sharedPrefrences;
private Editor editor;
private static final String FILENAME = &amp;ldquo;filename&amp;rdquo;;// 要存储的文件名&lt;/p&gt;
&lt;p&gt;// 进入页面时，将已经保存在文件中的内容取出，显示到三个文本框中
sharedPrefrences = this.getSharedPreferences(FILENAME, MODE_PRIVATE);
EditText_userName.setText(sharedPrefrences.getString(&amp;ldquo;userName&amp;rdquo;, &amp;ldquo;&amp;quot;));
EditText_userPhone.setText(sharedPrefrences.getString(&amp;ldquo;userPhone&amp;rdquo;, &amp;ldquo;&amp;quot;));
EditText_userCar.setText(sharedPrefrences.getString(&amp;ldquo;userCar&amp;rdquo;, &amp;ldquo;&amp;quot;));&lt;/p&gt;
&lt;p&gt;// 保存按钮
savebutton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
editor = getSharedPreferences(FILENAME, MODE_PRIVATE).edit();
editor.putString(&amp;ldquo;userName&amp;rdquo;, EditText_userName.getText().toString());
editor.putString(&amp;ldquo;userPhone&amp;rdquo;, EditText_userPhone.getText().toString());
editor.putString(&amp;ldquo;userCar&amp;rdquo;, EditText_userCar.getText().toString());
editor.commit();
Intent intent = new Intent();
intent.setClass(SaveActivity.this, MainActivity.class);
startActivity(intent);
}
});
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;(2). BlueToothActivity：蓝牙连接，使手机通过蓝牙与车上的硬件模块通讯。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/BlueToothActivity.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;关键代码：&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
// 通过蓝牙连接硬件
BluetoothAdapter btAdapt = BluetoothAdapter.getDefaultAdapter();
BluetoothDevice btDev = btAdapt.getRemoteDevice(address);// &amp;ldquo;00:11:00:18:05:45&amp;rdquo;
Method m = btDev.getClass().getMethod(&amp;ldquo;createRfcommSocket&amp;rdquo;, new Class[] { int.class });
BluetoothSocket btSocket = (BluetoothSocket) m.invoke(btDev, Integer.valueOf(1));
try {
btSocket.connect();
Log.e(TAG, &amp;quot; BT connection established, data transfer link open.&amp;quot;);
Toast.makeText(testBlueTooth.this, &amp;ldquo;连接成功&amp;rdquo;, Toast.LENGTH_SHORT).show();&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 进入护航界面
Intent intent = new Intent();
intent.setClass(testBlueTooth.this, DisplayActivity.class);
startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;} catch (IOException e) {
Log.e(TAG, &amp;quot; Connection failed.&amp;quot;, e);
setTitle(&amp;ldquo;连接失败..&amp;quot;);
}
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;(3). DisplayActivity：连接成功后，手机将一直监控车载硬件模块的状态，接收硬件模块发送过来的状态码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/DisplayActivity.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;关键代码：&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
// 监听车载硬件模块发送过来的消息
ConnectedThread manageThread = new ConnectedThread();
Handler mHandler = new MyHandler();
manageThread.Start();
public ConnectedThread() {
isRecording = false;
this.wait = 50;
thread = new Thread(new ReadRunnable());
}
private class ReadRunnable implements Runnable {
public void run() {
while (isRecording) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        //从蓝牙端口获取接收到的消息
        try {
            inStream = testBlueTooth.btSocket.getInputStream();
        } catch (IOException e) {}

        // 处理获取的消息，设置长度为20
        int length = 20;
        byte[] temp = new byte[length];
        if (inStream != null) {
            try {
                int len = inStream.read(temp, 0, length - 1);
                Log.e(&amp;quot;available&amp;quot;, String.valueOf(len));
                if (len &amp;gt; 0) {
                    byte[] btBuf = new byte[len];
                    System.arraycopy(temp, 0, btBuf, 0, btBuf.length);
                    String readStr1 = new String(btBuf, encodeType);
                    // 如果收到非空数据，说明事故发生，发送“01”给mHandler
                    mHandler.obtainMessage(01, len, -1, readStr1).sendToTarget();
                }
                Thread.sleep(wait);
            } catch (Exception e) {
                // 否则发送“00”，表示没有事故发生(这样好像逻辑有点问题)
                mHandler.sendEmptyMessage(00);
            }
        }

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;// 接收到状态码后的后续处理
private class MyHandler extends Handler {
@Override
public void dispatchMessage(Message msg) {
String info = (String) msg.obj;
if (StopFlag) {
if (info.equals(&amp;ldquo;01&amp;rdquo;)) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            StopFlag=false;
			
            // 报警
            Intent intent = new Intent();
            intent.setClass(DisplayActivity.this, PostActivity.class);
            startActivity(intent);
            // finish();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;(4). PostActivity：进入事故报警流程，获取用户的个人信息、地理位置信息和当前时间，然后通过 GPRS 发送到交警信息中心网站。发送的数据格式是 Json。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/PostActivity.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体工作流程：启动线程 time_runnable 计时 -&amp;gt; 计时结束，发送报警信息给 time_handler -&amp;gt; time_handler 转发报警信息给 http_handler -&amp;gt; http_handler 启动线程 http_runnable 执行 http 报警。HttpPost 用到了外部包 ksoap2 。&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import org.json.JSONException;
import org.json.JSONObject;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;&lt;/p&gt;
&lt;p&gt;// 获取当前时间
public String GetNowDateTime() {
SimpleDateFormat sDateFormat = new SimpleDateFormat(&amp;ldquo;yyyy-MM-dd HH:mm:ss&amp;rdquo;);
String date = sDateFormat.format(new java.util.Date());
return date;
}&lt;/p&gt;
&lt;p&gt;// 获取地理位置
public String GetLocation() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
Criteria criteria = new Criteria();
criteria.setAccuracy(Criteria.ACCURACY_COARSE);
criteria.setAltitudeRequired(false);
criteria.setBearingRequired(false);
criteria.setCostAllowed(true);
criteria.setPowerRequirement(Criteria.POWER_HIGH);
criteria.setSpeedRequired(false);

String currentProvider = locationManager.getBestProvider(criteria, true);
Location currentLocation = locationManager.getLastKnownLocation(currentProvider);
if (currentLocation == null) {
    locationManager.requestLocationUpdates(currentProvider, 0, 0, locationListener);
}
while (true) {
    currentLocation = locationManager.getLastKnownLocation(currentProvider);
    if (currentLocation != null) {
        Log.d(&amp;quot;Location&amp;quot;, &amp;quot;Latitude: &amp;quot; + currentLocation.getLatitude());
        Log.d(&amp;quot;Location&amp;quot;, &amp;quot;Longitude: &amp;quot; + currentLocation.getLongitude());
        break;
    } else {
        Log.d(&amp;quot;Location&amp;quot;, &amp;quot;Latitude: &amp;quot; + 0);
        Log.d(&amp;quot;Location&amp;quot;, &amp;quot;Longitude: &amp;quot; + 0);
    }
    try {
        Thread.sleep(1000);
    } catch (InterruptedException e) {
        Log.e(&amp;quot;Location&amp;quot;, e.getMessage());
    }
}

String userLocation = &amp;quot;经度&amp;quot; + currentLocation.getLongitude() + &amp;quot;；纬度&amp;quot; + currentLocation.getLatitude();
return userLocation;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
// time_runnable线程：计时15秒，5秒后给time_handler发送信息
Runnable time_runnable = new Runnable() {
@Override
public void run() {
try {
Thread.sleep(15000);
} catch (InterruptedException e) {
e.printStackTrace();
}
Message message = new Message();
time_handler.sendMessage(message);
}
};&lt;/p&gt;
&lt;p&gt;// http_runnable线程：发送Http报警
Runnable http_runnable = new Runnable() {
@Override
public void run() {
String AccidentTime = GetNowDateTime();
String AccidentPlace = GetLocation();
String PersonName = sharedPrefrences.getString(&amp;ldquo;userName&amp;rdquo;, &amp;ldquo;&amp;quot;);
String PersonPhone = sharedPrefrences.getString(&amp;ldquo;userPhone&amp;rdquo;, &amp;ldquo;&amp;quot;);
String CarNumber = sharedPrefrences.getString(&amp;ldquo;userCar&amp;rdquo;, &amp;ldquo;&amp;quot;);
//发送
HttpPost(AccidentTime, AccidentPlace, PersonName, PersonPhone, CarNumber);
}
};&lt;/p&gt;
&lt;p&gt;// 启动time_runnable（在OnCreate中）
new Thread(time_runnable).start();&lt;/p&gt;
&lt;p&gt;// 计时结束，给http_handler转发报警信息
time_handler = new Handler() {
@Override
public void handleMessage(Message msg) {
if (IsPost) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        IsPost = false;
        time_runnable = null;
		
        // 转发报警信息给http_handler
        Message message = new Message();
        http_handler.sendMessage(message);

        // 跳转到拨号报警页面
        Intent intent = new Intent();
        intent.setClass(PostActivity.this, PhoneActivity.class);
        startActivity(intent);
        //finish();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;// 启动线程http_runnable，执行http报警
Handler http_handler = new Handler() {
@Override
public void handleMessage(Message msg) {
super.handleMessage(msg);
new Thread(http_runnable).start();
}
};
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;(5). PhoneActivity：同样倒计时15秒，计时结束后自动拨号报警。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/PhoneActivity.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;关键代码：&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
// 启动子线程开始计时
new Thread(time_runnable).start();&lt;/p&gt;
&lt;p&gt;// 计时结束，进行拨号报警
time_handler = new Handler() {
@Override
public void handleMessage(Message msg) {
if (IsPhone) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        IsPhone = false;
        time_runnable = null;
		
        // 拨打报警电话
        Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse(&amp;quot;tel:110&amp;quot;));
        PhoneActivity.this.startActivity(intent);
		
        MyApplication.getInstance().exit();
        //finish();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;};
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;3、车载硬件模块&lt;/p&gt;
&lt;p&gt;这部分是做硬件的同学实现的，安装在车辆的OBD接口上面，不断地给车辆发送查询命令，查询安全气囊的状态码，如果发现安全气囊打开了，那么断定发生了严重事故，立刻通过蓝牙模块发送报警信息给用户的手机，以启动后续的自动报警流程。由于实验条件和时间的限制，目前只实现了简单版。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://utopizza.github.io/2015-01-20-%E9%A1%B9%E7%9B%AE-%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/%E8%BD%A6%E8%BD%BD%E7%A1%AC%E4%BB%B6%E6%A8%A1%E5%9D%97.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>技术笔记(9)-MySql语法小结</title>
      <link>https://utopizza.github.io/posts/technique/2014-12-28-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B09/</link>
      <pubDate>Sun, 28 Dec 2014 18:44:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/technique/2014-12-28-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B09/</guid>
      <description>&lt;p&gt;一、数据库&lt;/p&gt;
&lt;p&gt;1.数据库的选定&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;use testDB;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.数据库的创建（后面两个是设置字符集和排序方式）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create database(if not exist) testDB (character set charset)(collate collation);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.数据库的删除：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;drop database testDB;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.数据库的更变：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;alter database testDB(character set charset)(collate collation);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二、数据表&lt;/p&gt;
&lt;p&gt;1.存储引擎（查看存储引擎：show engines）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ARCHIVE——插入&lt;/li&gt;
&lt;li&gt;BLACKHOLE——删除&lt;/li&gt;
&lt;li&gt;EXAMPLE——示例&lt;/li&gt;
&lt;li&gt;Falcon——事务&lt;/li&gt;
&lt;li&gt;FEDERATED——访问远程数据&lt;/li&gt;
&lt;li&gt;InnoDB——外键&lt;/li&gt;
&lt;li&gt;MEMORY——内存数据表&lt;/li&gt;
&lt;li&gt;MERGE——联合&lt;/li&gt;
&lt;li&gt;MyISAM——默认&lt;/li&gt;
&lt;li&gt;NDB——MySQL&lt;/li&gt;
&lt;li&gt;Cluster专用&lt;/li&gt;
&lt;li&gt;CSV——使用逗号分隔数据项&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.数据表的创建：&lt;/p&gt;
&lt;p&gt;(1).数据表选项（选择存储引擎，否则默认为MyISAM）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table testTB( ... ) engine=InnoDB;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2).创建全新的数据表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table if not exist testTB( ... ) engine=InnoDB;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(3).创建临时数据表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create temporary table testTB( ... )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(4).使用查询结果或者其它数据表创建数据表：&lt;/p&gt;
&lt;p&gt;i.如果要确保新表和原表的数据列的属性、索引都完全一致：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table testTB like exampleTB;
insert into testTB select * from exampleTB;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ii.如果只要保证列名和数据一致，不需复制数据列的属性和索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table testTB select * from exampleTB;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;iii.为了弥补上一点，可以使用cast()函数强制使用特定的属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table ... select cast(... as int) as ... , cast(... as char) as ... ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(5).使用MERGE数据表，设置插入方式（要联合的表必须是结构完全一致的MyISAM数据表）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table test_4( ... )  engine=MERGE union=(test_1,test_2,test_3)  insert_method=last;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(6).使用分区数据表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table testTB
(
   id int not null,
   name varchar(20) null
)
partition by range(id)
(
   partition p1 values less than 10,
   partition p2 values less than 20,
   partition p3 values less than 30,
   partition p4 values less than 40,
   partition p5 values less than MAXVALUE,
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(7).使用federated数据表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table federated_testDB( ... )  
engine=FEDERATED  
connection=&amp;#39;mysql://wys:79135QW@hostname/testDB/testTB&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了避免暴露连接字符串中的信息，可以：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create server testDB_server
foreign data wrapper mysql
options
(
  user &amp;#39;wys&amp;#39;
  password &amp;#39;79135qw&amp;#39;
  host &amp;#39;...&amp;#39;
  database &amp;#39;testDB&amp;#39;
);

create table federated_testTB( ... ) 
engine=FEDERATED
connection=&amp;#39;testDB_server/testTB&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.数据表的删除：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;drop table if exist testTB;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.数据表的索引：&lt;/p&gt;
&lt;p&gt;(1).创建索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 在create内部
create table testTB( 
id int auto_increment primary key not null,
...
index index_name(id),...auto 
);

// 或者在create外部
create table testTB(...);
alter table testTB add index_name(id);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2).删除索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;drop index index_name on testTB; 
//或者 
alter table testTB drop index index_name;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.改变数据表的结构：&lt;/p&gt;
&lt;p&gt;(1).改变数据列的类型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;alter table testTB modify id varchar(100); 
// 或者 
alter table testTB change id id_newname varchar(100);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2).改变存储引擎：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;alter table testTB engine=InnoDB;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(3).重新命名数据表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;alter table testTB RENAME TO new_testTB;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(4).把一个数据表从一个数据库移动到另一个数据库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;rename table testDB.testTB to testDB_2.testDB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三、数据检索&lt;/p&gt;
&lt;p&gt;1.获取数据库的元数据（各种show）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;show database;
show tables from ...;
show colums from ... like ...;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.利用联结操作对多表进行检索：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select ... from ...
inner/left/right/cross join ... on ...=...
where ...
group by ...
order by ...
having ...
limit ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.使用子查询对多表进行检索：&lt;/p&gt;
&lt;p&gt;(1).in和not in：是否存在或者不存在子查询中
(2).all和any和some：all所有；any任何一个；some和any等价
(3).exist和not exist：判断子查询是否有结果集&lt;/p&gt;
&lt;p&gt;4.使用union对多表进行检索：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;(select ... from ...) 
union 
(select ... from ...) 
union 
(select ... from ...) 
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.使用视图（可用视图完成一些必要的数学运算）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;ctreate view testView as select ... from ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;6.涉及多个数据表的删除和更新操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;//删除表t1中id与表t2匹配的行
delete t1 from t1 inner join t2 on t1.id=t2.id;

// 删除表t1中id不与表t2匹配的行
delete t1 from t1 left join t2 on t1.id=t2.id where t2.id is null;

//同时删除表t1和表t2中id匹配的行
delete t1,t2 from t1 inner join t2 on t1.id=t2.id;

// 或者使用using
delete from t1 using t1 inner join t2 on t1.id=t2.id;
delete from t1 using t1 left join t2 on t1.id=t2.id where t2.id is null;
delete from t1,t2 using t1 inner join t2 on t1.id=t2.id;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;四、事务处理（需要使用的存储引擎是InnoDB或者Falcon）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;start transaction; // 或者set autocommit=0
insert into ...
delete from ...
commit; // set autocommit=1; 对应于上面的括号内的语句
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;1.事务的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a.原子性，事务内容要么全部成功，要么全部失败&lt;/li&gt;
&lt;li&gt;b.隔离性，事务之间是隔离的，比如在某事务向数据库插入一些数据的时候，如果事务还没结束，即使某些数据已经插入去了，但是这些数据对其他所有用户是不可见的，直到事务完成提交&lt;/li&gt;
&lt;li&gt;c.稳定性，数据在事务开始和结束后都是稳定的状态&lt;/li&gt;
&lt;li&gt;d.可靠性，如果事务执行成功，它的影响将被永久保存到数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.备注：在默认的情况下，MySQL从自动提交（autocommit）模式运行，这种模式会在每条语句执行完毕后把它当做一个事务进行提交，如果使用了 &lt;code&gt;set autocommit=0&lt;/code&gt; 语句后，这个自动提交将被禁止，这样的结果是，除非遇到一些显式提交语句（如：commit，rollback&amp;hellip;），或者隐式提交前一个事务，然后在本语句重新开始事务的DLL语句（如：alter table，create index，drop database，drop index&amp;hellip;），系统会认为接下来的所有的语句都属于一个事务&lt;/p&gt;
&lt;p&gt;3.使用事务保存点：使事务部分回滚&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table testTable(id int) engine=InnoDB;
start transaction;
insert into testTable(id) values(1);
SAVEPOINT my_savepoint;
insert into testTable(id) values(2);
rollback to SAVEPOINT my_savepoint;
insert into testTable(id) values(3);
commit;
select * from testTable;
// 此时表中的数据只有1和3，因为2被rollback了
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.事务的隔离性：InnoDB存储引擎提供4种隔离级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read uncommited——允许某个事务看到其他事务尚未提交的数据改动 read&lt;/li&gt;
&lt;li&gt;commited——只允许某个事务看到其他事务已经提交的数据改动 repeatable&lt;/li&gt;
&lt;li&gt;read（默认级别）——即使在本事务进行中，有其他事务在同时修改了数据行，本事务每次执行同一个select的结果不变&lt;/li&gt;
&lt;li&gt;serializable——更彻底的隔离，如果某个事务正在读取某些数据行，那么在它完成之前，其他事务对这些数据行不可改动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改级别：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;set global transaction isolation level ...;（全局有效）
set sessoin transaction isolation level ...;（本次会话有效）
set transaction isolation level ...;（下一次事务有效）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.事务问题的非事务解决方案：&lt;/p&gt;
&lt;p&gt;a.明确的锁定数据表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;LOCK tables testTable write;
select ... from ...;
update ... set ...;
UNLOCK tables;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;b.使用相对更新操作，不使用绝对更新操作（即在一个语句中，使用当前值进行差额修改的方法，而不是直接设置为一个绝对值）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;update ... set ... = ... + ... where ... 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;五、外键的创建和使用&lt;/p&gt;
&lt;p&gt;1.语法&lt;/p&gt;
&lt;p&gt;2.InnoDB存储引擎目前只能识别和支持以下外键定义语法&lt;/p&gt;
&lt;p&gt;1).constraint：用来给外键约束起一个名字
2).foreign key：列出子表的被索引数据列
3).references：列出父表和父表中的被索引数据列
4).on delete：用来设定父表里的数据行被删除时，子表中对应的数据应该发生什么事件，其子句可选择如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on delete (no action) restrict：拒绝在父表里删除那些与子表仍有数据关联的数据行（默认）&lt;/li&gt;
&lt;li&gt;on delete cascade：删除父表数据行时，子表里相关的数据行也被删除&lt;/li&gt;
&lt;li&gt;on delete set null：删除父表数据行时，子表里相关的数据行的索引列将被设置为NULL（隐含着外键不能定义为主键的意思，因为主键不能为NULL）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5).on update：同delete&lt;/p&gt;
&lt;p&gt;六、使用FULLTEXT索引&lt;/p&gt;
&lt;p&gt;七、存储过程&lt;/p&gt;
&lt;p&gt;1.复合语句和语句分隔符：使用复合语句的时候，必须先使用delimiter命令把mysql程序的语句分隔符重定义为另一个字符或字符串，它必须是存储例程里没有定义过的。在定义完了存储过程之后，切记把mysql程序的语句终止符重定义为分号&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;delimiter $（或者字符串asdfs，erer等等都可以）
create procedure test()
begin
   select ... from ... ;
end $
delimiter ;
call test();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.存储函数（只能有一个返回值）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;delimiter $
create function test_function(id int)
returns int
reads sql data
begin
    return (select ... from ... where ...=id);
end $
delimiter ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.存储过程（返回结果集）。和存储函数不同，存储过程不能使用在表达式里，只能通过CALL语句来调用：call test_procedure(100);
另外，存储函数不允许对调用本函数的语句正在读或写的数据表进行修改，存储过程没有这个限制，但是如果它们是从存储函数里被调用，就也需要遵守这个规则&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;delimiter $
create procedure test_procedure(id int)
begin
    select ... from ... where ...&amp;gt;=id;
end $
delimiter ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.存储过程的参数类型（在参数名前说明）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in参数：输入的参数（默认）&lt;/li&gt;
&lt;li&gt;out参数：输出的参数（需在过程中设置变量）&lt;/li&gt;
&lt;li&gt;inout参数：输入一个值然后再输入一个值（需在过程中设置变量）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;八、触发器（触发器是与特定数据表相关联的存储过程，当相应的数据表被insert，delete，或者update语句修改时就会自动执行）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;delimiter $
create trigger test_trigger before(after) insert on testTable
    for each row begin
        if NEW.col_name(OLD.col_name) then ... ;
        end if;
    end $
delimiter ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;九、事件（定时执行预设好的数据库操作，和SQL SERVER中的作业相当）&lt;/p&gt;
&lt;p&gt;1.启用（停止）事件调度器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;set event_scheduler=on（off）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;show variables like &amp;#39;event_scheduler&amp;#39; ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.创建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create event test_event  on schedule every 4 hour
do 
delete from testTable where ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.禁用或者开启某个事件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;alter event test_Event disable;
alter event test_Event enable;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;十、关于建表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;enum(&amp;lsquo;F&amp;rsquo;,&amp;lsquo;M&amp;rsquo;)：该字段只能是F或M的枚举类型&lt;/li&gt;
&lt;li&gt;unsigned：不允许出现负数&lt;/li&gt;
&lt;li&gt;auto_increment：自增&lt;/li&gt;
&lt;li&gt;primary key(student_id)：指定主键&lt;/li&gt;
&lt;li&gt;foreign key(score_id) references - - ScoreTable(score_id)：指定外键（一般外键是其他某个表的主键）&lt;/li&gt;
&lt;li&gt;index(student_id)：指定索引&lt;/li&gt;
&lt;li&gt;engine=InnoDB：选择数据引擎为InnoDB，该引擎允许外键的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;十一、语法：&lt;/p&gt;
&lt;p&gt;1.NULL是无数据，或未知数据，不能使用=，&amp;lt;&amp;gt;，！=来进行比较，只能用 is null 或者 is not null&lt;/p&gt;
&lt;p&gt;2.升序排列asc，降序排列desc&lt;/p&gt;
&lt;p&gt;3.设置查询显示的行数：order by &amp;hellip; desc limit 5;&lt;/p&gt;
&lt;p&gt;4.随机抽取3条数据：order by RAND() limit 3&lt;/p&gt;
&lt;p&gt;十二、模式匹配：
like，not like，%，_&lt;/p&gt;
&lt;p&gt;十三、设置和使用SQL变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select @studentName:=name from studentTable where id=1
set @studentName=&amp;#39;abc&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>华北电力大学基金会管理系统开发总结</title>
      <link>https://utopizza.github.io/posts/projects/2014-06-20-%E9%A1%B9%E7%9B%AE-%E5%8D%8E%E5%8C%97%E7%94%B5%E5%8A%9B%E5%A4%A7%E5%AD%A6%E5%9F%BA%E9%87%91%E4%BC%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 20 Jun 2014 16:31:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/projects/2014-06-20-%E9%A1%B9%E7%9B%AE-%E5%8D%8E%E5%8C%97%E7%94%B5%E5%8A%9B%E5%A4%A7%E5%AD%A6%E5%9F%BA%E9%87%91%E4%BC%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;一、数据库&lt;/p&gt;
&lt;p&gt;1、数据库文档：建立数据库前，要根据需求把需求在脑海里实现一遍，这样才能避免缺少某些表或字段导致功能无法实现，切记要先建立好完整的数据库，写好完善的数据库文档（要注意的细节有：命名的规范，注意单词拼写是否正确，还有各表的关系（见3），要写好各表、各字段的功能解析和备注提醒等等，规范的文档包括——是否主键，字段名称，字段描述即中文注释，数据类型，长度，是否可空，约束即是否外键，默认值，备注），再开始搭建其他各层&lt;/p&gt;
&lt;p&gt;2、数据库备份功能的实现：每个表都添加字段：IsDelete（bit）——是否删除，在删除的时候就把该字段赋值为“1”或者“True”，表明该行数据已经被删除，而不是真的删除&lt;/p&gt;
&lt;p&gt;3、注意建表时各表的关系：一对多的关系应该建立子表，并使用外键；多对多的关系应该在两表之间建立一个关系表（RelationTable），把两者之间的关系保存到关系表中，并使用两个表的主键作为外键。若删除两者其中之一，必须切记把关系表中对应的那个关系也删除掉（也是给IsDelete字段赋值为1，而不是真的删除）&lt;/p&gt;
&lt;p&gt;4、外键的使用：这个地方我自己也还是不大懂，什么时候用外键什么时候不用外键。目前，我默认为能用外键就应该添加外键约束，虽然可以通过后台在逻辑上去进行约束，但是我还是觉得在数据库使用外键约束更加可靠&lt;/p&gt;
&lt;p&gt;5、多条件（不定项条件）搜索：采用字符串拼接技术，给每个搜索条件参数声明一个对应的字符串拼接变量，先在备注中写好当输入所有搜索条件参数时的SQL语句，然后将传入的每个条件参数判断是否为空字符串（条件如果不用，传空字符串到数据库存储过程，不要使用NULL，因为NULL代表未知量，容易造成条件判断时的逻辑混乱），若为空字符串，则对应的拼接变量赋值为空字符串；若条件参数不为空，就按照刚才写的SQL语句格式给对应的拼接变量赋值（把传入的条件参数拼进字符串时要注意使用Convert()函数进行强制转换，把各种数据类型转换成字符串格式，否则会报错）；最后，当每个条件都判断过了并且给对应的拼接变量都赋值了后，就可以把各个拼接变量按照在备注中写好的SQL语句拼接起来，然后使用EXEC(@SQL)执行最终拼接的SQL语句&lt;/p&gt;
&lt;p&gt;6、临时表的使用：在存储过程中无法一次性选择出想要的表时，就需要建立一个临时表，把每次选择的表插入到临时表中（可能需要使用游标），最后再一次性把临时表选择出来。临时表的表名要以#开头，表明该表是临时表，它每次使用完毕后都会自动销毁，不会永久性存在数据库中&lt;/p&gt;
&lt;p&gt;7、分页功能：这里说的是（AspNetPager+存储过程）的真分页。其中AspNetPager负责取出每次分页的开始和结束的索引并传给数据库，存储过程需要根据两个索引取出索引之间的那几行数据。所以，存储过程需要在取出数据前把表按要求排好顺序，并添加一个索引字段（为了按索引取出数据），这样有两个方案，一个是上面说的建立一个和原表一样的临时表，但是给它一个新的自增主键，让它自增长作为序号，这样把原表按要求的顺序插进临时表的时候，分页索引就自动建立好了，然后取数据的时候就把那两个传入的分页索引作为条件取出临时表的数据即可。另一个方案是使用数据库系统函数Row_Number()建立索引字段，即在子查询中使用该函数，并把本表按要求的顺序选择出来，给该表重命名，然后再按索引取数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from 
(select Row_Number() over(order by ...) as Row_Num , * from ...）as T
where T.Row_Num between ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;8、关于存储过程：每个表至少四个存储过程：Select（按自己的主键ID取出数据），Insert（添加数据，有子表的话可能需要返回一个值，就是新插入的数据的ID，可使用output关键字实现），Update（更新，切记添加更新的where条件），Delete（删除，如果该数据库需要设计备份功能的话，就不执行删除，而是建立一个IsDelete（bit）字段，删除的时候update为1，也切记添加where条件）。有的时候还可能需要取出全部表的所有数据，Select_All（用于控件的数据绑定等等）&lt;/p&gt;
&lt;p&gt;9、游标的使用：游标配合While（@@FETCH_STATUS=0）循环语句可以遍历表并逐行对数据进行各种操作。一般用于对含有子表（含外键）的表进行删除，修改等操作。首先本表的某行数据的ID放进游标，然后在子表中根据该ID找出对应的数据并进行删改等操作，然后再把本表的该行数据进行删改等操作，完了后再把本表下一行数据的ID放进游标，如此继续下去即可完成含子表的表的相关操作&lt;/p&gt;
&lt;p&gt;10、数据库导出表到EXCEL：使用外部插件，比麻烦&lt;/p&gt;
&lt;p&gt;二、Model层&lt;/p&gt;
&lt;p&gt;1、该层用来将各个表的数据封装成对象进行数据传递，所以，表中的每个字段都是该表对应的类的属性。但是有时候需要经常用到一些额外的参数，例如分页时用的两个索引值，如果每次都作为额外参数进行传递会十分麻烦，所以可以把这些参数也作为该类的一个属性，使用时直接像其他参数一样封装到该类的对象中进行传递或调用，这样可以简便很多&lt;/p&gt;
&lt;p&gt;2、为了封装参数时的灵活性，应该给每个类写一个空的构造函数，这样可以每次使用该类时可以调用不定个属性，而不是固定死每次封装对象都必须把所有属性赋值&lt;/p&gt;
&lt;p&gt;3、一般来说，Model层中，每个类对应数据库中的每个表，每个类的属性的要和表中对应的字段数据类型要保持一致。但是由于从前台取参，到赋值给Model层对象，到再调用BLL层函数，到传参到数据库，这几个环节都需要对参数进行非空判断，而DateTime等数据类型的非空判断比较困难，所以在本项目中，我例外的把DateTime类型的属性改为String字符串类型（因为字符串在前台取值时不会为NULL，例如，如果用户在TextBox中什么都不填，那么在后台取值时，将取得一个空字符串&amp;rsquo;&#39;，而不是NULL）&lt;/p&gt;
&lt;p&gt;三、Common层&lt;/p&gt;
&lt;p&gt;1、该层主要是存放SqlHelper，FileHelper等通用的帮助类&lt;/p&gt;
&lt;p&gt;2、其实后来发现，有很多东西都是公用的，比如一些方法，例如：输入的数据的非空检测，输入数据的最大长度检测和截取，防止SQL注入的字符串检测和处理，添加用户操作日志等等，这些可用抽出来的公用方法，最好是在这个common层写好，然后在其他层引用或者调用，这样维护起来十分的方面，不用在修改的时候逐个cs文件或者逐个页面的改&lt;/p&gt;
&lt;p&gt;四、DAL层&lt;/p&gt;
&lt;p&gt;1、该层主要负责存放针对于每个表进行的操作方法（和MODEL层一样，每个类对应一个表），如增删改取&lt;/p&gt;
&lt;p&gt;2、这部分还需要下工夫，这部分的方法主要是把传过来的参数进行一定的格式化，然后调用SqlHelper把这些参数传给存储过程，并执行存储过程，最后接收存储过程返回的结果。如果要对返回的结果进行一些修改，比如数据的格式转换，应该使用List&amp;lt;&amp;gt;比较容易实行，如果只需要原封不动的接收一张表，应该使用Table比较方便&lt;/p&gt;
&lt;p&gt;3、方法的大概步骤：存储过程名字sql，参数数组paras，调用SqlHelper方法ExecuteQuery()，接收返回结果集dt或者list&lt;/p&gt;
&lt;p&gt;五、BLL层&lt;/p&gt;
&lt;p&gt;1、对应调用DAL层的方法，供给UI层使用，这层封装的是业务逻辑&lt;/p&gt;
&lt;p&gt;2、目前该项目的这层并没有体现出应有的业务逻辑，都是直接同名调用DAL层的方法就直接去UI绑数据了，我觉得真正的项目不应该是这样的&lt;/p&gt;
&lt;p&gt;3、我认为，DAL层应该只存放针对某个Model（也就是某张表）的最基本的增删查改，不考虑UI层需要的数据格式。然后BLL层调用DAL层的方法，对数据进行整合，处理成可以直接绑定到UI的格式（如过滤，筛选，多个表的联合、匹配、业务逻辑上的计算，业务上的数据验证等等）&lt;/p&gt;
&lt;p&gt;六、UI层&lt;/p&gt;
&lt;p&gt;1、页面的大致分类：登录页，母版页，首页，项目添加页面，管理页面（显示项目查询结果列表，提供查改删等操作的入口），详细信息页面（单个项目的查看，修改），出错页&lt;/p&gt;
&lt;p&gt;2、页面的浏览权限：项目一般把用户的权限进行划分，不同的用户的权限级别应该不同，比如普通用户只能查看项目，高级用户能够添加，修改，删除项目，而管理员能拥有所有权限，包括对用户的管理。因此，每个用户都应该有一个权限属性，在用户登录成功的时候，马上取出该用户的权限并保存到Session中。这样在该用户浏览页面的时候，每次跳转页面或者点击按钮，都可以根据Session里面的值来判断用户是否拥有该操作的权限。&lt;/p&gt;
&lt;p&gt;3、页面分类：能提供不同权限的用户使用的页面，尽量分开成与权限对应的页面，比如管理页面，普通用户只能查看不能修改和删除，高级用户能查看修改和删除，最好的做法是供普通用户使用的做成一个页面，供高级用户使用的做成另一个页面，而不是做成一个页面然后根据用户的权限判断是否隐藏修改和删除按钮。虽然两个页面大部分是相同的，但是代码的逻辑十分清晰，也不会导致安全性问题的出现（普通用户进行越权入侵），并且维护起来而十分容易&lt;/p&gt;
&lt;p&gt;4、登陆页：主要负责用户名和密码的验证，高级一点的会加个验证码。当然用户名和密码是保存在数据库中的，所以要调用一个存储过程，看该用户验证是否正确。正确的话，取出该用户的权限，保存到Session中，并根据权限的不同跳转到不同的首页&lt;/p&gt;
&lt;p&gt;5、项目添加页面：主要负责添加项目，用户等等。该过程的实质是，在页面的控件获取用户输入的数据，进行一定的格式转换（根据需要而定），然后将这堆数据封装成Model层的对象，把该对象传给BLL层的方法，调用该方法把该对象包含的数据传到DAL层的存储过程，最终把该对象添加到数据库的表中。在用户输入添加信息时，一定要考虑该数据的最大值或者最大长度，否则是添加不进去数据库的。所以每获取一个控件的值，在封装到Model层的对象前，必须进行长度或者最大值的检验，如果超过最大值，则截断或者给用户报错&lt;/p&gt;
&lt;p&gt;6、管理页（搜索页）：主要负责从一堆输入控件（textbox，dropdownlist，checkbox等等）中获取搜索条件并封装成Model层的对象，和以上类似，一直传到存储过程并返回搜索结果，然后将结果绑到该页面的repeter上，供用户查看，修改，或者删除。搜索页一般要求分页，我一般使用分页控件，配合存储过程，进行真分页，上面已经说过，这里不多说了。另外，绑定项目信息的时候，有的信息可能很多，所以要对其进行剪切（当然关键信息要保证其完整性）&lt;/p&gt;
&lt;p&gt;7、详细信息页：主要负责提供当个项目的所有详细信息，因为每个项目绑到搜索结果上的信息毕竟有限，所以必须提供一个页面来展示单个项目的所有详细信息，供用户查看，或者修改（最好查看功能和修改功能分开两个页面）。该页面一般是在搜索结果列表中，用户点击某个项目后面的查看或者修改按钮时，取出该项目的ID，并根据该ID跳转过来的。加载该页面时，要取出该项目的所有信息，进过一定的格式转换后（根据需要），存放于对应的控件中，便于用户查看或者修改&lt;/p&gt;
&lt;p&gt;8、出错页：就是出现故障时自动跳转的页面，主要是出于安全性的考虑&lt;/p&gt;
&lt;p&gt;七、关于维护&lt;/p&gt;
&lt;p&gt;1、维护是开发的重中之重，在维护过程中经常会出现许多大大小小的问题，我们必须站在用户的角度去开发这些软件，必须认真细心耐烦，只有这样才能把错误和漏洞降到最小，才能做一个好的软件&lt;/p&gt;
&lt;p&gt;2、必须坚持一个原则就是每次写好一段代码（每个类，每个方法等），自己必须进行测试并调试值没有问题出现，尽量使代码简洁高效，并加上注释，让其他人能够轻易的看懂&lt;/p&gt;
&lt;p&gt;3、在写页面的时候，必须考虑的事情有：输入的最大长度（最好写一个统一的函数来进行判断并截断），输入的数据格式（一般用try catch，即使前台用js进行判断了，后台也要进行判断，但是进行简单的错误抛出即可），输入的字符中是否含有危险的sql注入（写一个函数进行检测，并将原字符串的&amp;rsquo;替换成&amp;rdquo;）&lt;/p&gt;
&lt;p&gt;4、在前台控件取值，封装成Model层的对象并传递到后台时，一定要注意对空的判断，特别是传递到多条件选择的存储过程的参数时，不能把NULL传进去，所有对每一个参数必须进行非空判断，到底是传空字符串，还是某个默认值，还是什么什么，这个是必须要注意的问题&lt;/p&gt;
&lt;p&gt;5、关于修改：有时候客户需要修改需求，这时系统不得不做一些硬性修改。比如增加表里某个字段的长度。这时一定要细心，一定要从数据库改起，先改表的字段长度，然后是相关的增删改的存储过程中的那些临时表的字段的长度，然后是Model层，然后是DAL层的函数，接着是BLL层的函数，最后是最关键的UI层，要仔细检查每个用户输入控件的获取数据情况，修改截取函数的截取长度。另外还要留意一下控件的最大输入长度，是否需要修改&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>技术笔记(8)-SQL多条件查询字符串拼接问题</title>
      <link>https://utopizza.github.io/posts/technique/2014-03-06-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B08/</link>
      <pubDate>Thu, 06 Mar 2014 10:18:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/technique/2014-03-06-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B08/</guid>
      <description>&lt;p&gt;一、SQL多条件查询&lt;/p&gt;
&lt;p&gt;在实现SQL的多条件查询时，一般采用的实现方法是根据传入的参数是否有效来判读是否拼接该项查询条件，如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 传入参数：@ProjectName=&amp;#39;rrrr&amp;#39;，@ProjectNumber=&amp;#39;123&amp;#39;

// 先写好基本查询句子
declare @sqlString varchar(100)
set @sqlString = &amp;#39;select * from Project_Info where 1=1&amp;#39;

// 拼接查询条件1
if (@ProjectName IS NOT NULL) AND (@ProjectName &amp;lt;&amp;gt; &amp;#39;&amp;#39;) 
begin
    set @sqlString = @sqlString + &amp;#39; and ProjectName like &amp;#39;&amp;#39;%&amp;#39; + @ProjectName + &amp;#39;%&amp;#39;&amp;#39;&amp;#39;
end

// 拼接查询条件2
if (@ProjectNumber IS NOT NULL) AND (@ProjectNumber &amp;lt;&amp;gt; &amp;#39;&amp;#39;)
begin
    set @sqlString = @sqlString + &amp;#39; and ProjectNumber =&amp;#39;&amp;#39;&amp;#39; + @ProjectNumber + &amp;#39;&amp;#39;&amp;#39;&amp;#39;
end
    
// 执行最终结果
exec @sqlString
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二、问题&lt;/p&gt;
&lt;p&gt;拼接SQL时，如果不小心注意参数的引号，容易出现如下错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;set @sqlString = @sqlString + &amp;#39; and ProjectNumber =&amp;#39; + @ProjectNumber
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行报错，原因是在sql存储过程输入参数的时候，输入的rrrr，会直接赋给@ProjectName，系统不会自动给rrrr加上&#39;&amp;lsquo;两个单引号，导致最终SQL语句变成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from Project_Info where 1=1 and ProjectNumber = 123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而正确SQL的应该是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from Project_Info where 1=1 and ProjectNumber = &amp;#39;123&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是系统报错“列名&amp;rsquo;rrrr&amp;rsquo;无效”。解决办法：使用多个连续的单引号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;set @sqlString = @sqlString + &amp;#39; and ProjectNumber =&amp;#39;&amp;#39;&amp;#39; + @ProjectNumber + &amp;#39;&amp;#39;&amp;#39;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三、SQL Server中的单引号使用规则&lt;/p&gt;
&lt;p&gt;首先尽量不要在SQL中使用双引号。单引号如果要作为一个“字符串单引号”，那就在它的前面加一个单引号进行转义。即：&lt;/p&gt;
&lt;p&gt;两个连用的单引号 == 一个“字符串”意义上的单引号（即 &#39;&amp;rsquo; == &amp;quot; &#39; &amp;ldquo;）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;SQL 语句&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;执行结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;select &#39;&#39;&#39;&#39;&#39;&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&#39;&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;select &#39; &#39;&#39; &#39;&#39; &#39;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&#39; &#39;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;select &#39; &#39;&#39;ab &#39;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;lsquo;ab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;select &#39; &#39;&#39;a&#39;&#39;b &#39;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;lsquo;a&amp;rsquo;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;select &#39; &#39;&#39;a&#39;&#39;b&#39;&#39; &#39;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;lsquo;a&amp;rsquo;b&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;技巧：拿到一个包含很多单引号的字符串（如，&lt;code&gt;&#39; and ProjectName like &#39;&#39;%&#39;&lt;/code&gt;），分析时，首先可以确定第一个和最后一个单引号都是传统的最外围的用来定义这条字符串的单引号，把它们除开后，对于内部其他多个连用的单引号，把每两个连用的单引号替换成一个“字符串单引号”即可（如，&lt;code&gt;and ProjectName like &amp;quot; &#39; &amp;quot;&lt;/code&gt;）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>技术笔记(7)-标记语言、脚本语言、编程语言</title>
      <link>https://utopizza.github.io/posts/technique/2014-01-04-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B07/</link>
      <pubDate>Sat, 04 Jan 2014 13:53:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/technique/2014-01-04-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B07/</guid>
      <description>&lt;p&gt;编程语言、标记语言、脚本语言分别有哪些？区别是什么？&lt;/p&gt;
&lt;p&gt;一、标记语言&lt;/p&gt;
&lt;p&gt;是一种将文本（Text）以及文本相关的其他信息结合起来，展现出关于文档结构和数据处理细节的电脑文字编码。与文本相关的其他信息（包括例如文本的结构和表示信息等）与原来的文本结合在一起，但是使用标记（markup）进行标识。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如：HTML、XML&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二、脚本语言&lt;/p&gt;
&lt;p&gt;为了缩短传统的编写-编译-链接-运行（edit-compile-link-run）过程而创建的计算机编程语言。它的特点是：程序代码即是最终的执行文件，只是这个过程需要解释器的参与。脚本语言通常是被解释执行的，而且程序是文本文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如：JavaScript，Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三、解析型语言&lt;/p&gt;
&lt;p&gt;指用专门解释器对源程序逐行解释成特定平台的机器码并立即执行的语言；相当于把编译型语言的编译链接过程混到一起同时完成的。
解释型语言执行效率较低，且不能脱离解释器运行，但它的跨平台型比较容易，只需提供特定解释器即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如：Python（同时是脚本语言），Java，C#&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三、编译型语言&lt;/p&gt;
&lt;p&gt;指用专用的编译器，针对特定的操作平台（操作系统）将某种高级语言源代码一次性翻译成可被硬件平台直接运行的二进制机器码（具有操作数，指令、及相应的格式），这个过程叫做编译；编译好的可执行性文件（.exe），可在相对应的平台上运行（移植性差，但运行效率高）。有些程序编译后，还需要把其他编译好的，可能需要组装两个以上的目标代码生成最终的可执行性文件，称为链接（可实现对低层次代码的复用）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如：C、C++、Java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，Java语言是一门很特殊的语言，Java程序需要进行编译步骤，但并不会生成特定平台的二进制机器码，它编译后生成的是一种与平台无关的字节码文件（*.class）（移植性好的原因），这种字节码自然不能被平台直接执行，运行时需要由解释器解释成相应平台的二进制机器码文件；大多数人认为Java是一种编译型语言，但我们说Java即是编译型语言，也是解释型语言也并没有错。&lt;/p&gt;
&lt;p&gt;四、区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标记语言没有逻辑和行为能力，不用于向计算机发出指令，常用于格式化和链接&lt;/li&gt;
&lt;li&gt;脚本语言介于标记语言和编程语言之间，脚本语言脚本语言不需要编译，可以直接用，由解释器来负责解释&lt;/li&gt;
&lt;li&gt;编译型语言写的程序执行之前，需要一个专门的编译过程，把程序编译成为机器语言的文件，比如exe文件，以后要运行的话就不用重新翻译了，直接使用编译的结果就行了（exe文件），因为翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;五、脚本语言与系统语言的区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;抽象的级别：这是最重要也是最明显示的不同。脚本语言对程序员提供了更高级的抽象。这一点明显表现在：在这种语言自身中，存在有高级的数据结构，如列表和字典结构，和对这种结构简单方便的嵌套和操作。这样可以创建非常成功的程序&lt;/li&gt;
&lt;li&gt;类型定义：系统语言通常是强类型和静态类型定义。这就意味着所有变量的类型要在程序中指定，在编译时检查。相反地，脚本语言是最松散的类型定义，完全没有类型声明，并且在运行时进行动态类型检查&lt;/li&gt;
&lt;li&gt;执行：系统语言的特点是编译的。程序被编译成可执行的二进制。另一方面，脚本语言的特点是解释，也就是，指令被立即执行，不存在一个编译的中间状态。这就意味着脚本语言是交互式的(你可以在提示符下敲入命令，并且看到结果)，这是另一个巨大的胜利。这样完全将编译过程从编辑-编译-运行循环中去掉了。&lt;/li&gt;
&lt;li&gt;速度：以上三点是脚本语言一方面在速度与效率，另一方面在易用性与表示式的强大性之间进行折衷的典型例子。这就使得脚本语言的执行速度比系统语言慢一个数量级。这就是对脚本语言诽谤最多的方面。性能的降低不是真正的问题，因为思想是用脚本语言来组合组件，这些组件是用象C  这样的快速系统语言来编写的。所以所有需要运行快速的东西将因为是用快速的语言实现的而运行得快速。脚本语言只用于将东西绑在一起，并且这些通常不是性能的瓶颈(或如果是，你需要重新检查你的设计)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;六、本文参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/lsgsanxiao/p/5126170.html&#34;&gt;编程语言、标记语言、脚本语言分别有哪些？区别是什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/zhangliangzi/article/details/50413727&#34;&gt;编译型语言、解释型语言与脚本语言三大类型详解&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>技术笔记(6)-SqlHelper</title>
      <link>https://utopizza.github.io/posts/technique/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B06/</link>
      <pubDate>Sat, 21 Dec 2013 17:44:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/technique/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B06/</guid>
      <description>&lt;p&gt;刚学ASP.NET时用的比较多的一个简单版的SqlHelper：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Collections;

namespace TICSystemCommon 
{
    public abstract class SqlHelper
    {
        //Database connection strings
        public static readonly string ConnectionStringShop = ConfigurationManager.ConnectionStrings[&amp;#34;ConnectionString&amp;#34;].ConnectionString;

        /// &amp;lt;param name=&amp;#34;connectionString&amp;#34;&amp;gt;a valid connection string for a SqlConnection&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;commandType&amp;#34;&amp;gt;the CommandType (stored procedure, text, etc.)&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;commandText&amp;#34;&amp;gt;the stored procedure name or T-SQL command&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;commandParameters&amp;#34;&amp;gt;an array of SqlParamters used to execute the command&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;an int representing the number of rows affected by the command&amp;lt;/returns&amp;gt;
        public static int ExecuteNonQuery(string connectionString, CommandType cmdType, string cmdText, params SqlParameter[] commandParameters)
        {
            SqlCommand cmd = new SqlCommand();
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                PrepareCommand(cmd, conn, null, cmdType, cmdText, commandParameters);
                int val = cmd.ExecuteNonQuery();
                //cmd.Parameters.Clear();
                return val;
            }
        }

        /// &amp;lt;param name=&amp;#34;connectionString&amp;#34;&amp;gt;a valid connection string for a SqlConnection&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;commandType&amp;#34;&amp;gt;the CommandType (stored procedure, text, etc.)&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;commandText&amp;#34;&amp;gt;the stored procedure name or T-SQL command&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;commandParameters&amp;#34;&amp;gt;an array of SqlParamters used to execute the command&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;A SqlDataReader containing the results&amp;lt;/returns&amp;gt;
        public static SqlDataReader ExecuteReader(string connectionString, CommandType cmdType, string cmdText, params SqlParameter[] commandParameters)
        {
            SqlCommand cmd = new SqlCommand();
            SqlConnection conn = new SqlConnection(connectionString);

            // we use a try/catch here because if the method throws an exception we want to 
            // close the connection throw code, because no datareader will exist, hence the 
            // commandBehaviour.CloseConnection will not work
            try
            {
                PrepareCommand(cmd, conn, null, cmdType, cmdText, commandParameters);
                SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                //cmd.Parameters.Clear();
                return rdr;
            }
            catch(Exception e)
            {
                conn.Close();
                throw e;
            }
        }

        /// &amp;lt;param name=&amp;#34;connectionString&amp;#34;&amp;gt;a valid connection string for a SqlConnection&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;commandType&amp;#34;&amp;gt;the CommandType (stored procedure, text, etc.)&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;commandText&amp;#34;&amp;gt;the stored procedure name or T-SQL command&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;commandParameters&amp;#34;&amp;gt;an array of SqlParamters used to execute the command&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt; the first column of the first record against an existing database connection&amp;lt;/returns&amp;gt;
        public static object ExecuteScalar(string connectionString, CommandType cmdType, string cmdText, params SqlParameter[] commandParameters)
        {
            SqlCommand cmd = new SqlCommand();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                PrepareCommand(cmd, connection, null, cmdType, cmdText, commandParameters);
                object val = cmd.ExecuteScalar();
                cmd.Parameters.Clear();
                return val;
            }
        }

        /// &amp;lt;summary&amp;gt;
        /// Prepare a command for execution
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;#34;cmd&amp;#34;&amp;gt;SqlCommand object&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;conn&amp;#34;&amp;gt;SqlConnection object&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;trans&amp;#34;&amp;gt;SqlTransaction object&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;cmdType&amp;#34;&amp;gt;Cmd type e.g. stored procedure or text&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;cmdText&amp;#34;&amp;gt;Command text, e.g. Select * from Products&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&amp;#34;cmdParms&amp;#34;&amp;gt;SqlParameters to use in the command&amp;lt;/param&amp;gt;
        private static void PrepareCommand(SqlCommand cmd, SqlConnection conn, SqlTransaction trans, CommandType cmdType, string cmdText, SqlParameter[] cmdParms)
        {

            if (conn.State != ConnectionState.Open)
                conn.Open();

            cmd.Connection = conn;
            cmd.CommandText = cmdText;

            if (trans != null)
                cmd.Transaction = trans;

            cmd.CommandType = cmdType;

            if (cmdParms != null)
            {
                foreach (SqlParameter parm in cmdParms)
                    cmd.Parameters.Add(parm);
            }
        }
    
    
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在DAL层调用SqlHelper：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;using System.Text;
using TICSystemCommon;
using TICSystemModel;
using System.Data;
using System.Data.SqlClient;

namespace TICSystemDAL
{
    public class AccidentInfoDal
    {
        
        public AccidentInfoModel GetAccidentInfoByAccidentId(int AccidentId)
        {
            AccidentInfoModel AccidentInfo = new AccidentInfoModel();
            string sql = &amp;#34;Proc_GetAccidentInfoByAccidentId&amp;#34;;
            DataTable dt = new DataTable();
            SqlParameter[] para = new SqlParameter[]
            {
                new SqlParameter(&amp;#34;@AccidentId&amp;#34;,AccidentId)
            };
            try
            {
                using (SqlDataReader dr = SqlHelper.ExecuteReader(SqlHelper.ConnectionStringShop, CommandType.StoredProcedure, sql, para))
                {
                    if (dr.Read())
                    {
                        AccidentInfo.AccidentId = Convert.ToInt32(dr[&amp;#34;AccidentId&amp;#34;].ToString());
                        AccidentInfo.AccidentPlace = dr[&amp;#34;AccidentPlace&amp;#34;].ToString();
                        AccidentInfo.AccidentTime = dr[&amp;#34;AccidentTime&amp;#34;].ToString();
                        AccidentInfo.PersonName = dr[&amp;#34;PersonName&amp;#34;].ToString();
                        AccidentInfo.PersonPhone = dr[&amp;#34;PersonPhone&amp;#34;].ToString();
                        AccidentInfo.CarNumber = dr[&amp;#34;CarNumber&amp;#34;].ToString();
                        AccidentInfo.IsDealed = Convert.ToBoolean(dr[&amp;#34;IsDealed&amp;#34;].ToString());
                    }
                }
                return AccidentInfo;
            }
            catch (Exception)
            {
                return null;
            }
        }       
        
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有个帖子说如果项目中需要考虑多线程并发和事务，则不能把数据库操作类设置成static，而是应该进行实例化来调用：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/cyq1162/p/5745325.html?utm_source=tuicool&amp;amp;utm_medium=referral#!comments&#34;&gt;不该活着的SqlHelper和DBHelper&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>技术笔记(5)-表联接Join</title>
      <link>https://utopizza.github.io/posts/technique/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B05/</link>
      <pubDate>Sat, 21 Dec 2013 15:14:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/technique/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B05/</guid>
      <description>&lt;p&gt;数据库的常用表联接主要有inner join、left join、right join三种。&lt;/p&gt;
&lt;p&gt;例表A&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Aid&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Adate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例表B&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Bid&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Bdate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1、inner join：取出id相同的字段，仅返回两表匹配的数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from A inner join B on A.Aid = B.Bid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时的取出的是:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Aid&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Adate&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Bid&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Bdate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;2、left join：先取出“左表”A表中所有数据，然后再加上与A、B匹配的的数据。不管匹配与否，“左表”表A的全部数据将全部返回&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from a left join b on a.aid = b.bid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时的取出的是:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Aid&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Adate&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Bid&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Bdate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;3、right join：先取出“右表”B表中所有数据，然后再加上与A、B匹配的的数据。不管匹配与否，“右表”B表的全部数据将全部被返回&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from a right join b on a.aid = b.bid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时的取出的是:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Aid&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Adate&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Bid&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Bdate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;a2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;b4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;4、小结&lt;/p&gt;
&lt;p&gt;若 A join B，那么 A 为“左表”，B为“右表”。此时，
用 left join，则取左表（A）全部数据，和右表（B）匹配数据
用 right join，则取右表（B）全部数据，和左表（A）匹配数据
用 inner join，则仅取两表同时匹配数据&lt;/p&gt;
&lt;p&gt;由此，可以推断&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from A left join B on A.Aid=B.Bid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等价于(表的内容一样，只是字段的顺序不同)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from B right join A on A.Aid=B.Bid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>技术笔记(4)-ADO.NET</title>
      <link>https://utopizza.github.io/posts/technique/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B04/</link>
      <pubDate>Sat, 21 Dec 2013 12:21:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/technique/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B04/</guid>
      <description>&lt;p&gt;一、ADO.NET主要用于访问数据，尤其是数据库中的数据，该类被封装在System.Data.dll中。它的两个核心组件：DataSet和.NET数据提供程序&lt;/p&gt;
&lt;p&gt;1、DataSet：记录在内存中的数据，相当于内存中的一个完整的数据集。但它并不与外部的物理数据库直接相连，而是通过DataAdapter间接的完成与外部数据库的交互。该类的主要对象有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DataTable：使用行和列形式来组织的一个矩形数据集&lt;/li&gt;
&lt;li&gt;DataColumn：列（规则的集合）&lt;/li&gt;
&lt;li&gt;DataRow：行（实际的对应于规则的数据存储）&lt;/li&gt;
&lt;li&gt;Constraint：决定能进入DataTable的数据&lt;/li&gt;
&lt;li&gt;DataRelation：不同的DataTable之间的关联&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、.NET数据提供程序：主要有4种对象，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection：提供与数据源的连接&lt;/li&gt;
&lt;li&gt;Command：执行一系列的数据库命令&lt;/li&gt;
&lt;li&gt;DataReader：从数据源中提供高性能的数据流&lt;/li&gt;
&lt;li&gt;DataAdapter：提供连接DataSet对象和数据源的桥梁。DataAdapter通过Command对象在数据源中执行SQL命令，并将数据加载到DataSet中，使DataSet中数据的更改与数据源保持一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二、ADO.NET Connection：Connection类表示一个数据源的单个连接，但并不是单个调用。ADO.NET支持断开式连接，即可在一个Connection对象的使用过程中多次打开或关闭操作，但这些操作并不意味着该对象被创建或者销毁。主要属性有ConnectionString，ConnectionTimeOut，Database，ChangeDatabase，State等。主要的方法有：Open()，Close()。主要的状态属性有：Broken，Closed，Connecting，Executing，Fetching，Open。&lt;/p&gt;
&lt;p&gt;三、ADO.NET Command：从本质上讲，ADO.NET的Command类就是SQL命令或者是对存储过程的引用。&lt;/p&gt;
&lt;p&gt;1、主要属性有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CommandText：执行命令的内容（字符串），或者存储过程的名称&lt;/li&gt;
&lt;li&gt;CommandType：告诉Command对象怎样解释CommandText属性的内容，当该属性的值为StoredProcedure时，说明CommandText属性的内容为存储过程名称；当为TableDirect时，说明内容为表名；当为Text时，说明为SQL文本命令（即直接的sql语句）&lt;/li&gt;
&lt;li&gt;Connection：对Connection对象的引用&lt;/li&gt;
&lt;li&gt;Parameters：包含了针对CommandText属性所指定的SQL命令或存储过程的参数集合（通过函数AddRange(paras)向Command对象添加参数集）&lt;/li&gt;
&lt;li&gt;CommandTimeout：决定了命令出错前等待服务器响应的时间
Transaction：
UpdateRowSource:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、主要的方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ExecuteNonQuery()：执行命令并返回受影响的行数（用于返回结果为空的sql命令或存储过程）&lt;/li&gt;
&lt;li&gt;ExecuteScalar()：执行查询并返回结果集中的第一行的第一列（用于返回单个值的sql命令或存储过程）&lt;/li&gt;
&lt;li&gt;ExecuteReader()：向Connection发送CommandText并生成DataReader（用于返回多个结果的sql命令或存储过程，该方法创建一个DataReader对象。该方法执行时可以不带参数，或者带一个参数CommandBehavior）&lt;/li&gt;
&lt;li&gt;ExecuteXmlReader()：向Connection发送CommandText并生成XmlReader&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;四、DataReader：当Command对象返回结果集时，需要用DataReader来检索数据。DataReader对象返回一个来自Command对象的只读的，只能向前的数据流。DataReader每次只在内存中保留一行，所以开销非常小。&lt;/p&gt;
&lt;p&gt;1、主要属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Depth：多层结果集中，当前行的嵌套深度&lt;/li&gt;
&lt;li&gt;FieldCount：当前行的数目&lt;/li&gt;
&lt;li&gt;IsClosed：DataReader是否需要关闭&lt;/li&gt;
&lt;li&gt;Item：列值&lt;/li&gt;
&lt;li&gt;RecordsAffected：被修改，插入或者删除的行的数目&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、主要方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Close()：关闭&lt;/li&gt;
&lt;li&gt;GetType()：将指定的列的值作为指定类型获取&lt;/li&gt;
&lt;li&gt;GetDataTypeName()：获取数据源类型的名称&lt;/li&gt;
&lt;li&gt;GetFieldType()：返回指定列的系统类型&lt;/li&gt;
&lt;li&gt;GetName()：获得指定列的名称&lt;/li&gt;
&lt;li&gt;GetValue()：获得指定列的值&lt;/li&gt;
&lt;li&gt;NextResult()：前进到得下一个结果&lt;/li&gt;
&lt;li&gt;Read()：前进到下一列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;五、DataAdapter：DataAdapter是DataSet和物理数据源之间的桥梁，即DataSet通过DataAdapter与数据库间接交互。DataAdapter类的目的是执行数据库查询并创建包含查询结果的DataTable，该类也可以把对DataTable的更改写回数据库。&lt;/p&gt;
&lt;p&gt;1、主要方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fill()：将查询结果填充DataSet&lt;/li&gt;
&lt;li&gt;Update()：将DataSet中的数据的变动写回数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;六、应用实例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Sqlconnection conn=new SqlConnection();
conn.ConnectionString=&amp;#34;Server=XXX;&amp;#34;+&amp;#34;Database=XXX;&amp;#34;+&amp;#34;Intergrated Security=true;&amp;#34;;

SqlCommand cmd=new SqlCommand();
cmd.CommendText=&amp;#34;select * from studentTable&amp;#34;;
cmd.Connection=conn;

conn.Open();

DataTable dt=new DataTable();
DataSet ds=new DataSet();

SqlDataAdapter adapter=new SqlDataAdapter();
adapter.SelectCommand=cmd;
adapter.Fill(ds,&amp;#34;dt&amp;#34;);

conn.Close();

dt=ds.Tables[&amp;#34;dt&amp;#34;];
this.GridView.DataSource=dt.DefaultView;
this.GridView.DataBind();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>技术笔记(3)-C#连接数据库</title>
      <link>https://utopizza.github.io/posts/technique/2013-12-18-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B03/</link>
      <pubDate>Wed, 18 Dec 2013 23:39:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/technique/2013-12-18-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B03/</guid>
      <description>&lt;p&gt;一、创建连接：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入所使用的ADO.NET类的命名空间（引入System.Data类；使用SQL Server数据库的话就要再引入System.Data.SqlClient类）&lt;/li&gt;
&lt;li&gt;创建连接字符串变量，以保存生成连接需要的信息&lt;/li&gt;
&lt;li&gt;实例化Connection&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、使用连接：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开连接&lt;/li&gt;
&lt;li&gt;使用连接，主要进行读取数据，修改和删除数据等操作&lt;/li&gt;
&lt;li&gt;关闭连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 引入ADO.NET类的命名空间
using System.Data;
using System.Data.SqlClient;

// 创建连接字符串
string connStr = &amp;#34;server=XXX（服务器名）; database=XXX（数据库）; uid=XXX（用户名）; pwd=XXX（该用户登陆密码）;&amp;#34;
	
// 创建连接数据库的SqlConnection对象，传入连接字符串，打开连接
SqlConnection conn = new SqlConnection(connStr);
conn.Open();

// 创建要对数据库操作的SQL语句
string sql = &amp;#34;insert into subjectTable(ID,name,point) values(2,&amp;#39;物理&amp;#39;,4)&amp;#34;;

// 创建SqlCommand对象并传入SQL语句操作语句和SqlConnection连接对象
SqlCommand cmd = new SqlCommand(sql, conn);

// 调用ExecuteNonQuery()函数（执行查询语句并返回受影响的行数）
int res=cmd.ExecuteNonQuery();

// 关闭连接，返回数据
conn.Close();
return res;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;四、共享连接字符串&lt;/p&gt;
&lt;p&gt;1.打开项目的web.config文件，在connectionStrings中修改&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;add name=&amp;#34;connStr&amp;#34; connectionString=&amp;#34;server=xxx; database=xxx; uid=xxx; pwd=xxx;&amp;#34;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.在原来存放连接语句的项目中引入using System.Configuration，并将原来语句&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;string connStr = &amp;#34;server=xxx; database=xxx; uid=xxx; pwd=xxx;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;string connStr = ConfigurationManager.ConnectionStrings[&amp;#34;connStr&amp;#34;].ConnectionString;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>技术笔记(2)-SQL语法小结</title>
      <link>https://utopizza.github.io/posts/technique/2013-10-23-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Wed, 23 Oct 2013 17:53:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/technique/2013-10-23-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B02/</guid>
      <description>&lt;p&gt;1、 Transact-SQL语言分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据定义语言（DDL）：创建，删除，修改数据表，建立索引和约束，创建其他数据库对象等&lt;/li&gt;
&lt;li&gt;数据操纵语言（DML）：查询，添加，删除，修改数据等&lt;/li&gt;
&lt;li&gt;数据控制语言（DCL）：控制安全性的命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数值型：int,smallint,bigint,tinyint,bit,decimal,numeric,float,real&lt;/li&gt;
&lt;li&gt;字符型：char,varchar,text&lt;/li&gt;
&lt;li&gt;日期/时间型：datetime,smalldatetime&lt;/li&gt;
&lt;li&gt;货币型：money,smallmoney&lt;/li&gt;
&lt;li&gt;二进制型：binary,varbinary,image&lt;/li&gt;
&lt;li&gt;unicode型：nchar,nvarchar,ntext&lt;/li&gt;
&lt;li&gt;sql-variant型：混合型&lt;/li&gt;
&lt;li&gt;table型：临时表&lt;/li&gt;
&lt;li&gt;自定义型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、标识符命名规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规则标识符（符合标识符规则，不用分隔符）&lt;/li&gt;
&lt;li&gt;分隔标识符（不符合标识符规则，必须包含在&amp;rdquo; &amp;ldquo;和&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 内）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、对象命名规则：服务器名+数据库名+所有者名+对象名，如：sever.database.owner_name.object_name&lt;/p&gt;
&lt;p&gt;5、常量：见上数据类型&lt;/p&gt;
&lt;p&gt;6、变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;//声明
DECLARE  @myint int，@mychar char(8)
	  	           
//赋值：
SET  @myint=10  
SET @mychar=&amp;#39;wang&amp;#39; 
SELECT  @myint=10，@mychar=&amp;#39;wang&amp;#39;

//查询（即输出）
SELECT  @myint  as  myint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;7、全局变量：系统预定好的变量，只读，如：@@ERROR，@@DBTS&lt;/p&gt;
&lt;p&gt;8、算术运算：+，-，*，/，%&lt;/p&gt;
&lt;p&gt;9、逻辑运算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;and：仅当两个都为true时返回true&lt;/li&gt;
&lt;li&gt;or：仅当两个都为false时返回false&lt;/li&gt;
&lt;li&gt;not：对布尔表达式取反&lt;/li&gt;
&lt;li&gt;all：如果全都为true，返回true&lt;/li&gt;
&lt;li&gt;any：如果有一个为true，返回true&lt;/li&gt;
&lt;li&gt;like：如果操作数与一种模式匹配，返回true&lt;/li&gt;
&lt;li&gt;in：如果操作数等于表达式列表中的一个，返回true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10、字符串连接符：+&lt;/p&gt;
&lt;p&gt;11、比较运算符：=，&amp;lt;，&amp;gt;，！=，&amp;lt;=，&amp;gt;=，&amp;lt;&amp;gt;（不等于）&lt;/p&gt;
&lt;p&gt;12、null与空判断：null为空值，即未知值（不是0或空字符），用操作符is来运算，而不是用比较运算符&lt;/p&gt;
&lt;p&gt;13、大对象处理：对ntext，text，image都是当作二进制大对象（BLOB）进行访问的，有专门的语句writetext，updatetext，readtext等来处理&lt;/p&gt;
&lt;p&gt;14、流程控制：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;declare @cal int
select @cal=1
while(@cal&amp;lt;5)
begin
    select @cal=@cal+1
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;15、select语句&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from newstable  
select ID,title,content from newstable  
select content1 + &amp;#39; , &amp;#39; + content2 as content from newstable  
select top 10 ID from newstable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;16、where语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from newstable where ID = 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;17、添加排序顺序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from newstable where caID = 10 order by createTime  
select * from newstable where caID = 10 order by createTime desc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;18、添加汇总信息：（聚合函数）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select AVG(ID) from newstable  返回newstable表的ID列的平均值
select MAX(ID) from newstable  返回newstable表的ID列的最大值
select MIN(ID) from newstable  返回newstable表的ID列的最小值
select COUNT(ID) from newstable where ID&amp;lt;10  
select SUM(ID) from newstable where ID&amp;lt;10  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;19、group by语句：必须对不出现在聚合函数中的列使用该语句，否则报错。SQL要求，在含聚合函数的查询中，任何列名要么加入聚合函数中，要么包含在group by短语中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select SUM(ID),caID from newstable 
// 必须改为
select SUM(ID),caID from newstable group by caID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;20、添加HAVING子句&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select caID from newstable group by caID having min(ID)&amp;gt;7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;21、distinct：去除重复的值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select distinct caID from newstable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;22、内连接：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from table1 inner join table2 on table1.ID=table2.ID  返回table1和table2中所有满足table1.ID=table2.ID的行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;23、外连接：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select * from table1 left join table2 on table1.ID=table2.ID ;
select * from table1 right join table2 on table1.ID=table2.ID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;24、组合字段，建立新列&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select ID * caID as ID_caID from newstable  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;25、insert语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;insert into newstable(title,content) values(&amp;#39;wang&amp;#39;,&amp;#39;yusheng&amp;#39;) 
insert into test select title,content,createTime from newstable where createTime&amp;lt;GETDATE()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;26、select into语句，利用已有表的字段创建新表（可作为临时表）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;select newstable.title,content,createTime into test2 from newstable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;27、update语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;update test set createTime=GETDATE(),content=&amp;#39;abcdefg&amp;#39; where ID=1
update test2 set createTime=GETDATE() where title not like &amp;#39;wang&amp;#39;
update test2 set content=&amp;#39;update2&amp;#39; where title in (&amp;#39;wang&amp;#39;,&amp;#39;sheng&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;28、delete语句：由于delete语句操作不可恢复，所以删除数据前最好用select into语句建立一个临时表来备份&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;delete from test where ID=1
delete from test where ID in (select ID from test group by ID having sum(ID) &amp;lt;3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;29、创建表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table categorytable
(
  ID int identity(1,1) primary key , 
  [name] varchar(20) not null default &amp;#39;abcd&amp;#39;
  ...
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;30、键：键是行标识符，能唯一的标识行和列。但键并不是独立的另一个列，它可以是表中任何一列或多个列组合来表达，但被定义为键的列不能有重复的项，必须保持其唯一性。&lt;/p&gt;
&lt;p&gt;31、主键：本表的行标识符&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table newtable(newText char(10) null primary key)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;32、外键：外键是在另一个表中出现的主键的实例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table newstable(newsID int references category(newsID))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;33、数据规范化：设计一组表的过程叫规范化，目标是避免数据的冗余存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一范式：列出所有要保存的数据项，并为他们建立列名称，并把相关的列组合到表中，对每个表建立一个主键&lt;/li&gt;
&lt;li&gt;第二范式：检查每一列，将完全依赖主键的列保留，将部分依赖主键的列移到另一个新表中重新组合&lt;/li&gt;
&lt;li&gt;第三范式：存在可传递关系的列从单一的表中除去，移到单独的表中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;34、添加索引：（数据库一般自动为表中的主键建立索引）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;唯一索引：不允许两行有相同的索引，不允许重复值，没有可以引用到多行的索引条目&lt;/li&gt;
&lt;li&gt;群集索引：在其内部排序的索引，并且按照索引排序结构规定了行的存储结构（存储顺序），每张表中只能有一个群集索引，索引要求唯一&lt;/li&gt;
&lt;li&gt;非群集索引：对表中的行生成索引但不改变他们的存储顺序，索引不要求唯一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;35、建立索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create table newstable
(
    newsText char(6) null) primary key unique(唯一索引)
    [或clustered(群集索引)，nonclustered(非群集索引)]
)
    
create table newstable(...)
create unique clustered index newsID_ind on newstable(newsID)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;36、添加约束：约束可以是主键，外键的引用，或者是数据验证的规则&lt;/p&gt;
&lt;p&gt;37、更改表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;alter table newstable add ID2 int null  
alter table newstable drop column ID2  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;38、删除表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;drop table test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;40、创建数据库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create database mydatabase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;41、存储过程：存储在服务器上的查询过程称为存储过程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create procedure pro_test
as
	select ....
	from test
go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;42、调用存储过程：
(1) 在数据库中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;exec  pro_test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2) 在客户端得数据控件中：设定对象，命令对象发出exec语句&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>技术笔记(1)-C#语法小结</title>
      <link>https://utopizza.github.io/posts/technique/2013-09-20-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Fri, 20 Sep 2013 13:23:00 +0000</pubDate>
      
      <guid>https://utopizza.github.io/posts/technique/2013-09-20-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B01/</guid>
      <description>&lt;p&gt;1、 camelCase规则:第一个单词以小写开头，其他每个单词开头大写，其余字母小写，如: firstName(建议使用)&lt;/p&gt;
&lt;p&gt;2、 PascalCase规则: 每个单词除了第一个字母大写，其余小写，如: FirstName&lt;/p&gt;
&lt;p&gt;3、 C#的布尔类型只包含true和false，不能用1和0表示，即布尔值和整数值之间不能相互转换&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;bool c=a&amp;gt;b; //若a大于b，则d为true，否则为false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4、 注意&amp;amp;&amp;amp;和&amp;amp;的区别（同||和|）：&amp;amp;&amp;amp;如果第一个操作数可判断为false，则不会继续以后的操作数而直接得出语句的值为false；||如果第一个操作数可判断为true，则不会继续以后的操作数而直接得出语句的值为true&lt;/p&gt;
&lt;p&gt;5、 取a和b中的最大者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;double max=(a&amp;gt;b)?a:b;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;6、 整型和字符串转换&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// 整型转字符串
int i=10;
String s=i.ToString();

// 字符串转整型
String s=“100”;
int i=Int32.Parse(s); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;7、 字符串转换类：Convert。需注意的是，字符串是不能改变的，如果要改变字符串的值，系统会创建一个新的字符串，而不会改变原来的字符串&lt;/p&gt;
&lt;p&gt;8、 注意switch语句的开关性，如果某个case语句符合条件，系统会进入switch语句并一直执行到最后，除非遇到break语句才会跳出&lt;/p&gt;
&lt;p&gt;9、 数组声明和初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;int[] a=new int[10];
int[] b=new int[3]{2,4,6};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;10、 foreach循环：对数组进行只读访问而不能做任何修改，而且不会造成数组下标越界&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;int[] b=new int[3]{2,4,6};
foreach(int m in b){ 
    Console.WriteLine(m)；// 输出数组b的每个元素
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;11、 一个函数可以有多条返回语句return，但有返回值类型的函数必须每种情况都有对应的返回值（特别注意含if语句的函数）&lt;/p&gt;
&lt;p&gt;12、 函数中实参向形参的数据传递是按值传递的话，形参的数值只是从实参复制过来的一个数值，因此在函数中对形参的任何操作对实参无任何影响；如果是按应用传递的话，形参就是实参的另一个名字，两者是同一个数据，因此在函数中对形参的任何操作都是对实参的间接操作。另外，可以用ref关键字指定参数为引用参数，使按值传递变为按引用传递&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;void fun(ref int a){...};
...;
int b=10;
fun(b); // 这时，指定了a是b的引用，在fun内对a的操作会影响b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;13、 params：可以用该关键字来化简数组参数的传递，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;void fun(params int[] a){...};
...;
fun(1,2,3,4,5);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;14、 如果要修改全局变量的值，就要使用static，因为const禁止修改变量的值。如果局部变量和全局变量同名，全局变量就会被屏蔽&lt;/p&gt;
&lt;p&gt;15、 C#不允许派生类的可访问性比基类（父类）更高，即内部类可以继承于一个公共类，但公共类不可以继承于一个内部类&lt;/p&gt;
&lt;p&gt;16、 如果在定义类的时候没有指定基类，编译器就会默认该类派生于Object类，于是就可以使用Object类的方法，如：GetType()[返回从System.Type派生的类的一个实例]；ToString()[获取对象的字符串]&lt;/p&gt;
&lt;p&gt;17、 构造函数执行顺序：为了实例化派生的类，必须先实例化它的基类。而要实例化这个基类，又必须实例化这个基类的基类，这样一直实例化到根类System.Object为止。结果是，无论使用什么构造函数实例化一个类，总是要先调用System.Object.Object()；如果对一个类使用非默认的构造函数，默认的情况是在其基类上使用匹配于这个构造函数签名的构造函数，如果找不到这样的构造函数，就使用基类的默认构造函数。（调用base关键字可以指定.NET实例化过程中使用基类中指定签名的构造函数；调用this关键字可以使当前类在调用this指定的构造函数前，先调用与this的参数匹配的非默认构造函数）&lt;/p&gt;
&lt;p&gt;18、 定义变量时，如果使用了static关键字，则表明该变量是类的静态成员而不是对象实例的成员；定义方法时，如果使用了static关键字，该方法就只能通过类来访问，不能通过对象实例来访问（virtual方法可以重写；abstract方法必须重写；override方法重写了一个基类方法；extern方法定义字其他地方）&lt;/p&gt;
&lt;p&gt;19、 定义属性：get创建只读属性，set创建只写属性&lt;/p&gt;
&lt;p&gt;20、 执行接口的类必须实现接口中的所有的成员；可以使用virtual和abstract来执行接口的成员，但不能使用static和const&lt;/p&gt;
&lt;p&gt;20、 高级转换：
(1). 封箱和拆箱；
(2). is运算符：检查两个类型是否兼容，是则为true；
(3). as运算符：把一种类型转换为指定的引用类型&lt;/p&gt;
&lt;p&gt;22、 深度复制：GetCopy()，Clone()&lt;/p&gt;
&lt;p&gt;23、 定义委托：delegate-返回类型-委托标识符（参数表）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public delegate void EvenNumberHandler(int Number){...};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;24、 定义事件：event-委托标识符-事件标识符&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public event EvenNumberHandler OnEvenNumber;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;25、 安装事件：用new创建一个委托实例并安装到激发事件的类中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;public void MyEvenNumberHandler(string URL){...}; 
EvenNumberHandler HandlerInstance=new EvenNumberHandler(MyEvenNumberHandler);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;26、 创建了委托实例后，用+=运算符（相当于注册监听器的“.”运算符）将其添加到事件变量中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;OnEvenNumber += HandlerInstance; // 删除委托实例用 -=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;27、 激发事件：将事件参数传递到委托方法中即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;EvenNumberHandler(10);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
