<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Algorithm - Category - Utopizza</title>
        <link>https://utopizza.github.io/categories/algorithm/</link>
        <description>Algorithm - Category - Utopizza</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>648847079@qq.com (yusheng)</managingEditor>
            <webMaster>648847079@qq.com (yusheng)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 19 May 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://utopizza.github.io/categories/algorithm/" rel="self" type="application/rss+xml" /><item>
    <title>PageRank在Spark的分布式实现</title>
    <link>https://utopizza.github.io/2019-05-19-%E7%AE%97%E6%B3%95-pagerank%E5%9C%A8spark%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Sun, 19 May 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2019-05-19-%E7%AE%97%E6%B3%95-pagerank%E5%9C%A8spark%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[最近在研究 MapReduce 和 Spark 的相关资料，顺便补个关于如何在虚拟机中搭建的 Spark 上分布式运行 PageRank 算法的博客。犹记得这个小任务是研一开学时，导师布置的第一个小任务，而现在马上就要硕士毕业答辩了，不禁思绪万千。
一、PageRank 算法
PageRank 算法是谷歌的起家算法，凭借该算法谷歌击败了当时所有的其他门户网站以及搜索引擎。该算法的目的是对数以亿计的网页进行排序，重要的网页将被排在前列，作为搜索结果返回给用户。想起了昆丁的电影《低俗小说》中的对白：“如果你要把一具尸体藏起来，你知道世界上哪里最安全吗？那就是谷歌搜索结果的第二页”。言外之意，谷歌搜索的前几条解决方案总能满足用户，用户永远不需要翻到第二页寻找答案。由此可见谷歌的搜索算法及 PageRank 网页排序算法之强大。
PageRank 算法的详细介绍见 维基百科。总而言之，该算法的主要思路是：如果一个网页被很多重要的网页指向，那么它也是一个重要的网页。具体地，互联网中的每个网页被抽象成一个节点；如果网页 A 包含网页 B 的链接，那么有一条有向边从节点 A 指向节点 B。如此，互联网中的网页及其链接被抽象成一个由节点及有向边组成的巨大拓扑图。
拓扑图建立好后，初始化系统，令每个节点的重要性分数均为1。然后开始迭代系统，在每一轮迭代中，对于每个节点，做如下两件事：
 如果出边是加权的，将该节点的分数按权重比例进行拆解并传送到对应的节点；如果出边不加权，那么将该节点的分数平均拆解并传送 搜集从其他节点传送过来的分数并求和，替换该节点原来的分数  该过程从数学上来说就是一个 马尔可夫过程，可以从数学上证明其收敛性。也就是说，该系统经过若干次迭代，必定可以演化到一个平衡态。在这个状态下，每个节点的每一次分数收入约等于其分数支出。此时，每个节点上的分数就是稳定的分数，PageRank 算法按照该分数从大到小对网页进行排序并（分页地）返回给用户。
二、PageRank 算法的 Spark 分布式实现
输入数据是一个文件，如下所示。第一行只有一个数字，表明了该数据集一共有 114529 个网页节点。从第二行开始，每一行表示一个节点的出边以及对应的权重，以 [key-value] 形式表示 ：[指向的节点id:权重]。在使用该数据集时，需要把第一行的数字删去，刚好剩下一共 114529 行，每一行的行号表示其节点id。例如，删掉第一行后，第 2 行为空行，说明节点 2 出度为 0，不指向任何其他节点；第 3 行的数据表示节点 3 指向了节点 8107、节点 22950 和 节点 108053，边的权重分别为 3320、4 和 1。
要分布式实现 PageRank，就需要按 MapReduce 编程范式来编写代码。MapReduce 接受的输入是 key-value 对，在 Map 过程中映射成新的 key-value 对，在 Reduce 过程中对相同 key 的 values 进行聚合，输入最终结果。为方便起见，使用函数式编程语言 Scala 编写。伪码如下：]]></description>
</item><item>
    <title>动态规划题(2)</title>
    <link>https://utopizza.github.io/2018-05-01-%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%982/</link>
    <pubDate>Tue, 01 May 2018 22:03:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-05-01-%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%982/</guid>
    <description><![CDATA[1、最长递增子序列（返回长度）
给定数组 arr，返回它的最长递增子序列的长度。
思路：显然对于数组的任何一个子序列，它必定以数组的某个元素结尾，因此可用 dp[i] 表示以 arr[i] 结尾的最长递增子序列的长度。那它是如何得来的呢？显然它就是在前面 i-1 个最长递增子序列后面追加或者不追加 arr[i] 而得到的 i-1 个新的递增子序列中，最长的那个。如果 arr[i] 大于 arr[j]，那么 arr[i] 就可以追加到以 arr[j] 结尾的最长递增子序列。
边界条件：如果 arr[i] 比它前面的 i-1 个元素都小，那么以 arr[i] 结尾的最长递增子序列就是它自己了，此时 dp[i]=1。
$$ dp[i]=\max{ dp[j]+1 } \text{,} \quad (0 \leq j &lt; i \text{,} arr[j]&lt;arr[i]) $$
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  private static int LIS(int[] arr) { if (arr == null || arr.]]></description>
</item><item>
    <title>动态规划题(1)</title>
    <link>https://utopizza.github.io/2018-04-29-%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%981/</link>
    <pubDate>Sun, 29 Apr 2018 20:03:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-04-29-%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%981/</guid>
    <description><![CDATA[1、矩阵的最小路径和
给定一个矩阵 m ，从左上角开始，每次只能向右或者向下走，最后到达右下角的位置，定义路径上所有的数字之和为路径和。求所有路径中最小路径和。
思路：因为题目规定了每次只能向右走一步或者向下走一步，因此每一个位置的上一步只能是来自左边一个位置或者上边一个位置。那么走到某个位置的最小路径，只能是左边位置路径和与上边位置路径和中最小的那个，加上本位置的数字。
考虑边界条件：第一行的所有位置只能从左边走过来，第一列的所有位置只能从上面走下来。
用 $dp[i][j]$ 表示第 $i$ 行第 $j$ 列位置上的最小路径和，则
$$ dp[i][j]=min{dp[i][j-1], dp[i-1][j]}+m[i][j] $$
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  private static int minPath(int[][] m) { if (m == null || m.length == 0 || m[0].length == 0) return 0; int row = m.length; int col = m[0].length; int[][] dp = new int[row][col]; dp[0][0] = m[0][0]; for (int i = 1; i &lt; row; i++) dp[i][0] = dp[i - 1][0] + m[i][0]; for (int j = 1; j &lt; col; j++) dp[0][j] = dp[0][j - 1] + m[0][j]; for (int i = 1; i &lt; row; i++) { for (int j = 1; j &lt; col; j++) { dp[i][j] = Math.]]></description>
</item><item>
    <title>字符串大整数相乘</title>
    <link>https://utopizza.github.io/2018-01-29-%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%A7%E6%95%B4%E6%95%B0%E7%9B%B8%E4%B9%98/</link>
    <pubDate>Mon, 29 Jan 2018 22:07:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-01-29-%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%A7%E6%95%B4%E6%95%B0%E7%9B%B8%E4%B9%98/</guid>
    <description><![CDATA[在 leetcode 上看到一个巨强的解法，记录一下以加深记忆。原文参见：Easiest JAVA Solution with Graph Explanation
题目：Multiply Strings
题目大意为，给定两个字符串形式的非负整数，求它的乘积，以字符串形式返回。并且：
 两个字符串的长度小于 110. 两个字符串只包含 0 到 9 的数字. 两个字符串不以任何 ‘0’ 开头. 不能使用编程语言内置的大整数库函数，也不能直接转换成整数求解.  leetcode 上某大神给出的思路：
 位数分别为 $m$ 和 $n$ 的两个整数相乘，乘积的位数最大不超过 $m+n$ 从左至右地，乘数的第 $[i]$ 位与被乘数的第 $[j]$ 位相乘的积，将被加到最终结果的第 $[i+j]$ 位和第 $[i+j+1]$ 位  因此，整个计算过程就可以直接模拟我们小学就学的竖式乘法计算过程。这也是令我惊讶的地方，小学就学会了的竖式乘法计算，但是十几年来（我）都没有发现这两个十分有用的规律
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  public static String multiply(String num1, String num2) { int m = num1.]]></description>
</item><item>
    <title>回溯法</title>
    <link>https://utopizza.github.io/2018-01-24-%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%BA%AF%E6%B3%95/</link>
    <pubDate>Wed, 24 Jan 2018 13:57:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-01-24-%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%BA%AF%E6%B3%95/</guid>
    <description><![CDATA[回溯法 （Backtracking） 是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。（摘自百度百科）
此方法一般适用于求“有多少种解”的题目，如N皇后问题的“一共有多少种走法”，数独问题的“一共有多少种填法”，数组和问题的“一共有多少种组合使得数组中的某些元素之和等于目标值”等等。这种问题的特点是搜索空间很大，并且往往伴有约束条件，如N皇后问题的“每个皇后不能在同一直线上”，数独问题的“每行每列每个小九宫格都由1到9组成并且不重复”，数组和问题的“元素之和等于给定目标值”。善于利用这些约束条件，往往可以跳过大量的不可能存在解的搜索空间，极大地减少计算量。此方法也称“剪枝法”。
下面是 leetcode 的一些相关题目的解法。
一、数组和
1、Combination Sum
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] nums, int target) { List&lt;List&lt;Integer&gt;&gt; ret = new ArrayList&lt;&gt;(); Arrays.sort(nums); backtrack(ret,new ArrayList&lt;&gt;(),nums,target,0); return ret; } public void backtrack(List&lt;List&lt;Integer&gt;&gt; soluList, List&lt;Integer&gt; solu, int[] nums, int remain, int start){ if(remain&lt;0) return; else if(remain==0) soluList.add(new ArrayList(solu)); else{ for(int i=start;i&lt;nums.length;i++){ solu.add(nums[i]); backtrack(soluList,solu,nums,remain-nums[i],i); solu.]]></description>
</item><item>
    <title>二分查找</title>
    <link>https://utopizza.github.io/2018-01-14-%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
    <pubDate>Sun, 14 Jan 2018 21:57:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-01-14-%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
    <description><![CDATA[一、原始二分查找
二分查找的思想很简单，就是在一个有序序列里查找一个目标时，先与中位数比较，如果目标等于中位数，则直接返回。如果目标小于中位数，就去前半部分继续查找。如果目标大于中位数，就去后半部分查找，如此重复直至不可再分。如果找到则返回 mid，否则返回 -1 表示序列中不存在改目标。
1 2 3 4 5 6 7 8 9 10  public int BinarySearch(int[] nums, int target) { int lo = 0, hi = nums.length - 1; while (lo &lt;= hi) { int mid = lo + (hi - lo) / 2; if (nums[mid] == target) return mid; else if (nums[mid] &gt; target) hi = mid - 1; else lo = mid + 1; } return -1; }   二、半有序数组的二分查找]]></description>
</item><item>
    <title>FourSum</title>
    <link>https://utopizza.github.io/2018-01-13-%E7%AE%97%E6%B3%95-foursum/</link>
    <pubDate>Sat, 13 Jan 2018 23:20:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-01-13-%E7%AE%97%E6%B3%95-foursum/</guid>
    <description><![CDATA[一、TwoSum
给定一个整型数组，和一个 target，返回数组中两个数之和等于 target 的所有组合。不能输出重复组合。例如给定数组 [2,3,1,-4,8,3]，target = 4，则满足条件的非重复组合有 [3,1] 和 [-4,8]。
思路：因为要求输出的是数组元素而不是数组下标，因此可以对数组进行排序（注意，如果题目要求输出数组下标，就不应使用排序，而是使用 HashMap 来优化）。排序之后，使用两个指针分别从数组两头往中间移动搜索整个数组，为避免重复组合，需跳过重复的元素。当指针相遇时搜索结束，因此搜索的时间复杂度为 $O(n)$。（其实如果算上前面的排序操作那么时间复杂度不止$O(n)$。因为所有基于比较的排序算法的时间复杂度下界为 $O(nlogn)$，所以本算法的总时间复杂度实际上应是 $O(n+nlogn)=O(nlogn)$）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  public List&lt;List&lt;Integer&gt;&gt; TwoSum(int[] nums, int target) { List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;List&lt;Integer&gt;&gt;(); Arrays.sort(nums); int lo = 0, hi = nums.length - 1; while (lo &lt; hi) { int sum = nums[lo] + nums[hi]; if (sum == target) { list.]]></description>
</item><item>
    <title>位运算技巧</title>
    <link>https://utopizza.github.io/2018-01-06-%E7%AE%97%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97%E6%8A%80%E5%B7%A7/</link>
    <pubDate>Sat, 06 Jan 2018 20:20:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-01-06-%E7%AE%97%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97%E6%8A%80%E5%B7%A7/</guid>
    <description><![CDATA[一、6种基本位操作
   符号 描述 运算规则     &amp; And（按位与） 对应位上同时为 1 时，结果才为 1，否则为 0   $\mid$ Or（按位或） 对应位上同时为 0 时，结果才为 0，否则为 1   ~ Not（取反） 1 变 0，0 变 1   ^ Xor（异或） 对应位上相同时输出 0，相异时输出 1   &laquo; Left Shift（左移） 各二进位全部左移若干位，高位丢弃，低位补 0   &gt;&gt; Right Shift（右移） 各二进位全部右移若干位，低位丢弃，高位分情况    注：
 计算机内部使用补码作为机器数，正数的补码等于原码，负数的补码等于原码的符号位外取反加一，切记。另外注意机器字长，如果题目没有明确说明，一般默认是32位或64位 这6种操作符中，只有~取反是单目操作符，其它5种都是双目操作符 位操作只能用于整型数据 位操作运算优先级比较低（比加减乘除低），因此一般需要使用括号来保证正确的运算顺序，否则容易出错 右移运算（&gt;&gt;）时，对无符号数，高位补0。对有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移） Java中的右移（&gt;&gt;）执行的是算术右移，高位补符号位；Java中的无符号（逻辑）右移有单独的运算符号：&gt;&raquo; 另外位操作还有一些复合操作符，如 &amp;=、|=、^=、&laquo;=、&gt;&gt;= 等  二、常用技巧]]></description>
</item><item>
    <title>机器数的三种编码策略</title>
    <link>https://utopizza.github.io/2017-12-31-%E7%AE%97%E6%B3%95-%E6%9C%BA%E5%99%A8%E6%95%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BC%96%E7%A0%81%E7%AD%96%E7%95%A5/</link>
    <pubDate>Sun, 31 Dec 2017 15:10:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2017-12-31-%E7%AE%97%E6%B3%95-%E6%9C%BA%E5%99%A8%E6%95%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BC%96%E7%A0%81%E7%AD%96%E7%95%A5/</guid>
    <description><![CDATA[一、机器数（Machine Data）与真值（True Value）
一个数在计算机中的二进制表示形式，叫做这个数的机器数。我们知道，计算机的物理结构决定了它内部只能存储 0 和 1，也即二进制数，那么计算机如何区分表示一个数的正负呢？一般上，计算机用机器数的最高位存放符号，如果最高位是 0 则表示这个数是一个正数。如果最高位是 1 则表示这个数是一个负数。假设计算机字长为 8 位（现在的计算机一般32位和64位），则 +3 转换成二进制机器数就是 0000 0011，-3 转换成二进制机器数是 1000 0011。
反过来，我们把当一个二进制数作为机器数出现时，它所代表的真实数值为机器数的真值。例如，机器数 0000 0011 的真值为 +000 0001 = +3，机器数 1000 0001 的真值为 –000 0011 = –3。
下面分别介绍原码，反码，补码，它们实际上就是机器数的三种不同的编码策略。其中，适合人脑理解和计算的是原码，而适合计算机使用的是补码。
二、原码（Primitive Encoding）
原码就是直接使用符号位和真值的绝对值的二进制数作为机器码。例如，计算机字长为 8 位时，
$$[+3]_{原}=0000 , 0011$$
$$[-3]_{原}=1000 , 0011$$
由于原码最高位用于表示符号，因此原码可以表示的最大正数为 0111 1111 即 +127，最小负数为 1111 1111 即 -127，因此 8 位字长的原码机器码的取值范围为 [-127, 127]。
三、反码（Invert Encoding）
反码的定义为：正数的反码等于它的原码，负数的反码等于其原码的符号位不变，其余各位取反。例如，计算机字长为 8 位时，
$$[+3]_{反}=0000 , 0011$$
$$[-3]_{反}=1111 , 1100$$]]></description>
</item><item>
    <title>二叉堆建堆时间复杂度</title>
    <link>https://utopizza.github.io/2017-11-08-%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E5%A0%86%E5%BB%BA%E5%A0%86%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
    <pubDate>Wed, 08 Nov 2017 16:07:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2017-11-08-%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E5%A0%86%E5%BB%BA%E5%A0%86%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
    <description><![CDATA[一、二叉堆建堆过程
二叉堆的定义、父子结点的相对位置计算公式，还有建堆过程在 排序算法（一） 中已经说明。这里稍微温习一下建堆的过程：
 从数组的中间位置开始，往左边扫描每个元素，并调用 $sink()$ 方法往下不断调整父子结点的相对位置，如果此堆是最大堆，那么 $sink()$ 方法会使小的结点下沉，大的结点上浮。当扫描完成，则可以保证每个子堆都是父结点大于两个孩子结点，此时堆有序，建堆完成。
 从树的角度来理解，建堆的总时间成本，就是对于下标小于 $\frac{n}{2}$ 的所有结点，也即所有的非叶子结点（二叉堆是完全二叉树），从原位置下沉到正确的位置的总成本。最好的情况是所有非叶子结点都比它的孩子结点大，即数组本来就是堆有序的。最坏的情况是所有非叶子结点都要从原位置一直向下被交换到叶子结点。现在我们来考虑最坏情况的时间复杂度。
在此之前，需要先得到推导过程中会用到的两个小结论。
二、含有 $n$ 个元素的二叉堆的高度为 $\lfloor \log_2{n} \rfloor$
《算法导论》中给出的关于堆的高度的定义：
 堆中一个结点的高度为该结点到叶子结点最长简单路径上边的数目；一个堆的高度即为根结点的高度。
 换句通俗的话说，就是从下往上数，以最深的叶子结点为第一层，高度为 $0$（注意这是《算法导论》给出的堆的高度定义，好像和树的高度的定义不太一样，网上有些博客对于树的高度好像是把最深叶子结点的高度算作 $1$ 而不是 $0$）；它的父结点所在的层为第二层，高度为 $1$，依此类推。因此，一个堆的高度（即根结点的高度）在数值上就等于该堆的总层数减一。这样就可转化成求含 $n$ 个元素的二叉树的总层数的简单问题：
对于一棵完全二叉树，结点总数为 $n$，设一共有 $x$ 层。根据完全二叉树的定义和性质，它的前 $x-1$ 层是一棵满二叉树。这棵满二叉树的总结点个数可以轻松求出：从根节点往下数，第一层共 $2^0$ 个结点，第二层共 $2^1$ 个结点，第 $k$ 层共 $2^{k-1}$ 个结点，因此满二叉树结点总数为：
$$2^0+2^1+\cdots+2^{(x-1)-1}=2^{x-1}-1$$
考虑最后一层，可能是满的也可能不是满的，我们无法确定，但是可以确定这一层必定多于或等于 $1$ 个结点，少于或等于 $2^{x-1}$ 个结点。因此
$$2^{x-1}-1+1 \leq n \leq 2^{x-1}-1+2^{x-1}$$
$$2^{x-1} \leq n \leq 2^x-1$$
$$x-1 \leq \log_{2}n \leq \log_2(2^x-1) &lt; \log_{2}2^x = x$$]]></description>
</item></channel>
</rss>
