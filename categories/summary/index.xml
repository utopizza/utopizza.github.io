<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Summary - Category - Utopizza</title>
        <link>https://utopizza.github.io/categories/summary/</link>
        <description>Summary - Category - Utopizza</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>648847079@qq.com (yusheng)</managingEditor>
            <webMaster>648847079@qq.com (yusheng)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 10 Jul 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://utopizza.github.io/categories/summary/" rel="self" type="application/rss+xml" /><item>
    <title>阶段总结(10)</title>
    <link>https://utopizza.github.io/2020-07-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%9310/</link>
    <pubDate>Fri, 10 Jul 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2020-07-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%9310/</guid>
    <description><![CDATA[上一次写阶段总结是2020年1月入职半年转正，到现在7月又过去半年，入职满一年。回顾下这半年来的工作。
2020年2月
2月份主要正式开始重构SPE，用原生storm重写spe，聚合相同的审计任务，把130个审计任务压缩成4个通用任务，优化后单域任务启动耗时从1个小时缩减到3秒以内，机器资源需求数量从30台缩减到5台，优化效果相当明显。这次对原有复杂系统的重构优化，确实从中学到很多东西，比如storm上的分布式任务编程、多节点选主、缓存实时刷新、读写冲突、流式数据批量写库提高吞吐等等。在重构SPE的同时，接手了两个新的项目BST和PMS，在大概月底附近SPE转测之后，BST开始研发，PMS开始详设。
2020年3月
3月份同时开展三个项目的研发工作，包括
 SPE研发、转测、bug修复、上线 BST研发、转测、bug修复、前后端联调、发布版本 PMS详细设计完善补充、详设评审、研发  2020年4月
4月份初基本完成了SPE、BST的研发工作，然后正式转入PMS一期的研发。余下时间基本都是在实现PMS一期，主要是实现http server，处理client端的请求。4月进行了Q1季度（1～3月）的OKR review，准备得比较充足，拿了“卓越战功奖”。
2020年5月、6月
5月份进入PMS二期研发，主要是web server，对整个数据结构设计引入一些新的对象，重新设计了权限模型。web相关的接口有10多个，工作量很大。用beego重写了一期的一些代码。6月份引入了集中式的相关接口，业务逻辑十分复杂，花了很多时间。这两个月总体上完成了研发任务，陆续完成了三轮测试，基本上可以发布第一版本。
2020年7月
在7月10日这天终于上线了PMS beta版本，刚好是入职一周年，真是个值得纪念的日子。7月进行了Q2季度（4～6）的OKR review，拿了“文化之星奖”（估计是因为奖项半年内不能重复）。]]></description>
</item><item>
    <title>阶段总结(9)</title>
    <link>https://utopizza.github.io/2020-01-20-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%939/</link>
    <pubDate>Mon, 20 Jan 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2020-01-20-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%939/</guid>
    <description><![CDATA[上一次写阶段总结是2019年6月，6月底毕业搬回家后，在家呆了两周不到，7月10日就来深圳入职了。从7月入职到现在2020年1月，已过去了6个月的试用期并且顺利转正。现对这半年试用期做个简要的总结。
2019年7月
系统里定的7月10号报到入职，因此在家里只呆了不到两周就上深圳了。刚入职就遇到团建——东西冲穿越，不知道是暴晒的原因还是过度运动的原因，回来竟然发烧、鼻炎复发。先后看了两次医生，做了鼻镜检查，浪费了不少时间，不过还好没事。并进行了安全域串讲，没过。这次串讲最大的问题是没有了解清楚串讲的内容需求，以为只要讲清楚策略审计模块就行，结果被说没有完整介绍安全域。还要讲清楚数据从页面、采集端、计算、存储、再到页面展示这一整个过程，感觉这两周时间全部弄清楚还是有点难度。总结了几点问题：
 对安全域认识的广度和深度都不够，首先需要弄懂产品定位，从一个俯瞰的角度来看整个产品，有一个全局的认识。例如说，为什么需要安全域，因为公司拥有大量的高价值数据，需要保护这些核心数据不被泄露或盗窃，那么就行需要为数据划定安全的边界，这就是『域』的意义由来。安全域是在公司有了BILS和BAAS这两套基础系统之后为了更进一步保护公司核心数据，然后在其基础上搭建的。还有一个问题就是今天只讲了安全域的感知和审计功能，漏掉了阻断功能，后面需要补充 应该注重细节。要弄清楚数据从被采集到的那一刻开始，从到被传输、被流式处理、落地到数据库、被分析计算、最后到呈现在Web页面上，每一步是怎么走的。反过来从用户提交一个数据或者在Web的一个操作，到数据是怎么被系统接受，下发给各种agent，对系统产生什么影响，也要讲清楚。 在阅读代码的时候应该多思考，为什么这样设计，分别有什么好处和不足之处，为什么要这样tradeoff，等等。同时应该善于总结，抽象出一个个的pattern，为以后面对类似的设计问题时都会非常有帮助 要多考虑工程上的特殊情况，例如服务器宕机了对系统有什么影响，丢失的数据能重现吗，定时任务执行太久导致新来的任务和旧的任务都来不及执行怎么办，什么时候使用反射什么时候使用工厂等等 阅读代码需要理解到可以动手改代码，对代码进行优化或者重构的程度，才能说是真正理解了代码  2019年8月
8月分主要是在弄入职后第一个研发issue，账单分摊系统GianoBills。第一次进行了详细设计评审，结果不理想。评审后开始研发，到月底都基本就是在进行编码实现，其中被日志模块坑了很久。一直没有弄清楚日志模块，导致错误的设计、错误的编码、卡住了很多进度。总结以下几点：
 进行详细设计讲解、技术分享等等之前，最好先自己演练几次，把握一下时间，时间应该多准备几个版本，例如5分钟版本、15分钟版本、30分钟版本等 应该注意抓整体，先讲整体的思路、流程、架构，让大家有一个整体的认识，再根据时间是否允许来一步步展开细节，不要过早陷入太多detail 应该突出主要的一些设计亮点、要点，如果只有平铺直叙是无法吸引大家的注意和兴趣的 在实现一个功能之前，应该先看看目前业界是怎么实现的，有哪些优秀的设计方案，成熟的设计是怎么做的 一定要看官方文档，按照正确的方式来使用API，不要想当然，例如生成多个logger对象这样愚蠢的想法  2019年9月
9月份主要是在进行docker的虚拟化实现，因为没有接触过docker，学习了好一段时间。把账单分摊系统打包进docker的时候遇到了很多配置环境的坑，拖了很久。9月份还做了把crate接入安全域的工作，以及试写Giano SDK接入、安全域运营后台、flume维护等，都是比较杂的小任务。
2019年10月
10月份主要在虚拟化galaxy storm集群，迁移到公司的paas化平台Opera。先是要充分了解storm，所以花了比较多时间看storm的官方文档，在自己笔记本搭建虚拟机集群然后部署storm集群。然后是弄清楚galaxy storm上运行的topology，花了很多时间。加上国庆放假，回来后开始迁移工作。迁移过程实在太多坑太艰辛了，18号周五还莫名其妙弄崩了storm集群，要周围很多同事一起来重新提交所有job，感觉十分愧疚。回来在自己笔记本上想复现那个故障，但是却运行得好好的，完全没有问题，真是郁闷到爆炸。后来查了很多资料发现，故障原因是搭建线下的storm测试集群时，使用了和线上集群同一个zookeeper，但是因为这个storm版本太老还不支持多个nimbus同时运行，然后两个集群都直接崩。就这样躺了版本过旧的坑（这个坑在高版本的storm中被修复了）。月底重新串讲了安全域，因为准备了好久，得到了组内的一致高度肯定和赞扬。
2019年11月
11月份主要是在做BILS故障查询系统GianoCheck，用golang来实现一个http server，于是抽了一个周末的时间学习golang，然后一周内基本就完成了这个任务，这个速度得到了大家的好评。产品体验也得到相关用户的高度评价。第一次在入职后体验到了一些小成就感。另外还做了黄金眼的串讲、一些线上服务的bug定位，安全域运营后台的优化等等。
2019年12月
12月份主要在做一些述职的准备工作，其余时间是日常的运维。由于10月paas化spe-storm后，有很多遗留问题，因此经过详细的讨论后，决定对spe进行优化，用原生storm重写spe，聚合相同的审计任务，把130个审计任务压缩成4个通用任务。因为原有系统逻辑非常复杂，这个月花了大量精力来阅读文档和代码，属于调研&amp;&amp;设计阶段。
2020年1月
1月10日顺利转正，总算熬过了试用期。1月份应该也是主要在调研SPE优化项目，以及一些日常运维。
二、后续计划
最近想了下，工作之余应该有自己的学习计划和安排，否则会浪费很多时间。因此制作个最近的一些学习小目标吧：
 代码规范：这是工程师的最基本素养（python已看，java未看） 多看代码，总结设计模式：同为最基本素养之一 学习大数据组件：hadoop，spark，storm，kafka，zookeeper，flume，thrift，protobuf 学习虚拟化组件：docker，k8s 学会使用上述组件之后，进行源码学习，尝试在git中进行contribute，争取被accept leetcode要重新开始刷，每天至少一道到两道 学有余力的话，学习新语言：mapreduce，storm topology，golang 英语单词落下一段时间了，要重启百词斩和听力练习了 关注下hk的实验室和团队，还有research方向 坚持锻炼身体  ]]></description>
</item><item>
    <title>阶段总结(8)</title>
    <link>https://utopizza.github.io/2019-06-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%938/</link>
    <pubDate>Sun, 30 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2019-06-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%938/</guid>
    <description><![CDATA[上一次写阶段总结是2019年4月底，现在是6月底，这几个月主要都是在学校忙毕业论文和毕业答辩的事情。
2019年5月
毕业答辩日期安排在5月26日，因此这个月基本全部精力时间都花在论文上。论文主体在4月份基本已经写完了，5月份基本都是在补一些报告书如开题报告、中期检查报告等等。月初和舍友去木兰天池玩了一天，山上挺凉快的。中间抽时间在宿舍看了一部电视剧《我们离恶有多远》，相当震撼，因为剧中探讨的问题十分有深度。剧情比较虐心，让人看得都郁闷了很久。就这样刷刷剧、写写文档，就浑浑噩噩到了答辩日期。答辩地点就在实验室旁边的一个大会议室，但是评委老师一个都没见过，刚开始还是有点紧张的。由于准备还算较充分，流畅地讲完了PPT，评委老师也没问什么很深入的问题，就问了我在汉口那边呆了多久，什么时候回来的，我说3月回来的，老师还表扬了一波我说这么短时间能弄出这么多公式理论，还不错。。大概就是就这样水过了硕士答辩。硕士阶段的最后一块大石终于落地。答辩完了基本就知道通过了。回去的路上，感觉整个世界都不一样，虽然是下午四点多，但是感觉阳光特别特别的明媚。
2019年6月
答辩完了之后，回去就是整理各种报告、文档，然后去打印店打印封装论文。然后就是各种浪了，白天蹲在宿舍天天看《bigbang》，下午就约几个小伙伴一起去游泳、密室逃脱、攀岩、射箭、桌游、吃吃喝喝。月初端午节百度寄来了一箱很粽子，16号的时候学校还举办了毕业晚餐会。18号晚上老爸老妈到汉，带他们吃了西餐，然后安顿好酒店。19号带他们逛了武大、省博、楚河汉街。20号上午是毕业典礼，下午弄离校手续，旁晚去拍了毕业照。21号主要是收拾宿舍东西，寄东西，下午带爸妈去逛光谷、拍照。晚上和舍友聚餐。22号早上等爸妈过来吃了早饭，就跟舍友告别，滴滴去高铁站了。
如此，研究生生涯正式告一段落，顺利毕业。]]></description>
</item><item>
    <title>阶段总结(7)</title>
    <link>https://utopizza.github.io/2019-04-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%937/</link>
    <pubDate>Tue, 30 Apr 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2019-04-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%937/</guid>
    <description><![CDATA[上一次写阶段总结是2018年10月，转眼过了半年多。自从10月初选定了offer后，就转去忙论文、数学、以及英语。
一、论文
因为之前看过十来篇兴趣点推荐相关的顶会论文，考虑了下就还是继续做这个方向。从10月份开始，断断续续开始重新看了一遍之前看过的论文，以及做过的笔记和思路。因为之前专注于找工作，从4月份到9月份一直都是在看CS基础以及研发技术相关的书，学术工作放下了半年多，很多细节都忘记了。幸好之前认真做了笔记，复习起来不是太吃力。花了大约一星期的上午完成了复习，感觉还是没啥新灵感，继续用dblp去找了很多新的论文来看。印象中大概一直到快要放寒假的时候才想出了一个基本的雏形，用英文写了个小论文版本。寒假放了13天（2月1日到13日），在家基本都是休息，也没继续弄论文。回来后在公司陆续完成了论文的后半部分。思路基本是定下来了，给这边的老师看了下，确定思路没啥问题后，就差不多搬回学校了（3月3日）。
搬回学校之后就开始做实验，幸亏舍友给力，提供了他们实验室的服务器，不然我这小破笔记本完全不可能做的出实验。实验基本代码很快就写出来了，大概三天左右，接下来就是无尽的噩梦般的炼丹（调参）了。不知道是代码写错还是啥原因，我发现很有的参数即使是很小的改变，竟然对实验结果的影响很大（大雾）。到了三月中下旬，实验结果调得差不多之后，就感觉开始写大论文（毕业论文）。因为你之前已经写好了英文版的小论文，所以大论文写起来比较轻松，一共只用了6天左右。其中花的时间比较多的是第一章绪论，扯了很多废话，找了一些中文的参考文献。后面的相关理论、自己提出的模型、实验设计等等几章直接从英文小论文翻译下扩充下，雏形就基本出来了。四月份基本都在学校修修补补论文以及继续调参，还有就是考虑优化实验里的SGD。四月底，定了稿，发给了导师，以及回公司找导师签字一些报告。
总而言之，从2018年10月到2019年4月主要在弄论文，时间线大概为
 10月份主要复习以前看过的论文 11、12月看新论文 1月份开始构思自己的模型，以及写出一个基本的英语小论文雏形 2月份中旬寒假回来后继续完善英文小论文，2月底跟导师确认思路没有问题 3月初搬回学校，开始做实验。3月中下旬用一周写出了大论文 4月份继续修补大论文以及实验调参。4月底定稿。  二、数学
11月、12月、1月这三个月因为比较闲，回头复习了一波微积分、线性代数、概率统计。其中，微积分主要通过复习本科时候学的《高等数学》，线性代数主要通过网上的教学视频以及研究生学的《矩阵论》，概率统计看的是中科大的《概率论与数理统计》。一般是晚上下班回去看书和吃饭的时候看视频，算是一个小复习。下面贴出资料链接。这波数学复习主要以晚上回宿舍看书为主，最后整理了大概9篇 博客。
 《高等数学》 《概率论与数理统计》 《矩阵论》 MIT公开课：线性代数 MIT公开课：微积分重点 3b1b：线性代数的本质 3b1b：微积分的本质  三、英语
10月、11月、12月三个月基本上都是在背四六级、雅思词汇。因为定了个考雅思的目标。因为习惯了这个新东方系列的排版，索性就又买了这个系列的雅思词汇。背单词的同时也注意听力和写作。针对听力，主要就是直接听真题听力，把MP3下载到音乐播放软件，整天整夜没完没了地放。至于写作，买了本写作的书和一本笔记本，每天抄一篇范文，然后读几遍。从3月份搬回学校之后，因为每天去图书馆，就很少读英语范文了，改成用百词斩背单词。总的来说，这几个月基本把四六级背得比较熟了，雅思那本过了两三遍，词汇量在上面的网上测是9000个左右，百词斩测是一万个左右。搬回学校前主要以背单词书、抄写范文为主。搬回学校后以刷百词斩复习、在网上做雅思题为主。因为回学校后做论文实验花了很多时间，分配给英语的时间不是很多，练的比较少，目前效果不太理想。现在论文定了稿，后面重新把英语提上日程
 《新东方雅思词汇》 《顾家北手把手教你雅思写作》 雅思在线 词汇量测试  ]]></description>
</item><item>
    <title>阶段总结(6)</title>
    <link>https://utopizza.github.io/2018-10-15-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%936/</link>
    <pubDate>Mon, 15 Oct 2018 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-10-15-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%936/</guid>
    <description><![CDATA[2018年6、7、8、9月回顾
从7月开始，一共面了顺丰、大疆、京东、网易、美团、华为、百度、腾讯这八家公司，也都拿到了offer。阿里、头条没有去面，因为听闻加班太严重而且离家太远了（当时不知道头条在深圳有分公司），就没投。自9月30号面完最后一家腾讯后，就不继续面其他公司了，回家休息了两周（10月1号至14号）。10月15号回到学校，继续做实验室老板安排的项目任务。
由于春招的时候完全没有时间准备，没有投实习，没有拿到实习offer保底，实验室也不放人出去实习，因此5月份开始复习看书的时候，心里没底，很担心秋招找不好工作。同时还感觉有很多书要看，很多知识要补，相当焦虑紧张。但这样也有好处，那就是焦虑和紧张的状态会逼迫自己不敢有一丝松懈，感觉5月份到7月份这三个月看书复习的效率相当高。现在回过头来看自己都感到惊讶，仅仅三个月，从接近零基础，到面八家互联网公司就拿八个offer，没有被刷过一次。
现在简单回顾一下从5月份到7月份的三个月的复习，以及8月份到9月份两个月的面试。
一、算法
算法没啥好说的，必须把基础算法吃透，其实不多，也就排序、搜索、数据结构、树、图这几大类。当时是把橙色那本《算法第四版》上面的所有代码手敲了两遍，然后再尝试自己写一遍。因为觉得那本书上面的代码写得实在太漂亮了，相当的简洁，相当符合我的个人审美，并且那本书的作者是个巨神。
这样搞了三遍基础的书法和数据结构后，心里就有些底，没那么方了。接下来也没啥好说的，刷题。当时主要是在leetcode刷，因为讨论区相当活跃，每道题的讨论区有太多让人五体投地的巧妙解法了。刷leetcode之外，配合《剑指offer》和左程云的《程序员面试指南》，应该够了。leetcode前100道刷了两三遍，100到200题没时间了，应该是只做了一遍。剑指offer最重要，一定要烂熟，可以去牛客网刷，刷了3遍左右，时不时要复习，因为面试题几乎全部是从上面出，原题。左程云那本只看了一遍，手敲了一遍，偶而回过头看看代码。
二、计算机基础
这里的计算机基础指的是计算机网络、操作系统、数据库。对于这三科，当时的复习策略是：
 先使用本科学过的课本快速回顾基础知识，因为学过的课本熟悉感最强，这样快速回顾一遍基础知识点可以一定程度的减缓焦虑，稳定情绪。当时用两周复习了本科学过的计算机网络、数据库、操作系统。 然后开始啃对应的黑皮书，在一些关键点上看深入去，因为单靠本科课本那点深度是完全不够应付面试官的。当时计算机网络用《计算机网络：自顶向下方法(6th)》，数据库用《数据库系统概念(6th)》，操作系统用《现代操作系统(4th)》。还有其他的一些黑皮书，在阶段总结(5)中可以有介绍。 啃完黑皮书后，理论基础应该差不多了，然后就找到对应的实现软件来研究，这个时候看起书来就相当轻松了。计算机网络就深入看一些博客，或者针对常问的TCP/UDP协议深入去看；数据库找了MySQL和Redis的书来看，如《Mysql InnoDB》和《Redis开发与运维》；操作系统找了一些Linux编程的入门书来看，如《精通Linux C编程》。  三、编程语言
因为5月份才开始看书，时间很紧张了，考虑到c++比较难，而java相对简单并且做实验室老板的项目一直在用，熟悉感稍微好些(相比c++自从大二之后再也没怎么用过了)，周围的同学都是java系，有问题方便交流些，所以综合考虑后就选择了java系。
 首先是java语法基础，这个必须吃透，没商量。当时用的是《java编程思想》，看深入，看仔细。同时要看jdk源码，特别是hashmap那些，面试都要被问到烂了，但还是会问。 当你看深入的时候，会很自然的会追究到底层原理，因此《深入理解java虚拟机》也是要一起吃透的，虚拟机是java系面试的考察重点，重中之重。 基础打好之后，就要往应用方面去扩展，比如并发编程。《java并发编程实战》和《java并发编程的艺术》两本啃下来基本没问题了。 另一个扩展就是恶心的SSM(spring+springMVC+mybatis)那套框架了。不过这个倒不是特别重要，这个没时间看了，只了解个大概，但是貌似不是很影响，遇到的都不会问很深甚至很多没问。感觉大概知道一些关键原理就行，例如AOP、IOC等。 还有就是一些开源的项目，例如阿里的fastjson，还有各种知名的插件，工具，等等。这个属于加分项了，不是必备基础，没有弄。  四、应试重点
提到重点，不得不感谢某中大巨佬，他在github开源了一个复习用的repo：CyC2018/CS-Notes ，很多人在上面一起总结了很多面试的常问知识点，有针对性地进行复习，可以大大减轻复习压力。
五、关于简历
 越简单干净、布局清晰明确，越好 个人介绍最好尽量写核心的技能点，除了说明自己计算机基础扎实以外，可以在面试公司之前先看对应的岗位要求，然后把自己掌握的技能有针对性地写上去。例如面试美团网易的时候就突出熟悉JVM、熟悉Java并发编程、熟悉MySQL和Redis；而面试腾讯百度的时候就突出熟悉Linux进程间编程、熟悉TCP/UDP协议等等 实习经历是非常重要的，特别如果有大厂的实习经历一定要写上去，这个是最最加分的。没有写，因为实验室不让出去实习，很亏很亏 接下来就是项目经验，这个是第二重要的，把做过的项目按技术含量或者成果大小按从高到低顺序写上去，每个项目按“简介、负责、成果”分3点写，尽可能写简练并且突出亮点就行，不用写太详细。但是自己要不断复盘，把项目的所有细节准备清楚，因为面试官感兴趣的话会问得很细，如果自己做的项目都答不上，那么面试官就可能会怀疑这到底是不是你自己的做的项目，大大扣分 面试之前要想做好自己的职业规划，最好结合目前看的书、掌握的技能点来扩展，这样会显得很有计划并且确实在执行，可以让面试官觉得你的职业规划是靠谱的，而不是凭空说大话。例如，跟面试官说目前在看java并发编程和分布式的书，打算以后往分布式架构、微服务这个方向发展，因为个人觉得这个是以后发展的大方向和趋势，然后再扯一些证明的例子，或者支撑理论，这样答下来就会让面试官觉得你确实是认真思考过的 心态放好。不用紧张不用担心，就我面试过的互联网公司来说，大部分一二面的面试官其实也就比我大两三岁，都是很好说话的小哥，态度很好的，就算你一时间答不上来也会慢慢提示，一步步引导你。到了三四面，一般是部门leader，虽然有时候会比较严肃高冷，但是一般不会问很细节的像一二面的基础技术问题，而是一般会考察一些思维上的东西，例如智力题啊，场景题啊之类的开放性题目，只要多看面经总结，找到套路后一般都可以轻松应付（感觉公司都是有自己题库的，每年问来问去都是那么些题，估计也是因为面试官没那么多精力想新题目，所以刷面经是比较有用的）  六、资料汇总
1、算法
 《算法(4th)》/黑皮《数据结构与算法分析(Java语言版)》 《算法导论》（学有余力并且想真正提高水平的，可以像的大神舍友一样练习推导和证明） 《剑指Offer》 《程序员代码面试指南》 leetcode前200，最好前300题 牛客网的《剑指Offer套题》 《编程珠玑》《编程之美》买了没看，感觉没啥用，层次太高了  2、Java基础
 《java编程思想》/《java核心技术(卷1+卷2)》 《深入理解java虚拟机(2th)》 《java并发编程的艺术》 《java并发编程实战》 部分jdk源码（主要是容器类，还有并发包中的锁，CAS，AQS，线程池） Spring+SpringMVC+MyBatis，当时只是看博客跑个小Demo知道怎么用这套框架就算了，原理只是懂个AOP和IOC的大概就没深入看了  3、计算机基础
 本科课本《计算机网络》+黑皮《计算机网络：自顶向下方法(6th)》 本科课本《数据库系统概论》+黑皮《数据库系统概念(6th)》+《MySQL技术内幕：InnoDB存储引擎》+《Redis开发与运维》/《Redis设计与实现》 本科课本《操作系统》+黑皮《现代操作系统(4th)》+《精通Linux C编程》  4、应试重点
 CyC2018/CS-Notes jwasham/coding-interview-university(这个是进入google的水平，仅供参考，也没看)  5、技能点扩展]]></description>
</item><item>
    <title>阶段总结(5)</title>
    <link>https://utopizza.github.io/2018-05-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%935/</link>
    <pubDate>Wed, 30 May 2018 18:03:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-05-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%935/</guid>
    <description><![CDATA[5月小结。月初购入了几本黑皮书，正式开始复习计算机基础知识：
 《计算机网络：自顶向下方法（6th）》：看完了应用层、运输层、网络层、网络安全，有时间再补充无线网络、链路层、物理层 《数据库系统概念（6th）》：看完了基本SQL语法、基本理论（范式）、索引，还需要看查询优化、事务、并发控制（锁） 《现代操作系统（4th）》：看完了进程线程、内存管理、文件管理，还需要看设备管理，特别是I/O 《Java编程思想（4th）》：重点看了多态、泛型、反射、容器、并发，还需要看I/O 《算法导论（3th）》：当作标准风格代码来偶尔复习，重点是栈、队列、排序、查找、堆、树、图  本月对以上几本书的部分重要章节快速温习了一遍，另外粗略过了一遍：
《深入理解Java虚拟机（2th）》：重点看了GC、类加载、编译优化、内存模型、并发控制，需要补充字节码和类文件结构 《Java并发编程》：重点看了一些常用关键字和API，需要深入理解具体实现细节 《Effective Java（2th）》：粗略看了一遍，看得懂的不多  本月其他时间主要在leetcode练习基本编程功，5月8号重新注册了一个leetcode账号，从第一题开始重新练习，到月底一共做了约120道题，保证平均每天8道题左右的练习量。果然像网上说的那样，第二次做的时候，对一些见过的题目，或者大部分类似的题型，都能很快地有思路，但是目前还有很多细节不能优雅地处理好，另外太过依赖test case来调bug。往后需要争取直接一次性写出bug free的代码。目前能这样做到的比例很低，需要加强。
接下来的6月份计划：
 开始看面经，总结常见面试问题 有针对性地回头复习5月份看的内容，加强记忆，处理掉之前理解模糊的知识点 继续加强编程的练习，基础功不用解释 跟着极客时间的老师的课程内容，梳理并构建一个比较完整的JAVA知识体系 有时间再补充一个面试用的小项目、hadoop和spark等大数据相关书籍、redis非关系型数据库、大型分布式系统的架构？&hellip;&hellip;  ]]></description>
</item><item>
    <title>阶段总结(4)</title>
    <link>https://utopizza.github.io/2018-04-28-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%934/</link>
    <pubDate>Sat, 28 Apr 2018 10:48:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-04-28-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%934/</guid>
    <description><![CDATA[快到五一了，抽空稍微总结一下4月份的情况。
从3月底到4月15号左右，一直在赶项目和改Bug，还有找老师验收。因为同届的专硕要回去学校写论文和答辩，准备毕业了。项目一直各种Bug，各种改，一直拖到了15号左右才正式全部验收完成。总算解放了，这个项目业务逻辑真的太复杂，一直占用了巨量的时间，以至于3月份和4月份基本没有自己的时间来准备实习招聘的面试，错过了很多机会。上一次阶段总结制定的计划基本没有时间推进，书基本没看，进度落下了很多。眼睁睁看着舍友们同学们各种收割大厂offer，压力很大，心里很不是滋味。
从4月15号开始，从项目中解放出来，开始看书。根据目前收集到的消息，综合各方面考虑，决定先打好基础，考虑 Java 研发工程师的方向，不再死磕算法工程师的岗位。原因有以下几点：
 从长远来看，感觉机器学习、深度学习有点过度泡沫的迹象了。资本和企业都在疯狂砸钱招算法工程师做研究，但是真正把这些高级算法落地、实现盈收的企业的很少，更别说作为主要收入了。可以设想等这波热潮过去，资本撤离之后，还会有多少企业养得起这么多高薪而且不一定能为企业挣钱的算法工程师。 从就业情况来看，随着涌进来的人越来越多，竞争自然越来越激烈，门槛自然越来越高。据资料显示，这两年算法岗的要求比前几年高了很多。牛客网上很多这样的例子，前些年的学长学姐没有比赛没有项目没有论文，能力也不是很强，就靠刷几本书一些公开课视频就可以拿大厂的算法岗。然而这两年尤其是今年，很多天池大赛拿到top名次、有深度学习项目经历、有顶会论文、实力很强的同学都觉得非常难进大厂的算法岗，甚至有的同学抱怨连实习都找不到。 从自身角度来看，我应该属于比较劣势的情况。上述的top名次、项目、论文我都没有，没有十分核心的竞争力。只有两个top20左右的天池大赛，决赛都没有进。书和公开课也刷的很少，主要是被老师的项目占去了太多的时间，经常熬夜打比赛就已经精疲力尽了。  另外，前一段时间和老师讨论了下，也和大神舍友交流过，受到蛮多的启发。首先大神舍友的建议是，不要死磕算法岗，目前这个条件要进大厂算法岗确实比较困难。然后老师给建议是，“要考虑自己的长处是什么，不要拿自己的短处去硬碰别人的长处。计算机科班出身的同学，长处应该是深刻理解计算机系统（组成原理、操作系统、网络、数据库、并发、web框架等），数据结构和算法（不是机器学习深度学习的那些算法），能够把复杂的逻辑、业务、算法转化成可靠的代码和稳定的程序，实现具体的功能。机器学习深度学习那些算法从根本上来讲就是数学和统计学，不是我们的长处”。感觉老师说的有一定的道理，虽然不是完全认可他的想法（未免有点狭隘）。计算机的基础确实应该成为我们的长处，虽然算法岗确实薪水高待遇好，但是如果自身没有远超同届竞争者的优势，要得到一份好的工作是不太现实的。所以我决定需要好好复习，打好作为计算机专业学生的基础，至少保证能够达到软件研发工程师的水平，学有余力再向算法工程师进阶。
从16号开始到月末的这两周，看完的书有：
 《操作系统》 《计算机网络》的传输层和网络层 《数据库系统概论》 《java编程思想》前半部分  接下来打算准备的看的内容：
 《深入理解Java虚拟机》 《Java多线程编程》、《Java并发编程》 《高性能Mysql》、《Spring》、《MyBatis》 《设计模式》  再加上之前计划中的那些算法书和面试准备书，差不多这些了。至于项目，时间不多了，大概只能准备个秒杀系统之类的小系统。]]></description>
</item><item>
    <title>阶段总结(3)</title>
    <link>https://utopizza.github.io/2018-03-15-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%933/</link>
    <pubDate>Thu, 15 Mar 2018 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2018-03-15-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%933/</guid>
    <description><![CDATA[上一次阶段总结是2017年12月，到现在差不多3个月。最近春招和实习招聘开始，看了些面经后深感实力不足，现做个总结并规划一下未来的几个月如何为秋招做准备。
2018年1月
1月份过得比较辛苦。首先是鼻炎复发已经拖了几个月，到了这个月拖得实在比较严重了，就跑了好几趟华科同济医学院校区看医生，又去同济医院做鼻镜检查，浪费了很多时间。然后大概是15号左右，同时报名参加了《工业AI制造质量预测》、《糖尿病血糖值预测》、《盐城汽车销量预测》、《盐城汽车上牌量预测》四个天池大数据竞赛。到了月底，无人机初赛、工业复赛和糖尿病初赛几乎同时 A 榜截止换 B 榜（无人机没有B榜，一直在前几名所以不用操心），实在无法兼顾，只好放弃了糖尿病专攻工业。最后结果是无人机初赛 2/1646，工业复赛 21/2529（初赛 15/2529，大神舍友带进去的），糖尿病初赛 234/2522 没有入围前100【实在不建议在时间不允许的条件下强行同时参加多个比赛，一方面经常熬夜对身体损害确实比较大（切身体会），另一方面精力分散很难取得很好的成绩，当然大神除外】。除了看病和打比赛，白天在实验室老板的公司天天被催项目，某一次验收进度不理想，被“导师”上岗上线批评我们小组态度有问题，无奈之下只好把白天的时间全用来赶项目。总的来说，这个月白天赶老板的项目，晚上熬夜打比自己的赛，另外还因为鼻炎经常无法正常休息，精神一直很差，这个月可以说确实是比较辛苦了。
2018年2月
2月份初也比较累，“导师”说过年之前又要验收一次项目进度，核心模块要上线，又不断催进度。然后5号到9号无人机复赛，只有仅仅四天时间，刚好我和队友都在回家路上，浪费了大量时间和好几次提交机会，吃了很大亏，导致成绩不理想。当然我们水平不高实力不够也是重要原因。最后复赛成绩是 17/1646。9号之后就在家开始过年休息，期间偶尔抽点时间搞了下《盐城上牌预测》和《盐城销量预测》，这两个比赛的类型可以说是时间序列相关的，没有什么经验，一直没有什么提高。23号收假回到学校，25号左右两个比赛又是差不多同时截止，我主攻《销量预测》，队友主攻《上牌量预测》，但是结果都不太理想，初赛成绩分别是 132/2500 和 130/2635，都没进复赛。到此，我所有参加的天池大数据竞赛都结束了，熬夜搞比赛的日子暂告一段落。总的来说，这个月的月初和月尾都是在打比赛，中间9到23号两周主要在家过年休息，稍微休息了下。
2018年3月
3月份，开始陆陆续续收到各种年级群里的各种招聘信息，然后花了一周左右开始做简历，并开始看面经，发现目前我的水平远达不到招聘信息上面的岗位要求，十分焦虑。于是开始疯狂复习，现在先来整理一个目标，再制定一个计划，按计划执行。
一、目标与可行性分析
最终的目标就是在秋招的时候能够找到一份自己满意，感兴趣，并且体面工作。和朋友们讨论之后，他们一致认为第一份工作最好是去大厂，例如阿里巴巴，腾讯，百度，网易，今日头条，美团，滴滴，京东，华为等等。
另外，在考虑了一段时间之后，决定找机器学习算法工程师的岗位，因为实在厌倦了后台开发的增删查改和各种繁琐的业务逻辑。虽然机器学习算法岗的薪资是比后台研发高不少，但是要求和门槛也是高很多的。另一方面从自身的角度来分析，我没有参加过 ACM 等信息竞赛的经历，机器学习也是自己挤时间看书自学，没有导师带，周围也没有学长学姐搞机器学习（往届的学长学姐都是找的前后台研发相关的方向，基本没有相关经验传授），可以说是孤军奋战了吧。幸亏有个大神舍友，通过向他学习，才有了今天的一些还过得去的比赛成绩，真的无比感谢。总的来说就是，如果想找到机器学习相关的不太差的工作，接下来几个月肯定要付出异常的艰辛。
二、常见岗位要求（以腾讯与阿里实习招聘为例）
 专业：计算机等相关专业 学历：本科及以上，硕士博士优先 语言：精通 C/C++、Java、Python 等至少一门编程语言，极佳的工程实现能力 算法基本功：熟悉常用机器学习算法，尤其是深度学习、增强学习等相关领域，对模式识别，概率统计、最优化等算法原理及应用，有扎实的基础，深入的理解和浓厚的兴趣 框架与平台：了解目前常见的机器学习或者深度学习框架中的一个或者多个：Spark，XGBoost，Caffe，Tensorflow 等 加分项：在计算机科学学术会议和期刊如 NIPS、ICML、IJCAI、AAAI、UAI、KDD、SIGIR 等发表过论文，或者有相关的开源项目贡献经验，有数理分析方面良好的素养以及数理统计基础，良好的数据敏感能力、较强的逻辑分析能力  三、具体计划
 针对编程语言，选定Java和Python，其中Java用来写算法，Python用来做机器学习。刷一遍**《Java编程思想》**和**《利用Python进行数据分析》**。 针对传统算法基本功，把**《算法第四版》**的所有传统算法代码反复练习回顾，务必做到烂熟于心。为了应对笔试和面试的算法题，需要多刷题，要刷的书有**《程序员面试指南》**、**《剑指Offer》**、**《编程之法》**、**《编程之美》**、**《编程珠玑》**等等，经典的问题的各种解法一定也要非常熟练。除了刷书，还要多动手实践来提高速度和准确性，多刷 **leetcode** 和**牛客网**，目前 leetcode 刷了 100 道 Easy 和 50 道 Medium，但是很多都印象模糊了，要复习一遍也要继续刷新的。总之算法功底非常重要，如果面试的时候算法写不出来就直接 Over 了。 针对机器学习和深度学习算法，同样要熟练写出**《机器学习实战》**的十大机器学习算法的核心代码。其次才是理论，所有概念都要清晰理解熟记，基本的推导要熟练，面试的时候一般都要求**现场推导核心公式**。再有就是要对每个算法模型做**横向比较**，相同点不同点，各自的优缺点，各自的使用场景等等。关于理论的书就两本吧，**《机器学习》**和**《统计方法学》**应该就够了。 针对数理分析能力与数理统计基础，要恶补**《概率论与数理统计》**，在时间允许的情况下可能要再补充一些资料。要做到深刻理解所有原理，并且能够讲清楚。这是机器学习算法工程师的基本功。 针对框架与平台，暂时选定 XGBoost，Sklearn，Spark，Hadoop 与 TensorFlow 吧，找些相关书籍和资料过一遍，掌握相关概率原理，并且跑一些简单demo，然后写个总结帖就差不多了，不用花太多时间。其中，XGBoost 和 SKlearn 是一直常用的，Spark 与 Hadoop 在本科毕业设计中也搭建使用过，问题不是很大，剩下 TensorFlow 这个深度学习的框架还没接触过，估计要花一段时间上手。关于 XGBoost 就直接去官网看文档和找一些论文看；Spark 和 Hadoop 目前还没有开始找书，以后再补充；至于 SkLearn 和 TensorFlow，感觉看现在这个本 《Hands-On Machine Learning with Scikit-Learn and TensorFlow》，再去 github 看看官方文档和源码就差不多了。 针对加分项，论文是没戏了，不用考虑。至于项目，打算再做一个天池的《搜索广告转化预测》，感觉这个和工业界的业务比较接近，如果最后成绩不错，面试时可以拿这个出来讲。  四、一些补充]]></description>
</item><item>
    <title>阶段总结(2)</title>
    <link>https://utopizza.github.io/2017-12-23-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%932/</link>
    <pubDate>Sat, 30 Dec 2017 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2017-12-23-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%932/</guid>
    <description><![CDATA[上一次总结是8月，到现在12月份过去了4个月。2018元旦快到了，研二上学期也接近尾声，现总结下这四个月的工作。
2017年9月
9月份先花了半个月左右的时候整理了本科期间的大部分技术文档和比赛经验，补了些博客。后半个月开始看《算法导论》，主要精力集中于动态规划那一章，自己用 Java 实现了书上的几个算法并按照自己的理解写了几篇博客。之后感觉做题还是太少，理解和熟练程度都不够，便开始在网上搜一些动态规划的经典题目进行补充。这个月基本以补博客为主
2017年10月
10月份中秋国庆假回了趟家，到10月9日左右才回学校。这个月过的比较混乱，同时在尝试做论文和算法，写博客。但因为论文的数据问题进度被卡住了，所以主要精力貌似集中于刷 leetcode 的算法题了，那段时间刷了大概有100多道，大部分是 Easy 难度。19号左右，同届的专硕同学和上一届的学硕学长找完工作回来了，请教了不少经验，要了个书单，不过帮助不大，他们找的都是前后台研发岗，不是机器学习和算法岗。这个月可以说主要以刷 leetcode 为主
2017年11月
11月份，大神舍友带我打天池比赛。11月8日左右弄到了服务器，选好题，选好了 baseline 模型 LightGBM，我就完全停止了论文和算法的学习，全部精力放在了比赛上面。第一次正式使用 Python 的 pandas，numpy，sklearn 这些工具库来实现机器学习，花了不少精力，学习到了很多非常实用的知识。因为 lgb 的本质是梯度提升树，所以我回头去看书，复习了一遍决策树，提升算法，集成学习，提升树与回归树，推导了一些细节，写了一系列博客。
2017年12月
12月份，当然是继续以比赛为主要工作内容。不断尝试新的想法，代码更新并整理了一遍又一遍，成绩排名还行，一直在前20。另外由于题目比较坑，官方的数据有问题，重新发布了两次数据集，导致我们之前的大量调试工作都白费了。同时也逐渐感到遇到提高的瓶颈了，需要继续深入学习新的知识，我们又尝试了模型融合，但是效果并不是很理想。这个月主要精力在调试参数和补决策树的理论知识为主。另外向舍友大神要了个书单和coursera的视频单，但是感觉难度较大，也没太多时间去看了，主要看了吴恩达的《Machine Learning》，并完成作业。
总的来说，这四个月来完成的主要工作：
 整理出了本科时的部分技术博客 读《算法导论》，研究并练习动态规划算法 刷了100多道 leetcode 题，从 Easy 难度开始入手 参加天池大数据比赛，初步学习正规使用 Python 看吴恩达《Machine Learning》视频，做课后作业 看了一些 Kaggle 的资料，初步了解 Kaggle   接下来计划：
 继续弄好天池，争取拿个拿得出手的成绩 继续完成吴恩达《Machine Learning》的后半部分课程 开始刷 leetcode 的 medium 难度的题，适时总结 论文希望能有时间推进进度吧   推荐资料：
 《程序员的数学》（日）结成浩等 《概率论与数理统计》 陈希孺（中科大版） 《具体数学：计算机学科基础》 Knuth等 《Python for Data Analysis》 《Hands-On Machine Learning with Scikit-Learn and TensorFlow》 Coursera:《Machine Learning Specialization》 Coursera:《Neural Networks and Deep Learning》 Coursera:《Neural Networks for Machine Learning》  ]]></description>
</item><item>
    <title>阶段总结(1)</title>
    <link>https://utopizza.github.io/2017-08-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%931/</link>
    <pubDate>Wed, 30 Aug 2017 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2017-08-30-%E6%80%BB%E7%BB%93-%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%931/</guid>
    <description><![CDATA[从6月和导师说了因为公司加班要求变重，论文进度需要缓一缓，到现在8月已过去两个月。这两个月里没有看论文，而是去看书，打基础。这两个月读完的书有：
 《算法》(第四版) Robert Sedgewick 《统计方法学》 李航 《机器学习》 周志华 《机器学习实战》 Peter Harrington 《推荐系统实践》 项亮  其中，《算法》中主要的代码都亲自写了一遍，算是温习了一遍快忘光了的基础算法。然后《统计方法学》、《机器学习》偏理论，《机器学习实战》偏实操，我便把这三本书结合起来一起看。也是亲自手写了一遍《机器学习实战》里面的Python代码，总的来说算是稍微入门了一些最基础的机器学习算法。
至于《推荐系统实践》这本书，是之前做***“Point of Interest Recommendation”***的论文方向的时候，博士师兄推荐的书，这本书讲的比较全面但是也比较浅，也是一门介绍推荐系统入门的书。
总而言之，这两个月做的事情：
 温习了一遍基础算法和数据结构 初步学习并推导了一遍最基础的机器学习的核心公式 初步学习了用Python来实现一些简单的机器学习算法，进行小规模的数据实验   接下来的计划：
 看台湾大学林轩田教授的《机器学习基石》视频 看Coursera上AndrewNg的《机器学习》，完成所有作业，最好能全部拿满分 尝试参加kaggle的练习题 读大量的论文，继续做之前的论文 刷leetcode、牛客算法，保持对数据结构和算法的熟练度 注意看看面经  ]]></description>
</item></channel>
</rss>
