<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Technology - Category - Utopizza</title>
        <link>https://utopizza.github.io/categories/technology/</link>
        <description>Technology - Category - Utopizza</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>648847079@qq.com (yusheng)</managingEditor>
            <webMaster>648847079@qq.com (yusheng)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 14 Oct 2015 20:47:00 &#43;0000</lastBuildDate><atom:link href="https://utopizza.github.io/categories/technology/" rel="self" type="application/rss+xml" /><item>
    <title>技术笔记(10)-CentOS7部署</title>
    <link>https://utopizza.github.io/2015-10-14-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B010/</link>
    <pubDate>Wed, 14 Oct 2015 20:47:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2015-10-14-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B010/</guid>
    <description><![CDATA[0、准备：centos7镜像文件刻录成U盘系统盘
Download CentOS
1、服务器是PowerEdge R720，安装系统前要做radis磁盘阵列
Dell R720上的系统安装问题的解决办法（关于RAID建立磁盘阵列的技术）
2、服务器插上U盘，重启，进入BIOS设置U盘启动，安装centos7(尽量安装英文版否则路径是中文会出现乱码，可以选择安装GNOME桌面版，适用于新手)
centos7.0安装教程
3、配置IP,DNS,GATEWAY,NETMASK,成功之后可以上网
centos下网络配置方法(网关、dns、ip地址配置)
4、下载并安装LAMP(apache2/httpd，mysql/mariadb，PHP以及PHP相关组件一堆)
Install Apache, PHP And MySQL On CentOS 7 (LAMP)
5、部署web网站，记得要从防火墙firewall或者iptables开放网站端口，还要留意SELinux这个东西，有可能在阻止你的网站写缓存文件，导致网站故障
CentOS 7 开放端口 redhat7 centos7 关闭SELinux和防火墙的办法
6、部署ftp网站，如果想用浏览器访问的话，需要设置允许被动模式，并且开发3000-4000端口，否则只能用ftp命令访问
CentOS配置VSFTP服务器 为何客户端软件可以而浏览器则不能连接FTP服务器]]></description>
</item><item>
    <title>技术笔记(9)-MySql语法小结</title>
    <link>https://utopizza.github.io/2014-12-28-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B09/</link>
    <pubDate>Sun, 28 Dec 2014 18:44:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2014-12-28-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B09/</guid>
    <description><![CDATA[一、数据库
1.数据库的选定
1  use testDB;   2.数据库的创建（后面两个是设置字符集和排序方式）：
1  create database(if not exist) testDB (character set charset)(collate collation);   3.数据库的删除：
1  drop database testDB;   4.数据库的更变：
1  alter database testDB(character set charset)(collate collation);   二、数据表
1.存储引擎（查看存储引擎：show engines）：
 ARCHIVE——插入 BLACKHOLE——删除 EXAMPLE——示例 Falcon——事务 FEDERATED——访问远程数据 InnoDB——外键 MEMORY——内存数据表 MERGE——联合 MyISAM——默认 NDB——MySQL Cluster专用 CSV——使用逗号分隔数据项  2.数据表的创建：
(1).数据表选项（选择存储引擎，否则默认为MyISAM）：
1  create table testTB( ... ) engine=InnoDB;   (2).]]></description>
</item><item>
    <title>技术笔记(8)-SQL多条件查询字符串拼接问题</title>
    <link>https://utopizza.github.io/2014-03-06-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B08/</link>
    <pubDate>Thu, 06 Mar 2014 10:18:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2014-03-06-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B08/</guid>
    <description><![CDATA[一、SQL多条件查询
在实现SQL的多条件查询时，一般采用的实现方法是根据传入的参数是否有效来判读是否拼接该项查询条件，如
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // 传入参数：@ProjectName=&#39;rrrr&#39;，@ProjectNumber=&#39;123&#39; // 先写好基本查询句子 declare @sqlString varchar(100) set @sqlString = &#39;select * from Project_Info where 1=1&#39; // 拼接查询条件1 if (@ProjectName IS NOT NULL) AND (@ProjectName &lt;&gt; &#39;&#39;) begin set @sqlString = @sqlString + &#39; and ProjectName like &#39;&#39;%&#39; + @ProjectName + &#39;%&#39;&#39;&#39; end // 拼接查询条件2 if (@ProjectNumber IS NOT NULL) AND (@ProjectNumber &lt;&gt; &#39;&#39;) begin set @sqlString = @sqlString + &#39; and ProjectNumber =&#39;&#39;&#39; + @ProjectNumber + &#39;&#39;&#39;&#39; end // 执行最终结果 exec @sqlString   二、问题]]></description>
</item><item>
    <title>技术笔记(7)-标记语言、脚本语言、编程语言</title>
    <link>https://utopizza.github.io/2014-01-04-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B07/</link>
    <pubDate>Sat, 04 Jan 2014 13:53:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2014-01-04-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B07/</guid>
    <description><![CDATA[编程语言、标记语言、脚本语言分别有哪些？区别是什么？
一、标记语言
是一种将文本（Text）以及文本相关的其他信息结合起来，展现出关于文档结构和数据处理细节的电脑文字编码。与文本相关的其他信息（包括例如文本的结构和表示信息等）与原来的文本结合在一起，但是使用标记（markup）进行标识。
 如：HTML、XML
 二、脚本语言
为了缩短传统的编写-编译-链接-运行（edit-compile-link-run）过程而创建的计算机编程语言。它的特点是：程序代码即是最终的执行文件，只是这个过程需要解释器的参与。脚本语言通常是被解释执行的，而且程序是文本文件。
 如：JavaScript，Python
 三、解析型语言
指用专门解释器对源程序逐行解释成特定平台的机器码并立即执行的语言；相当于把编译型语言的编译链接过程混到一起同时完成的。 解释型语言执行效率较低，且不能脱离解释器运行，但它的跨平台型比较容易，只需提供特定解释器即可。
 如：Python（同时是脚本语言），Java，C#
 三、编译型语言
指用专用的编译器，针对特定的操作平台（操作系统）将某种高级语言源代码一次性翻译成可被硬件平台直接运行的二进制机器码（具有操作数，指令、及相应的格式），这个过程叫做编译；编译好的可执行性文件（.exe），可在相对应的平台上运行（移植性差，但运行效率高）。有些程序编译后，还需要把其他编译好的，可能需要组装两个以上的目标代码生成最终的可执行性文件，称为链接（可实现对低层次代码的复用）。
 如：C、C++、Java
 另外，Java语言是一门很特殊的语言，Java程序需要进行编译步骤，但并不会生成特定平台的二进制机器码，它编译后生成的是一种与平台无关的字节码文件（*.class）（移植性好的原因），这种字节码自然不能被平台直接执行，运行时需要由解释器解释成相应平台的二进制机器码文件；大多数人认为Java是一种编译型语言，但我们说Java即是编译型语言，也是解释型语言也并没有错。
四、区别
 标记语言没有逻辑和行为能力，不用于向计算机发出指令，常用于格式化和链接 脚本语言介于标记语言和编程语言之间，脚本语言脚本语言不需要编译，可以直接用，由解释器来负责解释 编译型语言写的程序执行之前，需要一个专门的编译过程，把程序编译成为机器语言的文件，比如exe文件，以后要运行的话就不用重新翻译了，直接使用编译的结果就行了（exe文件），因为翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高  五、脚本语言与系统语言的区别
 抽象的级别：这是最重要也是最明显示的不同。脚本语言对程序员提供了更高级的抽象。这一点明显表现在：在这种语言自身中，存在有高级的数据结构，如列表和字典结构，和对这种结构简单方便的嵌套和操作。这样可以创建非常成功的程序 类型定义：系统语言通常是强类型和静态类型定义。这就意味着所有变量的类型要在程序中指定，在编译时检查。相反地，脚本语言是最松散的类型定义，完全没有类型声明，并且在运行时进行动态类型检查 执行：系统语言的特点是编译的。程序被编译成可执行的二进制。另一方面，脚本语言的特点是解释，也就是，指令被立即执行，不存在一个编译的中间状态。这就意味着脚本语言是交互式的(你可以在提示符下敲入命令，并且看到结果)，这是另一个巨大的胜利。这样完全将编译过程从编辑-编译-运行循环中去掉了。 速度：以上三点是脚本语言一方面在速度与效率，另一方面在易用性与表示式的强大性之间进行折衷的典型例子。这就使得脚本语言的执行速度比系统语言慢一个数量级。这就是对脚本语言诽谤最多的方面。性能的降低不是真正的问题，因为思想是用脚本语言来组合组件，这些组件是用象C 这样的快速系统语言来编写的。所以所有需要运行快速的东西将因为是用快速的语言实现的而运行得快速。脚本语言只用于将东西绑在一起，并且这些通常不是性能的瓶颈(或如果是，你需要重新检查你的设计)  六、本文参考：
 编程语言、标记语言、脚本语言分别有哪些？区别是什么？ 编译型语言、解释型语言与脚本语言三大类型详解  ]]></description>
</item><item>
    <title>技术笔记(6)-SqlHelper</title>
    <link>https://utopizza.github.io/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B06/</link>
    <pubDate>Sat, 21 Dec 2013 17:44:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B06/</guid>
    <description><![CDATA[刚学ASP.NET时用的比较多的一个简单版的SqlHelper：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107  using System; using System.]]></description>
</item><item>
    <title>技术笔记(5)-表联接Join</title>
    <link>https://utopizza.github.io/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B05/</link>
    <pubDate>Sat, 21 Dec 2013 15:14:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B05/</guid>
    <description><![CDATA[数据库的常用表联接主要有inner join、left join、right join三种。
例表A
   Aid Adate     1 a1   2 a2   3 a3    例表B
   Bid Bdate     1 b1   2 b2   4 b4    1、inner join：取出id相同的字段，仅返回两表匹配的数据
1  select * from A inner join B on A.Aid = B.Bid   此时的取出的是:
   Aid Adate Bid Bdate     1 a1 1 b1   2 a2 2 b2    2、left join：先取出“左表”A表中所有数据，然后再加上与A、B匹配的的数据。不管匹配与否，“左表”表A的全部数据将全部返回]]></description>
</item><item>
    <title>技术笔记(4)-ADO.NET</title>
    <link>https://utopizza.github.io/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B04/</link>
    <pubDate>Sat, 21 Dec 2013 12:21:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2013-12-21-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B04/</guid>
    <description><![CDATA[一、ADO.NET主要用于访问数据，尤其是数据库中的数据，该类被封装在System.Data.dll中。它的两个核心组件：DataSet和.NET数据提供程序
1、DataSet：记录在内存中的数据，相当于内存中的一个完整的数据集。但它并不与外部的物理数据库直接相连，而是通过DataAdapter间接的完成与外部数据库的交互。该类的主要对象有：
 DataTable：使用行和列形式来组织的一个矩形数据集 DataColumn：列（规则的集合） DataRow：行（实际的对应于规则的数据存储） Constraint：决定能进入DataTable的数据 DataRelation：不同的DataTable之间的关联  2、.NET数据提供程序：主要有4种对象，分别是：
 Connection：提供与数据源的连接 Command：执行一系列的数据库命令 DataReader：从数据源中提供高性能的数据流 DataAdapter：提供连接DataSet对象和数据源的桥梁。DataAdapter通过Command对象在数据源中执行SQL命令，并将数据加载到DataSet中，使DataSet中数据的更改与数据源保持一致  二、ADO.NET Connection：Connection类表示一个数据源的单个连接，但并不是单个调用。ADO.NET支持断开式连接，即可在一个Connection对象的使用过程中多次打开或关闭操作，但这些操作并不意味着该对象被创建或者销毁。主要属性有ConnectionString，ConnectionTimeOut，Database，ChangeDatabase，State等。主要的方法有：Open()，Close()。主要的状态属性有：Broken，Closed，Connecting，Executing，Fetching，Open。
三、ADO.NET Command：从本质上讲，ADO.NET的Command类就是SQL命令或者是对存储过程的引用。
1、主要属性有：
 CommandText：执行命令的内容（字符串），或者存储过程的名称 CommandType：告诉Command对象怎样解释CommandText属性的内容，当该属性的值为StoredProcedure时，说明CommandText属性的内容为存储过程名称；当为TableDirect时，说明内容为表名；当为Text时，说明为SQL文本命令（即直接的sql语句） Connection：对Connection对象的引用 Parameters：包含了针对CommandText属性所指定的SQL命令或存储过程的参数集合（通过函数AddRange(paras)向Command对象添加参数集） CommandTimeout：决定了命令出错前等待服务器响应的时间 Transaction： UpdateRowSource:  2、主要的方法有：
 ExecuteNonQuery()：执行命令并返回受影响的行数（用于返回结果为空的sql命令或存储过程） ExecuteScalar()：执行查询并返回结果集中的第一行的第一列（用于返回单个值的sql命令或存储过程） ExecuteReader()：向Connection发送CommandText并生成DataReader（用于返回多个结果的sql命令或存储过程，该方法创建一个DataReader对象。该方法执行时可以不带参数，或者带一个参数CommandBehavior） ExecuteXmlReader()：向Connection发送CommandText并生成XmlReader  四、DataReader：当Command对象返回结果集时，需要用DataReader来检索数据。DataReader对象返回一个来自Command对象的只读的，只能向前的数据流。DataReader每次只在内存中保留一行，所以开销非常小。
1、主要属性：
 Depth：多层结果集中，当前行的嵌套深度 FieldCount：当前行的数目 IsClosed：DataReader是否需要关闭 Item：列值 RecordsAffected：被修改，插入或者删除的行的数目  2、主要方法：
 Close()：关闭 GetType()：将指定的列的值作为指定类型获取 GetDataTypeName()：获取数据源类型的名称 GetFieldType()：返回指定列的系统类型 GetName()：获得指定列的名称 GetValue()：获得指定列的值 NextResult()：前进到得下一个结果 Read()：前进到下一列  五、DataAdapter：DataAdapter是DataSet和物理数据源之间的桥梁，即DataSet通过DataAdapter与数据库间接交互。DataAdapter类的目的是执行数据库查询并创建包含查询结果的DataTable，该类也可以把对DataTable的更改写回数据库。
1、主要方法：
 Fill()：将查询结果填充DataSet Update()：将DataSet中的数据的变动写回数据库  六、应用实例
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  Sqlconnection conn=new SqlConnection(); conn.]]></description>
</item><item>
    <title>技术笔记(3)-C#连接数据库</title>
    <link>https://utopizza.github.io/2013-12-18-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B03/</link>
    <pubDate>Wed, 18 Dec 2013 23:39:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2013-12-18-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B03/</guid>
    <description><![CDATA[一、创建连接：
 引入所使用的ADO.NET类的命名空间（引入System.Data类；使用SQL Server数据库的话就要再引入System.Data.SqlClient类） 创建连接字符串变量，以保存生成连接需要的信息 实例化Connection  二、使用连接：
 打开连接 使用连接，主要进行读取数据，修改和删除数据等操作 关闭连接  三、示例：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  // 引入ADO.NET类的命名空间 using System.Data; using System.Data.SqlClient; // 创建连接字符串 string connStr = &#34;server=XXX（服务器名）; database=XXX（数据库）; uid=XXX（用户名）; pwd=XXX（该用户登陆密码）;&#34; // 创建连接数据库的SqlConnection对象，传入连接字符串，打开连接 SqlConnection conn = new SqlConnection(connStr); conn.Open(); // 创建要对数据库操作的SQL语句 string sql = &#34;insert into subjectTable(ID,name,point) values(2,&#39;物理&#39;,4)&#34;; // 创建SqlCommand对象并传入SQL语句操作语句和SqlConnection连接对象 SqlCommand cmd = new SqlCommand(sql, conn); // 调用ExecuteNonQuery()函数（执行查询语句并返回受影响的行数） int res=cmd.]]></description>
</item><item>
    <title>技术笔记(2)-SQL语法小结</title>
    <link>https://utopizza.github.io/2013-10-23-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B02/</link>
    <pubDate>Wed, 23 Oct 2013 17:53:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2013-10-23-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B02/</guid>
    <description><![CDATA[1、 Transact-SQL语言分类
 数据定义语言（DDL）：创建，删除，修改数据表，建立索引和约束，创建其他数据库对象等 数据操纵语言（DML）：查询，添加，删除，修改数据等 数据控制语言（DCL）：控制安全性的命令  2、数据类型：
 数值型：int,smallint,bigint,tinyint,bit,decimal,numeric,float,real 字符型：char,varchar,text 日期/时间型：datetime,smalldatetime 货币型：money,smallmoney 二进制型：binary,varbinary,image unicode型：nchar,nvarchar,ntext sql-variant型：混合型 table型：临时表 自定义型  3、标识符命名规则：
 规则标识符（符合标识符规则，不用分隔符） 分隔标识符（不符合标识符规则，必须包含在&rdquo; &ldquo;和内）  4、对象命名规则：服务器名+数据库名+所有者名+对象名，如：sever.database.owner_name.object_name
5、常量：见上数据类型
6、变量：
1 2 3 4 5 6 7 8 9 10  //声明 DECLARE @myint int，@mychar char(8) //赋值： SET @myint=10 SET @mychar=&#39;wang&#39; SELECT @myint=10，@mychar=&#39;wang&#39; //查询（即输出） SELECT @myint as myint   7、全局变量：系统预定好的变量，只读，如：@@ERROR，@@DBTS
8、算术运算：+，-，*，/，%
9、逻辑运算：
 and：仅当两个都为true时返回true or：仅当两个都为false时返回false not：对布尔表达式取反 all：如果全都为true，返回true any：如果有一个为true，返回true like：如果操作数与一种模式匹配，返回true in：如果操作数等于表达式列表中的一个，返回true  10、字符串连接符：+]]></description>
</item><item>
    <title>技术笔记(1)-C#语法小结</title>
    <link>https://utopizza.github.io/2013-09-20-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B01/</link>
    <pubDate>Fri, 20 Sep 2013 13:23:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://utopizza.github.io/2013-09-20-%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B01/</guid>
    <description><![CDATA[1、 camelCase规则:第一个单词以小写开头，其他每个单词开头大写，其余字母小写，如: firstName(建议使用)
2、 PascalCase规则: 每个单词除了第一个字母大写，其余小写，如: FirstName
3、 C#的布尔类型只包含true和false，不能用1和0表示，即布尔值和整数值之间不能相互转换
1  bool c=a&gt;b; //若a大于b，则d为true，否则为false   4、 注意&amp;&amp;和&amp;的区别（同||和|）：&amp;&amp;如果第一个操作数可判断为false，则不会继续以后的操作数而直接得出语句的值为false；||如果第一个操作数可判断为true，则不会继续以后的操作数而直接得出语句的值为true
5、 取a和b中的最大者
1  double max=(a&gt;b)?a:b;   6、 整型和字符串转换
1 2 3 4 5 6 7  // 整型转字符串 int i=10; String s=i.ToString(); // 字符串转整型 String s=“100”; int i=Int32.Parse(s);   7、 字符串转换类：Convert。需注意的是，字符串是不能改变的，如果要改变字符串的值，系统会创建一个新的字符串，而不会改变原来的字符串
8、 注意switch语句的开关性，如果某个case语句符合条件，系统会进入switch语句并一直执行到最后，除非遇到break语句才会跳出
9、 数组声明和初始化
1 2  int[] a=new int[10]; int[] b=new int[3]{2,4,6};   10、 foreach循环：对数组进行只读访问而不能做任何修改，而且不会造成数组下标越界
1 2 3 4  int[] b=new int[3]{2,4,6}; foreach(int m in b){ Console.]]></description>
</item></channel>
</rss>
